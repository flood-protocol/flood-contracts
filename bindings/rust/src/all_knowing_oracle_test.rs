pub use all_knowing_oracle_test::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod all_knowing_oracle_test {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "AllKnowingOracleTest was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static ALLKNOWINGORACLETEST_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            ethers :: core :: utils :: __serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"BondPctChanged\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"bondToken\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"NewRequest\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false},{\"internalType\":\"bool\",\"name\":\"answer\",\"type\":\"bool\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"RequestSettled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"settler\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"SettlerWhitelisted\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TokenWhitelisted\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"msg\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"WARNING_Deprecated\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"logs\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"bound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deal\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"adjust\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deal\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deal\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"what\",\"type\":\"string\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deployCode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"what\",\"type\":\"string\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deployCode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"rewind\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setUp\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"skip\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testAsk\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testAskForOtherProposer\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testBondForStake\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotAskIfNoAllowance\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotAskWithInsufficientBalanceForBond\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bondToken\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotAskWithNonWhitelistedToken\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotSettleAsIfNotSettler\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotSettleIfAlreadySettled\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"answer\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testSettle\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"tip\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"vm\",\"outputs\":[{\"internalType\":\"contract Vm\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static ALLKNOWINGORACLETEST_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x608060408190526000805460ff191660011790556001625e79b760e01b031990527f81376b9868b292a46a1c486d344e427a3088657fda629b5f4a647822d329cd6a608452737109709ecfa91a80626ff3989d68f67f5b1dd12d63ffa1864960a46020604051808303816000875af115801562000080573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000a6919062000597565b600880546001600160a01b0319166001600160a01b03929092169190911790556040516001625e79b760e01b031981527f28cac318a86c8a0a6a9156c2dba2c8c2363677ba0514ef616592d81557e679b66004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa18649906024016020604051808303816000875af11580156200013b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000161919062000597565b600980546001600160a01b0319166001600160a01b03929092169190911790556040516001625e79b760e01b031981527f9791f723bf26b668c8cac0664b66d058cdb2a424cfb08c05dd9da570be0eff6f6004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa18649906024016020604051808303816000875af1158015620001f6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200021c919062000597565b600a60006101000a8154816001600160a01b0302191690836001600160a01b03160217905550620002bb73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486040518060400160405280601a81526020017f546f6b656e466978747572652e736f6c3a4d6f636b546f6b656e0000000000008152506006604051602001620002a59190620005c2565b60408051601f19818403018152919052620003c0565b600b60006101000a8154816001600160a01b0302191690836001600160a01b031602179055506200038c73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26040518060400160405280601a81526020017f546f6b656e466978747572652e736f6c3a4d6f636b546f6b656e0000000000008152506012604051602001620002a591906060808252600d908201526c2bb930b83832b21022ba3432b960991b608082015260a060208201819052600490820152630ae8aa8960e31b60c082015260ff91909116604082015260e00190565b600c80546001600160a01b0319166001600160a01b0392909216919091179055348015620003b957600080fd5b506200079f565b60006001600160a01b0384163b8015620003de57849150506200045c565b6000620003ec858562000463565b9050806001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156200042d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620004579190810190620006e2565b509150505b9392505050565b604051638d1cc92560e01b81526000908190737109709ecfa91a80626ff3989d68f67f5b1dd12d90638d1cc92590620004a190879060040162000737565b6000604051808303816000875af1158015620004c1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620004eb9190810190620006e2565b83604051602001620004ff9291906200076c565b60405160208183030381529060405290508051602082016000f091506001600160a01b038216620005905760405162461bcd60e51b815260206004820152603160248201527f54657374206465706c6f79436f646528737472696e672c6279746573293a204460448201527032b83637bcb6b2b73a103330b4b632b21760791b606482015260840160405180910390fd5b5092915050565b600060208284031215620005aa57600080fd5b81516001600160a01b03811681146200045c57600080fd5b606081526000620005e76060830160048152635553444360e01b602082015260400190565b82810360208401526200060b8160048152635553444360e01b602082015260400190565b91505060ff8316604083015292915050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200065057818101518382015260200162000636565b8381111562000660576000848401525b50505050565b60006001600160401b03808411156200068357620006836200061d565b604051601f8501601f19908116603f01168101908282118183101715620006ae57620006ae6200061d565b81604052809350858152868686011115620006c857600080fd5b620006d886602083018762000633565b5050509392505050565b600060208284031215620006f557600080fd5b81516001600160401b038111156200070c57600080fd5b8201601f810184136200071e57600080fd5b6200072f8482516020840162000666565b949350505050565b60208152600082518060208401526200075881604085016020870162000633565b601f01601f19169190910160400192915050565b600083516200078081846020880162000633565b8351908301906200079681836020880162000633565b01949350505050565b616ad680620007af6000396000f3fe60806040523480156200001157600080fd5b5060043610620002015760003560e01c806387289ca61162000119578063c88a5e6d11620000af578063e9a79a7b116200007a578063e9a79a7b146200044d578063fa7626d41462000464578063fad894931462000472578063ff0ced17146200048957600080fd5b8063c88a5e6d14620003f1578063d06d82291462000408578063d1cdf6ac146200041f578063d82555f1146200043657600080fd5b80639a8325a011620000f05780639a8325a01462000391578063af9bbe5f14620003a8578063b9c071b414620003bf578063ba414fa614620003d657600080fd5b806387289ca614620003595780639082e6f0146200037057806397754ae9146200037a57600080fd5b80633a768463116200019b5780635ca3386311620001665780635ca3386314620003175780636bce989b14620003215780636f5970751462000338578063727cb043146200034f57600080fd5b80633a76846314620002ac5780633bf82db114620002c35780634ebf025014620002da5780635a6c1eed14620002f157600080fd5b806329a9e30011620001dc57806329a9e300146200024057806329ce9dde14620002575780632d6c17a3146200028b5780632fb38e7e14620002a257600080fd5b80630a9254e41462000206578063108554f21462000212578063233240ee1462000229575b600080fd5b6200021062000493565b005b6200021062000223366004620052ba565b6200049f565b620002106200023a366004620052e9565b62000578565b620002106200025136600462005310565b62000654565b6200026e6200026836600462005429565b62000706565b6040516001600160a01b0390911681526020015b60405180910390f35b620002106200029c366004620054a9565b62000836565b6200021062000876565b6200026e60008051602062006a6183398151915281565b62000210620002d4366004620054c3565b620009b6565b62000210620002eb366004620054a9565b62000a98565b620003086200030236600462005509565b6200119f565b60405190815260200162000282565b62000210620012d8565b6200021062000332366004620054c3565b620016fe565b6200021062000349366004620052e9565b62001712565b62000210620017bc565b620002106200036a36600462005545565b62001d27565b620002106200246b565b620002106200038b36600462005566565b620025a8565b6200026e620003a2366004620055c0565b620027df565b62000210620003b9366004620054c3565b620028e1565b62000210620003d0366004620054a9565b6200298f565b620003e0620029b0565b604051901515815260200162000282565b6200021062000402366004620052ba565b62002ae1565b620002106200041936600462005310565b62002b17565b6200021062000430366004620054a9565b62002bc9565b6200021062000447366004620054c3565b62002d92565b620002106200045e366004620052ba565b62002e43565b600054620003e09060ff1681565b6200021062000483366004620052e9565b62002ee9565b620002106200312c565b6200049d620032e1565b565b60405163c88a5e6d60e01b815260008051602062006a618339815191529063c88a5e6d90620004d5908590859060040162005601565b600060405180830381600087803b158015620004f057600080fd5b505af115801562000505573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b038516600482015260008051602062006a6183398151915292506306447d5691506024015b600060405180830381600087803b1580156200055b57600080fd5b505af115801562000570573d6000803e3d6000fd5b505050505050565b60405163c88a5e6d60e01b815260008051602062006a618339815191529063c88a5e6d90620005b2908490600160801b9060040162005601565b600060405180830381600087803b158015620005cd57600080fd5b505af1158015620005e2573d6000803e3d6000fd5b505060405163ca669fa760e01b81526001600160a01b038416600482015260008051602062006a61833981519152925063ca669fa791506024015b600060405180830381600087803b1580156200063857600080fd5b505af11580156200064d573d6000803e3d6000fd5b5050505050565b60405163c88a5e6d60e01b815260008051602062006a618339815191529063c88a5e6d906200068e908590600160801b9060040162005601565b600060405180830381600087803b158015620006a957600080fd5b505af1158015620006be573d6000803e3d6000fd5b50506040516323f2866760e11b81526001600160a01b0380861660048301528416602482015260008051602062006a6183398151915292506347e50cce915060440162000540565b604051638d1cc92560e01b8152600090819060008051602062006a6183398151915290638d1cc925906200073f90879060040162005677565b6000604051808303816000875af11580156200075f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200078991908101906200568c565b836040516020016200079d9291906200570c565b60405160208183030381529060405290508051602082016000f091506001600160a01b0382166200082f5760405162461bcd60e51b815260206004820152603160248201527f54657374206465706c6f79436f646528737472696e672c6279746573293a204460448201527032b83637bcb6b2b73a103330b4b632b21760791b60648201526084015b60405180910390fd5b5092915050565b60008051602062006a6183398151915263e5d6bf0262000857834262005755565b6040518263ffffffff1660e01b81526004016200061d91815260200190565b604051630618f58760e51b81526314e9dd3960e31b600482015260008051602062006a618339815191529063c31eb0e090602401600060405180830381600087803b158015620008c557600080fd5b505af1158015620008da573d6000803e3d6000fd5b505060085460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062006a61833981519152925063ca669fa79150602401600060405180830381600087803b1580156200093357600080fd5b505af115801562000948573d6000803e3d6000fd5b5050600d54604051631f86c38760e31b815260006004820152600160248201526001600160a01b03909116925063fc361c3891506044015b600060405180830381600087803b1580156200099b57600080fd5b505af1158015620009b0573d6000803e3d6000fd5b50505050565b60405163c88a5e6d60e01b815260008051602062006a618339815191529063c88a5e6d90620009ec908690859060040162005601565b600060405180830381600087803b15801562000a0757600080fd5b505af115801562000a1c573d6000803e3d6000fd5b50506040516308b6ac0f60e31b81526001600160a01b0380871660048301528516602482015260008051602062006a6183398151915292506345b5607891506044015b600060405180830381600087803b15801562000a7a57600080fd5b505af115801562000a8f573d6000803e3d6000fd5b50505050505050565b60008051602062006a61833981519152634c63e56262000abc601960001962005785565b6040516001600160e01b031960e084901b1681529084106004820152602401600060405180830381600087803b15801562000af657600080fd5b505af115801562000b0b573d6000803e3d6000fd5b5050600d546040516303ef4cfb60e11b815260048101859052600093506001600160a01b0390911691506307de99f690602401602060405180830381865afa15801562000b5c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b8291906200579c565b600854600954600b54604080516001600160a01b03948516602080830182905294861682840181905293861660608301819052608083018a905260a08084018990528451808503909101815260c08401948590528051960195909520600d546384bfabcf60e01b90945296975060009592909216936384bfabcf9362000c1193929091908a9060c401620057b6565b602060405180830381865afa15801562000c2f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c5591906200579c565b905062000c63828262003873565b600b5460085462000c82916001600160a01b03908116911686620016fe565b600b5460095462000ca1916001600160a01b03908116911685620016fe565b600b546008546040516370a0823160e01b81526001600160a01b03918216600482015260009291909116906370a0823190602401602060405180830381865afa15801562000cf3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d1991906200579c565b600b546009546040516370a0823160e01b81526001600160a01b0391821660048201529293506000929116906370a0823190602401602060405180830381865afa15801562000d6c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d9291906200579c565b60085460405163ca669fa760e01b81526001600160a01b03909116600482015290915060008051602062006a618339815191529063ca669fa790602401600060405180830381600087803b15801562000dea57600080fd5b505af115801562000dff573d6000803e3d6000fd5b5050600d546040516381bad6f360e01b8152600160048201819052602482018190526044820181905260648201526001600160a01b03909116608482015260008051602062006a6183398151915292506381bad6f3915060a401600060405180830381600087803b15801562000e7457600080fd5b505af115801562000e89573d6000803e3d6000fd5b5050600954600854600b546040516001600160a01b039384169550918316935088927fb10e0c42d0d8cd4a999f95c50d18109fb205fdf5e55a8ed89121cab7f9f65f699262000ee092909116908c908c90620057e0565b60405180910390a4600d54600854600954600b54604051632bd6267f60e21b81526001600160a01b039485169463af5899fc9462000f2e9490821693908216929116908c90600401620057b6565b600060405180830381600087803b15801562000f4957600080fd5b505af115801562000f5e573d6000803e3d6000fd5b5050600d54604051639d86698560e01b81526004810188905260009350839250829182918291829182916001600160a01b031690639d8669859060240160e060405180830381865afa15801562000fb9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fdf919062005801565b600854969d50949b509299509097509550935091506200100a9088906001600160a01b03166200395c565b600954620010239087906001600160a01b03166200395c565b600b546200103c9086906001600160a01b03166200395c565b6200105e81600281111562001055576200105562005898565b60015b62003a45565b6200106b82600062003b19565b62001077838d62003a45565b62001083848e62003a45565b600b546008546040516370a0823160e01b81526001600160a01b039182166004820152620011099291909116906370a0823190602401602060405180830381865afa158015620010d7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010fd91906200579c565b620010588f8c62005755565b600b546009546040516370a0823160e01b81526001600160a01b039182166004820152620011909291909116906370a08231906024015b602060405180830381865afa1580156200115e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200118491906200579c565b620010588e8b62005755565b50505050505050505050505050565b600081831115620012195760405162461bcd60e51b815260206004820152603a60248201527f5465737420626f756e642875696e743235362c75696e743235362c75696e743260448201527f3536293a204d6178206973206c657373207468616e206d696e2e000000000000606482015260840162000826565b600062001227848462005755565b9050806000036200123b578391506200127b565b60001981036200124e578491506200127b565b6200125981620058ae565b90506000620012698287620058ca565b9050620012778186620058e1565b9250505b60408051818152600c818301526b109bdd5b990814995cdd5b1d60a21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1509392505050565b600a54600954600b54604080516001600160a01b0394851660208083018290529486168284015292851660608201819052606460808301819052601960a08085018290528551808603909101815260c0909401909452825192909501919091206008549495929490926200134f92911686620016fe565b600b546009546200136e916001600160a01b03908116911685620016fe565b600b546008546040516370a0823160e01b81526001600160a01b03918216600482015260009291909116906370a0823190602401602060405180830381865afa158015620013c0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620013e691906200579c565b60085460405163ca669fa760e01b81526001600160a01b03909116600482015290915060008051602062006a618339815191529063ca669fa790602401600060405180830381600087803b1580156200143e57600080fd5b505af115801562001453573d6000803e3d6000fd5b5050600d546040516381bad6f360e01b8152600160048201819052602482018190526044820181905260648201526001600160a01b03909116608482015260008051602062006a6183398151915292506381bad6f3915060a401600060405180830381600087803b158015620014c857600080fd5b505af1158015620014dd573d6000803e3d6000fd5b5050600954600b546040516001600160a01b039283169450878316935086927fb10e0c42d0d8cd4a999f95c50d18109fb205fdf5e55a8ed89121cab7f9f65f699262001530929116908b908b90620057e0565b60405180910390a4600d54600954600b54604051632bd6267f60e21b81526001600160a01b039384169363af5899fc9362001579938993918316921690606490600401620057b6565b600060405180830381600087803b1580156200159457600080fd5b505af1158015620015a9573d6000803e3d6000fd5b5050600d54604051639d86698560e01b81526004810186905260009350839250829182918291829182916001600160a01b031690639d8669859060240160e060405180830381865afa15801562001604573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200162a919062005801565b965096509650965096509650965062001644878b6200395c565b6009546200165d9087906001600160a01b03166200395c565b600b54620016769086906001600160a01b03166200395c565b6200168f81600281111562001055576200105562005898565b6200169c82600062003b19565b620016a8838c62003a45565b620016b4848d62003a45565b600b546008546040516370a0823160e01b81526001600160a01b039182166004820152620016f09291909116906370a082319060240162001140565b505050505050505050505050565b6200170d8383836000620025a8565b505050565b60405163c88a5e6d60e01b815260008051602062006a618339815191529063c88a5e6d906200174c908490600160801b9060040162005601565b600060405180830381600087803b1580156200176757600080fd5b505af11580156200177c573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b038416600482015260008051602062006a6183398151915292506306447d5691506024016200061d565b600d546040516303ef4cfb60e11b815260646004820181905260019290916000916001600160a01b0316906307de99f690602401602060405180830381865afa1580156200180e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200183491906200579c565b600d54600854600954600b546040516384bfabcf60e01b81529495506000946001600160a01b03948516946384bfabcf94620018809490821693908216929116908990600401620057b6565b602060405180830381865afa1580156200189e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620018c491906200579c565b600b54600854919250620018e6916001600160a01b03918216911685620016fe565b600b5460095462001905916001600160a01b03908116911684620016fe565b60085460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062006a618339815191529063ca669fa790602401600060405180830381600087803b1580156200195a57600080fd5b505af11580156200196f573d6000803e3d6000fd5b5050600d54600854600954600b54604051632bd6267f60e21b81526001600160a01b03948516965063af5899fc9550620019ba949384169392831692909116908990600401620057b6565b600060405180830381600087803b158015620019d557600080fd5b505af1158015620019ea573d6000803e3d6000fd5b5050600d5460408051638da5cb5b60e01b8152905160008051602062006a61833981519152945063ca669fa793506001600160a01b0390921691638da5cb5b916004808201926020929091908290030181865afa15801562001a50573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a769190620058fc565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b15801562001ab857600080fd5b505af115801562001acd573d6000803e3d6000fd5b5050600d54604051631f86c38760e31b81526004810185905287151560248201526001600160a01b03909116925063fc361c389150604401600060405180830381600087803b15801562001b2057600080fd5b505af115801562001b35573d6000803e3d6000fd5b5050600d5460408051638da5cb5b60e01b8152905160008051602062006a61833981519152945063ca669fa793506001600160a01b0390921691638da5cb5b916004808201926020929091908290030181865afa15801562001b9b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001bc19190620058fc565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b15801562001c0357600080fd5b505af115801562001c18573d6000803e3d6000fd5b505060408051602480820186905282518083039091018152604490910182526020810180516001600160e01b031663b677167760e01b179052905163f28dceb360e01b815260008051602062006a61833981519152935063f28dceb3925062001c85919060040162005677565b600060405180830381600087803b15801562001ca057600080fd5b505af115801562001cb5573d6000803e3d6000fd5b5050600d54604051631f86c38760e31b81526004810185905287151560248201526001600160a01b03909116925063fc361c389150604401600060405180830381600087803b15801562001d0857600080fd5b505af115801562001d1d573d6000803e3d6000fd5b5050505050505050565b60008051602062006a61833981519152634c63e56262001d4b601960001962005785565b6040516001600160e01b031960e084901b1681529084106004820152602401600060405180830381600087803b15801562001d8557600080fd5b505af115801562001d9a573d6000803e3d6000fd5b5050600d546040516303ef4cfb60e11b815260048101859052600093506001600160a01b0390911691506307de99f690602401602060405180830381865afa15801562001deb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001e1191906200579c565b600d54600854600954600b546040516384bfabcf60e01b81529495506000946001600160a01b03948516946384bfabcf9462001e5d9490821693908216929116908990600401620057b6565b602060405180830381865afa15801562001e7b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001ea191906200579c565b600b5460085491925062001ec3916001600160a01b03918216911685620016fe565b600b5460095462001ee2916001600160a01b03908116911684620016fe565b60085460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062006a618339815191529063ca669fa790602401600060405180830381600087803b15801562001f3757600080fd5b505af115801562001f4c573d6000803e3d6000fd5b5050600d54600854600954600b54604051632bd6267f60e21b81526001600160a01b03948516965063af5899fc955062001f97949384169392831692909116908990600401620057b6565b600060405180830381600087803b15801562001fb257600080fd5b505af115801562001fc7573d6000803e3d6000fd5b5050600b546008546040516370a0823160e01b81526001600160a01b03918216600482015260009450911691506370a0823190602401602060405180830381865afa1580156200201b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200204191906200579c565b600b546009546040516370a0823160e01b81526001600160a01b0391821660048201529293506000929116906370a0823190602401602060405180830381865afa15801562002094573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620020ba91906200579c565b600a5460405163ca669fa760e01b81526001600160a01b03909116600482015290915060008051602062006a618339815191529063ca669fa790602401600060405180830381600087803b1580156200211257600080fd5b505af115801562002127573d6000803e3d6000fd5b5050600d54604051631f86c38760e31b81526004810187905289151560248201526001600160a01b03909116925063fc361c389150604401600060405180830381600087803b1580156200217a57600080fd5b505af11580156200218f573d6000803e3d6000fd5b5050600d54604051639d86698560e01b815260048101879052600093508392506001600160a01b0390911690639d8669859060240160e060405180830381865afa158015620021e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002208919062005801565b965096505050505050620022328160028111156200222a576200222a62005898565b600262003a45565b6200223e828962003b19565b8715156001036200236357600b546008546040516370a0823160e01b81526001600160a01b039182166004820152620022dc9291909116906370a0823190602401602060405180830381865afa1580156200229d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620022c391906200579c565b87620022d08a88620058e1565b620010589190620058e1565b600b546009546040516370a0823160e01b81526001600160a01b0391821660048201526200235d9291909116906370a0823190602401602060405180830381865afa15801562002330573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200235691906200579c565b8462003a45565b62001d1d565b600b546008546040516370a0823160e01b81526001600160a01b039182166004820152620023e49291909116906370a0823190602401602060405180830381865afa158015620023b7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620023dd91906200579c565b8562003a45565b600b546009546040516370a0823160e01b81526001600160a01b03918216600482015262001d1d9291909116906370a0823190602401602060405180830381865afa15801562002438573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200245e91906200579c565b87620022d08a87620058e1565b60085460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062006a618339815191529063ca669fa790602401600060405180830381600087803b158015620024c057600080fd5b505af1158015620024d5573d6000803e3d6000fd5b505060405163f28dceb360e01b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b604482015260008051602062006a61833981519152925063f28dceb391506064015b600060405180830381600087803b1580156200254757600080fd5b505af11580156200255c573d6000803e3d6000fd5b5050600d54600854600954600b54604051632bd6267f60e21b81526001600160a01b03948516965063af5899fc95506200098094938416939283169290911690606490600401620057b6565b604080516001600160a01b0385811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166370a0823160e01b1790529151600092871691620025fe916200591c565b6000604051808303816000865af19150503d80600081146200263d576040519150601f19603f3d011682016040523d82523d6000602084013e62002642565b606091505b509150506000818060200190518101906200265e91906200579c565b9050620026d084620026c987620026a06370a0823160e01b6200268360018d62003c7f565b9060038201805463ffffffff191660e09290921c91909117905590565b90600282018054600181018255600091825260209091206001600160a01b039290921691015590565b9062003ca4565b8215620005705760408051600481526024810182526020810180516001600160e01b03166318160ddd60e01b17905290516000916001600160a01b038916916200271b91906200591c565b6000604051808303816000865af19150503d80600081146200275a576040519150601f19603f3d011682016040523d82523d6000602084013e6200275f565b606091505b509150506000818060200190518101906200277b91906200579c565b905082861015620027a65762002792868462005755565b6200279e908262005755565b9050620027c1565b620027b2838762005755565b620027be9082620058e1565b90505b62001d1d81620026c96318160ddd60e01b6200268360018d62003c7f565b604051638d1cc92560e01b8152600090819060008051602062006a6183398151915290638d1cc925906200281890869060040162005677565b6000604051808303816000875af115801562002838573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200286291908101906200568c565b90508051602082016000f091506001600160a01b038216620028db5760405162461bcd60e51b815260206004820152602b60248201527f54657374206465706c6f79436f646528737472696e67293a204465706c6f796d60448201526a32b73a103330b4b632b21760a91b606482015260840162000826565b50919050565b60405163c88a5e6d60e01b815260008051602062006a618339815191529063c88a5e6d9062002917908690859060040162005601565b600060405180830381600087803b1580156200293257600080fd5b505af115801562002947573d6000803e3d6000fd5b50506040516323f2866760e11b81526001600160a01b0380871660048301528516602482015260008051602062006a6183398151915292506347e50cce915060440162000a5f565b60008051602062006a6183398151915263e5d6bf02620008578342620058e1565b60008054610100900460ff1615620029d15750600054610100900460ff1690565b600060008051602062006a618339815191523b1562002adc5760405160009060008051602062006a61833981519152907f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc49062002a3e9083906519985a5b195960d21b9060200162005601565b60408051601f198184030181529082905262002a5e92916020016200593a565b60408051601f198184030181529082905262002a7a916200591c565b6000604051808303816000865af19150503d806000811462002ab9576040519150601f19603f3d011682016040523d82523d6000602084013e62002abe565b606091505b509150508080602001905181019062002ad891906200596d565b9150505b919050565b60405163c88a5e6d60e01b815260008051602062006a618339815191529063c88a5e6d9062000540908590859060040162005601565b60405163c88a5e6d60e01b815260008051602062006a618339815191529063c88a5e6d9062002b51908590600160801b9060040162005601565b600060405180830381600087803b15801562002b6c57600080fd5b505af115801562002b81573d6000803e3d6000fd5b50506040516308b6ac0f60e31b81526001600160a01b0380861660048301528416602482015260008051602062006a6183398151915292506345b56078915060440162000540565b62002bd8601960001962005785565b811062002cf6576040516011602482015260008051602062006a618339815191529063f28dceb39060440160408051601f198184030181529181526020820180516001600160e01b0316634e487b7160e01b1790525160e083901b6001600160e01b031916815262002c4e919060040162005677565b600060405180830381600087803b15801562002c6957600080fd5b505af115801562002c7e573d6000803e3d6000fd5b5050600d546040516303ef4cfb60e11b8152600481018590526001600160a01b0390911692506307de99f69150602401602060405180830381865afa15801562002ccc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002cf291906200579c565b5050565b6000606462002d078360196200598d565b62002d13919062005785565b600d546040516303ef4cfb60e11b81526004810185905291925062002cf2916001600160a01b03909116906307de99f690602401602060405180830381865afa15801562002d65573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002d8b91906200579c565b8262003a45565b7f42b963ace015abb7c727e77dec115c5f418f4f96d9ec897f85c202793274661a60405162002e18906020808252603b908201527f54686520607469706020737464636865617420686173206265656e206465707260408201527f6563617465642e2055736520606465616c6020696e73746561642e0000000000606082015260800190565b60405180910390a16200170d81620026c984620026a06370a0823160e01b6200268360018a62003c7f565b60405163c88a5e6d60e01b815260008051602062006a618339815191529063c88a5e6d9062002e79908590859060040162005601565b600060405180830381600087803b15801562002e9457600080fd5b505af115801562002ea9573d6000803e3d6000fd5b505060405163ca669fa760e01b81526001600160a01b038516600482015260008051602062006a61833981519152925063ca669fa7915060240162000540565b600b54604051632631f2b160e11b81526001600160a01b0383811692169190911415600482015260008051602062006a6183398151915290634c63e56290602401600060405180830381600087803b15801562002f4557600080fd5b505af115801562002f5a573d6000803e3d6000fd5b5050600c54604051632631f2b160e11b81526001600160a01b0385811692169190911415600482015260008051602062006a618339815191529250634c63e5629150602401600060405180830381600087803b15801562002fba57600080fd5b505af115801562002fcf573d6000803e3d6000fd5b5050604080516001600160a01b03851660248083019190915282518083039091018152604490910182526020810180516001600160e01b031663010d7e6160e11b179052905163f28dceb360e01b815260008051602062006a61833981519152935063f28dceb3925062003047919060040162005677565b600060405180830381600087803b1580156200306257600080fd5b505af115801562003077573d6000803e3d6000fd5b505060085460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062006a61833981519152925063ca669fa79150602401600060405180830381600087803b158015620030d057600080fd5b505af1158015620030e5573d6000803e3d6000fd5b5050600d54600854600954604051632bd6267f60e21b81526001600160a01b03938416955063af5899fc94506200061d9392831692909116908690606490600401620057b6565b60085460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062006a618339815191529063ca669fa790602401600060405180830381600087803b1580156200318157600080fd5b505af115801562003196573d6000803e3d6000fd5b5050600b54600d5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b39350620031d4929091169060009060040162005601565b6020604051808303816000875af1158015620031f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200321a91906200596d565b5060405163f28dceb360e01b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b604482015260008051602062006a618339815191529063f28dceb390606401600060405180830381600087803b1580156200328857600080fd5b505af11580156200329d573d6000803e3d6000fd5b505060085460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062006a61833981519152925063ca669fa791506024016200252c565b620032eb62003cb0565b604051620032f99062005258565b604051809103906000f08015801562003316573d6000803e3d6000fd5b50600d80546001600160a01b0319166001600160a01b03929092169182179055604080516318caf8e360e31b815260048101929092526024820152601060448201526f416c6c4b6e6f77696e674f7261636c6560801b606482015260008051602062006a618339815191529063c657c71890608401600060405180830381600087803b158015620033a657600080fd5b505af1158015620033bb573d6000803e3d6000fd5b50506008546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062006a6183398151915292506306447d569150602401600060405180830381600087803b1580156200341457600080fd5b505af115801562003429573d6000803e3d6000fd5b5050600b54600d5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b393506200346892909116906000199060040162005601565b6020604051808303816000875af115801562003488573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620034ae91906200596d565b50600c54600d5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392620034e9929116906000199060040162005601565b6020604051808303816000875af115801562003509573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200352f91906200596d565b50604080516390c5013b60e01b8152905160008051602062006a61833981519152916390c5013b91600480830192600092919082900301818387803b1580156200357857600080fd5b505af11580156200358d573d6000803e3d6000fd5b50506009546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062006a6183398151915292506306447d569150602401600060405180830381600087803b158015620035e657600080fd5b505af1158015620035fb573d6000803e3d6000fd5b5050600b54600d5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b393506200363a92909116906000199060040162005601565b6020604051808303816000875af11580156200365a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200368091906200596d565b50600c54600d5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392620036bb929116906000199060040162005601565b6020604051808303816000875af1158015620036db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200370191906200596d565b50604080516390c5013b60e01b8152905160008051602062006a61833981519152916390c5013b91600480830192600092919082900301818387803b1580156200374a57600080fd5b505af11580156200375f573d6000803e3d6000fd5b5050600d54600b54604051630ffb1d8b60e01b81526001600160a01b0391821660048201526001602482015291169250630ffb1d8b9150604401600060405180830381600087803b158015620037b457600080fd5b505af1158015620037c9573d6000803e3d6000fd5b5050600d54600c54604051630ffb1d8b60e01b81526001600160a01b0391821660048201526001602482015291169250630ffb1d8b9150604401600060405180830381600087803b1580156200381e57600080fd5b505af115801562003833573d6000803e3d6000fd5b5050600d54600a5460405163194f29df60e11b81526001600160a01b039182166004820152600160248201529116925063329e53be915060440162000980565b80821462002cf25760008051602062006a41833981519152604051620038d89060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b627974604082015264657333325d60d81b606082015260800190565b60405180910390a17fafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f9981604051620039119190620059af565b60405180910390a17fafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99826040516200394a9190620059e8565b60405180910390a162002cf262003e9a565b806001600160a01b0316826001600160a01b03161462002cf25760008051602062006a41833981519152604051620039d39060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b616464604082015264726573735d60d81b606082015260800190565b60405180910390a17f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f8160405162003a0c919062005a13565b60405180910390a17f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f826040516200394a919062005a58565b80821462002cf25760008051602062006a4183398151915260405162003aa79060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a88160405162003ae09190620059af565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8826040516200394a9190620059e8565b8015158215151462002cf25760008051602062006a4183398151915260405162003b7f9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b626f6f6040820152616c5d60f01b606082015260800190565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf35838162003bd2576040518060400160405280600581526020016466616c736560d81b81525062003bf0565b604051806040016040528060048152602001637472756560e01b8152505b60405162003bff919062005a83565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf35838262003c52576040518060400160405280600581526020016466616c736560d81b81525062003c70565b604051806040016040528060048152602001637472756560e01b8152505b6040516200394a919062005ac2565b6005820180546001600160a01b0319166001600160a01b039290921691909117905590565b62002cf2828262003f9e565b600854604080516318caf8e360e31b81526001600160a01b03909216600483015260248201526005604482015264416c69636560d81b606482015260008051602062006a618339815191529063c657c71890608401600060405180830381600087803b15801562003d2057600080fd5b505af115801562003d35573d6000803e3d6000fd5b5050600954604080516318caf8e360e31b81526001600160a01b039092166004830152602482015260036044820152622137b160e91b606482015260008051602062006a61833981519152925063c657c7189150608401600060405180830381600087803b15801562003da757600080fd5b505af115801562003dbc573d6000803e3d6000fd5b5050600a54604080516318caf8e360e31b81526001600160a01b03909216600483015260248201526007604482015266436861726c696560c81b606482015260008051602062006a61833981519152925063c657c7189150608401600060405180830381600087803b15801562003e3257600080fd5b505af115801562003e47573d6000803e3d6000fd5b5050604080516318caf8e360e31b815230600482015260248101919091526003604482015262596f7560e81b606482015260008051602062006a61833981519152925063c657c718915060840162000980565b60008051602062006a618339815191523b1562003f8d5760405160009060008051602062006a61833981519152907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49062003f089083906519985a5b195960d21b90600190602001620057e0565b60408051601f198184030181529082905262003f2892916020016200593a565b60408051601f198184030181529082905262003f44916200591c565b6000604051808303816000865af19150503d806000811462003f83576040519150601f19603f3d011682016040523d82523d6000602084013e62003f88565b606091505b505050505b6000805461ff001916610100179055565b600582015460038301546004840154600285018054604080516020808402820181019092528281526001600160a01b039096169560e09590951b94600093909290918301828280156200401157602002820191906000526020600020905b81548152602001906001019080831162003ffc575b50505050509050600083620040268362004399565b604051602001620040399291906200593a565b60408051601f198184030181528282526001600160a01b038816600090815260018b0160209081528382206001600160e01b03198a1683528152928120919450909290916200408d91869188910162005aed565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff16620040c857620040c68762004446565b505b6001600160a01b0385166000908152602088815260408083206001600160e01b03198816845282528083209051909183916200410991879189910162005aed565b6040516020818303038152906040528051906020012081526020019081526020016000205460001b9050600080876001600160a01b0316846040516200415091906200591c565b600060405180830381855afa9150503d80600081146200418d576040519150601f19603f3d011682016040523d82523d6000602084013e62004192565b606091505b509150620041af905081620041a98860206200598d565b620051ce565b604051630667f9d760e41b81529092506000915060008051602062006a618339815191529063667f9d7090620041ec908b90879060040162005601565b6020604051808303816000875af11580156200420c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200423291906200579c565b9050808214620042e85760405162461bcd60e51b815260206004820152606e60248201527f73746453746f726167652066696e642853746453746f72616765293a2050616360448201527f6b656420736c6f742e205468697320776f756c642063617573652064616e676560648201527f726f7573206f76657277726974696e6720616e642063757272656e746c79206960848201526d39b73a1039bab83837b93a32b21760911b60a482015260c40162000826565b6040516370ca10bb60e01b815260008051602062006a61833981519152906370ca10bb9062004320908b9087908e90600401620057e0565b600060405180830381600087803b1580156200433b57600080fd5b505af115801562004350573d6000803e3d6000fd5b50505060058b0180546001600160a01b03191690555060038a01805463ffffffff191690556200438560028b01600062005266565b896004016000905550505050505050505050565b6060600082516020620043ad91906200598d565b67ffffffffffffffff811115620043c857620043c86200534e565b6040519080825280601f01601f191660200182016040528015620043f3576020820181803683370190505b50905060005b83518110156200082f5760008482815181106200441a576200441a62005b29565b6020026020010151905080826020026020018401525080806200443d90620058ae565b915050620043f9565b600581015460038201546004830154600284018054604080516020808402820181019092528281526000966001600160a01b03169560e01b949387939192909190830182828015620044b857602002820191906000526020600020905b815481526020019060010190808311620044a3575b5050506001600160a01b038716600090815260018a01602090815260408083206001600160e01b03198a1684528252808320905195965094919350620045049250859187910162005aed565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff1615620045a3576001600160a01b0384166000908152602087815260408083206001600160e01b031987168452825280832090519092916200457391859187910162005aed565b60405160208183030381529060405280519060200120815260200190815260200160002054945050505050919050565b600083620045b18362004399565b604051602001620045c49291906200593a565b604051602081830303815290604052905060008051602062006a8183398151915260001c6001600160a01b031663266cf1096040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200462357600080fd5b505af115801562004638573d6000803e3d6000fd5b50505050600080866001600160a01b0316836040516200465991906200591c565b600060405180830381855afa9150503d806000811462004696576040519150601f19603f3d011682016040523d82523d6000602084013e6200469b565b606091505b509150620046b2905081620041a98760206200598d565b6040516365bc948160e01b81526001600160a01b03891660048201529092506000915060008051602062006a61833981519152906365bc9481906024016000604051808303816000875af11580156200470f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262004739919081019062005bc8565b509050805160010362004a9357600060008051602062006a8183398151915260001c6001600160a01b031663667f9d70898460008151811062004780576200478062005b29565b60200260200101516040518363ffffffff1660e01b8152600401620047a792919062005601565b6020604051808303816000875af1158015620047c7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620047ed91906200579c565b90508062004851577f080fc4a96620c4462e705b23f346413fe3796bb63c6f8d8591baec0e231577a588836000815181106200482d576200482d62005b29565b602002602001015160001c6040516200484892919062005601565b60405180910390a15b808314620049045760405162461bcd60e51b815260206004820152606d60248201527f73746453746f726167652066696e642853746453746f72616765293a2050616360448201527f6b656420736c6f742e205468697320776f756c642063617573652064616e676560648201527f726f7573206f76657277726974696e6720616e642063757272656e746c79206960848201526c1cdb9d081cdd5c1c1bdc9d1959609a1b60a482015260c40162000826565b7f9c9555b1e3102e3cf48f427d79cb678f5d9bd1ed0ad574389461e255f95170ed888887896040516020016200493c92919062005aed565b604051602081830303815290604052805190602001208560008151811062004968576200496862005b29565b602002602001015160001c60405162004985949392919062005c29565b60405180910390a181600081518110620049a357620049a362005b29565b6020908102919091018101516001600160a01b038a1660009081528c835260408082206001600160e01b03198c1683528452808220905192939092620049ee918a918c910162005aed565b60408051601f1981840301815291815281516020928301208352828201939093529082016000908120939093556001600160a01b038b16835260018d810182528284206001600160e01b03198c1685528252828420925190939162004a58918a918c910162005aed565b60408051808303601f19018152918152815160209283012083529082019290925201600020805460ff19169115159190911790555062005051565b60018151111562004fe05760005b815181101562004fd957600060008051602062006a8183398151915260001c6001600160a01b031663667f9d708a85858151811062004ae45762004ae462005b29565b60200260200101516040518363ffffffff1660e01b815260040162004b0b92919062005601565b6020604051808303816000875af115801562004b2b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004b5191906200579c565b90508062004bb4577f080fc4a96620c4462e705b23f346413fe3796bb63c6f8d8591baec0e231577a58984848151811062004b905762004b9062005b29565b602002602001015160001c60405162004bab92919062005601565b60405180910390a15b60008051602062006a8183398151915260001c6001600160a01b03166370ca10bb8a85858151811062004beb5762004beb62005b29565b602002602001015161133760f01b6040518463ffffffff1660e01b815260040162004c1993929190620057e0565b600060405180830381600087803b15801562004c3457600080fd5b505af115801562004c49573d6000803e3d6000fd5b50505050600060608a6001600160a01b03168760405162004c6b91906200591c565b600060405180830381855afa9150503d806000811462004ca8576040519150601f19603f3d011682016040523d82523d6000602084013e62004cad565b606091505b50909250905062004cc581620041a98b60206200598d565b955081801562004cd9575061133760f01b86145b1562004f2c577f9c9555b1e3102e3cf48f427d79cb678f5d9bd1ed0ad574389461e255f95170ed8b8b8a8c60405160200162004d1792919062005aed565b6040516020818303038152906040528051906020012088888151811062004d425762004d4262005b29565b602002602001015160001c60405162004d5f949392919062005c29565b60405180910390a184848151811062004d7c5762004d7c62005b29565b6020908102919091018101516001600160a01b038d1660009081528f835260408082206001600160e01b03198f168352845280822090519293909262004dc7918d918f910162005aed565b6040516020818303038152906040528051906020012081526020019081526020016000208190555060018d60010160008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008c6001600160e01b0319166001600160e01b031916815260200190815260200160002060008a8c60405160200162004e5492919062005aed565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548160ff02191690831515021790555060008051602062006a8183398151915260001c6001600160a01b03166370ca10bb8c87878151811062004ec65762004ec662005b29565b6020026020010151866040518463ffffffff1660e01b815260040162004eef93929190620057e0565b600060405180830381600087803b15801562004f0a57600080fd5b505af115801562004f1f573d6000803e3d6000fd5b5050505050505062004fd9565b60008051602062006a8183398151915260001c6001600160a01b03166370ca10bb8c87878151811062004f635762004f6362005b29565b6020026020010151866040518463ffffffff1660e01b815260040162004f8c93929190620057e0565b600060405180830381600087803b15801562004fa757600080fd5b505af115801562004fbc573d6000803e3d6000fd5b50505050505050808062004fd090620058ae565b91505062004aa1565b5062005051565b6040805162461bcd60e51b81526020600482015260248101919091527f73746453746f726167652066696e642853746453746f72616765293a204e6f2060448201527f73746f726167652075736520646574656374656420666f72207461726765742e606482015260840162000826565b6001600160a01b038716600090815260018a01602090815260408083206001600160e01b03198a16845282528083209051909291620050959188918a910162005aed565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff16620051245760405162461bcd60e51b815260206004820152602f60248201527f73746453746f726167652066696e642853746453746f72616765293a20536c6f60448201526e3a143994903737ba103337bab7321760891b606482015260840162000826565b6005890180546001600160a01b031916905560038901805463ffffffff191690556200515560028a01600062005266565b600060048a018190556001600160a01b038816815260208a815260408083206001600160e01b03198a168452825280832090519092916200519b9188918a910162005aed565b60405160208183030381529060405280519060200120815260200190815260200160002054975050505050505050919050565b60008060006020855111620051e5578451620051e8565b60205b905060005b818110156200524e57620052038160086200598d565b86620052108388620058e1565b8151811062005223576200522362005b29565b01602001516001600160f81b031916901c9290921791806200524581620058ae565b915050620051ed565b5090949350505050565b610de78062005c5a83390190565b508054600082559060005260206000209081019062005286919062005289565b50565b5b80821115620052a057600081556001016200528a565b5090565b6001600160a01b03811681146200528657600080fd5b60008060408385031215620052ce57600080fd5b8235620052db81620052a4565b946020939093013593505050565b600060208284031215620052fc57600080fd5b81356200530981620052a4565b9392505050565b600080604083850312156200532457600080fd5b82356200533181620052a4565b915060208301356200534381620052a4565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156200539057620053906200534e565b604052919050565b600067ffffffffffffffff821115620053b557620053b56200534e565b50601f01601f191660200190565b6000620053da620053d48462005398565b62005364565b9050828152838383011115620053ef57600080fd5b828260208301376000602084830101529392505050565b600082601f8301126200541857600080fd5b6200530983833560208501620053c3565b600080604083850312156200543d57600080fd5b823567ffffffffffffffff808211156200545657600080fd5b620054648683870162005406565b935060208501359150808211156200547b57600080fd5b508301601f810185136200548e57600080fd5b6200549f85823560208401620053c3565b9150509250929050565b600060208284031215620054bc57600080fd5b5035919050565b600080600060608486031215620054d957600080fd5b8335620054e681620052a4565b92506020840135620054f881620052a4565b929592945050506040919091013590565b6000806000606084860312156200551f57600080fd5b505081359360208301359350604090920135919050565b80151581146200528657600080fd5b600080604083850312156200555957600080fd5b8235620052db8162005536565b600080600080608085870312156200557d57600080fd5b84356200558a81620052a4565b935060208501356200559c81620052a4565b9250604085013591506060850135620055b58162005536565b939692955090935050565b600060208284031215620055d357600080fd5b813567ffffffffffffffff811115620055eb57600080fd5b620055f98482850162005406565b949350505050565b6001600160a01b03929092168252602082015260400190565b60005b83811015620056375781810151838201526020016200561d565b83811115620009b05750506000910152565b60008151808452620056638160208601602086016200561a565b601f01601f19169290920160200192915050565b60208152600062005309602083018462005649565b6000602082840312156200569f57600080fd5b815167ffffffffffffffff811115620056b757600080fd5b8201601f81018413620056c957600080fd5b8051620056da620053d48262005398565b818152856020838501011115620056f057600080fd5b620057038260208301602086016200561a565b95945050505050565b60008351620057208184602088016200561a565b835190830190620057368183602088016200561a565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156200576a576200576a6200573f565b500390565b634e487b7160e01b600052601260045260246000fd5b6000826200579757620057976200576f565b500490565b600060208284031215620057af57600080fd5b5051919050565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b039390931683526020830191909152604082015260600190565b600080600080600080600060e0888a0312156200581d57600080fd5b87516200582a81620052a4565b60208901519097506200583d81620052a4565b60408901519096506200585081620052a4565b80955050606088015193506080880151925060a0880151620058728162005536565b60c0890151909250600381106200588857600080fd5b8091505092959891949750929550565b634e487b7160e01b600052602160045260246000fd5b600060018201620058c357620058c36200573f565b5060010190565b600082620058dc57620058dc6200576f565b500690565b60008219821115620058f757620058f76200573f565b500190565b6000602082840312156200590f57600080fd5b81516200530981620052a4565b60008251620059308184602087016200561a565b9190910192915050565b6001600160e01b03198316815281516000906200595f8160048501602087016200561a565b919091016004019392505050565b6000602082840312156200598057600080fd5b8151620053098162005536565b6000816000190483118215151615620059aa57620059aa6200573f565b500290565b604081526000620059da60408301600a8152690808115e1c1958dd195960b21b602082015260400190565b905082602083015292915050565b604081526000620059da60408301600a815269080808081058dd1d585b60b21b602082015260400190565b60408152600062005a3e60408301600a8152690808115e1c1958dd195960b21b602082015260400190565b6001600160a01b0393909316602092909201919091525090565b60408152600062005a3e60408301600a815269080808081058dd1d585b60b21b602082015260400190565b60408152600062005aae60408301600a8152690808115e1c1958dd195960b21b602082015260400190565b8281036020840152620055f9818562005649565b60408152600062005aae60408301600a815269080808081058dd1d585b60b21b602082015260400190565b825160009082906020808701845b8381101562005b195781518552938201939082019060010162005afb565b5050948252509092019392505050565b634e487b7160e01b600052603260045260246000fd5b600082601f83011262005b5157600080fd5b8151602067ffffffffffffffff82111562005b705762005b706200534e565b8160051b62005b8182820162005364565b928352848101820192828101908785111562005b9c57600080fd5b83870192505b8483101562005bbd5782518252918301919083019062005ba2565b979650505050505050565b6000806040838503121562005bdc57600080fd5b825167ffffffffffffffff8082111562005bf557600080fd5b62005c038683870162005b3f565b9350602085015191508082111562005c1a57600080fd5b506200549f8582860162005b3f565b6001600160a01b039490941684526001600160e01b0319929092166020840152604083015260608201526080019056fe608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76908290a350601960049081553360009081526003602052604090819020805460ff19166001179055905490517fa2e09ae7caa0e84bcfe806d931934b92bf11ce67ffcaa3033af9a1e031996951916100a89190815260200190565b60405180910390a1610d28806100bf6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638945bd281161008c578063af5899fc11610066578063af5899fc14610202578063c70a900f14610215578063daf9c21014610248578063fc361c381461026b57600080fd5b80638945bd28146101515780638da5cb5b146101645780639d8669851461018f57600080fd5b806307de99f6146100d45780630ffb1d8b146100fa57806313af40351461010f578063329e53be14610122578063391fe4e21461013557806384bfabcf1461013e575b600080fd5b6100e76100e2366004610ad9565b61027e565b6040519081526020015b60405180910390f35b61010d610108366004610b1e565b61028f565b005b61010d61011d366004610b51565b610322565b61010d610130366004610b1e565b610397565b6100e760045481565b6100e761014c366004610b73565b610419565b61010d61015f366004610ad9565b61043e565b600054610177906001600160a01b031681565b6040516001600160a01b0390911681526020016100f1565b6101ef61019d366004610ad9565b60016020819052600091825260409091208054918101546002820154600383015460048401546005909401546001600160a01b0395861695938416949390921692909160ff8082169161010090041687565b6040516100f19796959493929190610bd4565b61010d610210366004610b73565b6104a3565b610238610223366004610b51565b60036020526000908152604090205460ff1681565b60405190151581526020016100f1565b610238610256366004610b51565b60026020526000908152604090205460ff1681565b61010d610279366004610c3a565b6106fe565b600061028982610962565b92915050565b6000546001600160a01b031633146102c25760405162461bcd60e51b81526004016102b990610c5d565b60405180910390fd5b6001600160a01b038216600081815260026020908152604091829020805460ff191685151590811790915591519182527fef81a9943b96c8df4ef243401c9bf5159146166211356898b52d382086168d9291015b60405180910390a25050565b6000546001600160a01b0316331461034c5760405162461bcd60e51b81526004016102b990610c5d565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a350565b6000546001600160a01b031633146103c15760405162461bcd60e51b81526004016102b990610c5d565b6001600160a01b038216600081815260036020908152604091829020805460ff191685151590811790915591519182527f8cc72bec7e2cf5979aefd933f40a28eb590098d522a5c458e497e71c5e6fa90f9101610316565b60008061042583610962565b9050610434868686868561097e565b9695505050505050565b6000546001600160a01b031633146104685760405162461bcd60e51b81526004016102b990610c5d565b60048190556040518181527fa2e09ae7caa0e84bcfe806d931934b92bf11ce67ffcaa3033af9a1e0319969519060200160405180910390a150565b6001600160a01b03821660009081526002602052604090205460ff166104e75760405163010d7e6160e11b81526001600160a01b03831660048201526024016102b9565b60006104f282610962565b90506000610503868686868661097e565b90506001600082815260016020526040902060050154610100900460ff16600281111561053257610532610bbe565b036105535760405163d5e880e960e01b8152600481018290526024016102b9565b60006040518060e00160405280886001600160a01b03168152602001876001600160a01b03168152602001866001600160a01b03168152602001858152602001848152602001600015158152602001600160028111156105b5576105b5610bbe565b9052600083815260016020818152604092839020845181546001600160a01b03199081166001600160a01b03928316178355928601519382018054841694821694909417909355928401516002808501805490931691909316179055606083015160038301556080830151600483015560a083015160058301805460ff198116921515928317825560c0860151959650869593919261ffff1990911661ff0019909116179061010090849081111561066f5761066f610bbe565b021790555061068c9150506001600160a01b0386168730866109d1565b6106a16001600160a01b0386163330876109d1565b604080516001600160a01b038781168252602082018790529181018590528188169189169084907fb10e0c42d0d8cd4a999f95c50d18109fb205fdf5e55a8ed89121cab7f9f65f699060600160405180910390a450505050505050565b3360009081526003602052604090205460ff1661072e576040516314e9dd3960e31b815260040160405180910390fd5b6000828152600160208181526040808420815160e08101835281546001600160a01b03908116825294820154851693810193909352600280820154909416918301919091526003810154606083015260048101546080830152600581015460ff808216151560a08501529293919260c085019261010090920416908111156107b8576107b8610bbe565b60028111156107c9576107c9610bbe565b905250905060028160c0015160028111156107e6576107e6610bbe565b036108075760405163b677167760e01b8152600481018490526024016102b9565b81156108415780516060820151608083015161083c929161082791610c99565b60408401516001600160a01b03169190610a5b565b61085d565b61085d8160200151826060015183608001516108279190610c99565b600260c0820181815283151560a08401908152600086815260016020818152604092839020875181546001600160a01b039182166001600160a01b0319918216178355928901519382018054948216948416949094179093559287015183870180549190931691161790556060850151600382015560808501516004820155905160058201805491151560ff198316811782559351869593949093919261ff001990911661ffff19909116179061010090849081111561091f5761091f610bbe565b02179055505060405183151581528491507fdbed7580b9c2829ee6b384e3833f10b16f9885601c98a01c40fd705b543e9c669060200160405180910390a2505050565b60006064600454836109749190610cb1565b6102899190610cd0565b604080516001600160a01b0396871660208083019190915295871681830152939095166060840152608083019190915260a0808301919091528351808303909101815260c0909101909252815191012090565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d1160016000511416171691505080610a545760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b60448201526064016102b9565b5050505050565b600060405163a9059cbb60e01b8152836004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080610ad35760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b60448201526064016102b9565b50505050565b600060208284031215610aeb57600080fd5b5035919050565b80356001600160a01b0381168114610b0957600080fd5b919050565b80358015158114610b0957600080fd5b60008060408385031215610b3157600080fd5b610b3a83610af2565b9150610b4860208401610b0e565b90509250929050565b600060208284031215610b6357600080fd5b610b6c82610af2565b9392505050565b60008060008060808587031215610b8957600080fd5b610b9285610af2565b9350610ba060208601610af2565b9250610bae60408601610af2565b9396929550929360600135925050565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b038881168252878116602083015286166040820152606081018590526080810184905282151560a082015260e0810160038310610c2857634e487b7160e01b600052602160045260246000fd5b8260c083015298975050505050505050565b60008060408385031215610c4d57600080fd5b82359150610b4860208401610b0e565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115610cac57610cac610c83565b500190565b6000816000190483118215151615610ccb57610ccb610c83565b500290565b600082610ced57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220a086d5378c38188b517141b491168433bcacdd1ef66aa0a3a08acd1fabd82c2a64736f6c634300080f003341304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f500000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12d885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12da2646970667358221220bee8efaf21a052ee0220855fc675ed93233a5472623a17df770ba961c97aee3c64736f6c634300080f0033" . parse () . expect ("invalid bytecode")
        });
    pub struct AllKnowingOracleTest<M>(ethers::contract::Contract<M>);
    impl<M> Clone for AllKnowingOracleTest<M> {
        fn clone(&self) -> Self {
            AllKnowingOracleTest(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for AllKnowingOracleTest<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for AllKnowingOracleTest<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(AllKnowingOracleTest))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> AllKnowingOracleTest<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(
                address.into(),
                ALLKNOWINGORACLETEST_ABI.clone(),
                client,
            )
            .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                ALLKNOWINGORACLETEST_ABI.clone(),
                ALLKNOWINGORACLETEST_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `IS_TEST` (0xfa7626d4) function"]
        pub fn is_test(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([250, 118, 38, 212], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `bound` (0x5a6c1eed) function"]
        pub fn bound(
            &self,
            x: ethers::core::types::U256,
            min: ethers::core::types::U256,
            max: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([90, 108, 30, 237], (x, min, max))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deal` (0x6bce989b) function"]
        pub fn deal_with_token(
            &self,
            token: ethers::core::types::Address,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([107, 206, 152, 155], (token, to, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deal` (0x97754ae9) function"]
        pub fn deal_with_token_and_adjust(
            &self,
            token: ethers::core::types::Address,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
            adjust: bool,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([151, 117, 74, 233], (token, to, give, adjust))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deal` (0xc88a5e6d) function"]
        pub fn deal(
            &self,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([200, 138, 94, 109], (to, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deployCode` (0x29ce9dde) function"]
        pub fn deploy_code_with_args(
            &self,
            what: String,
            args: ethers::core::types::Bytes,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([41, 206, 157, 222], (what, args))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deployCode` (0x9a8325a0) function"]
        pub fn deploy_code(
            &self,
            what: String,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([154, 131, 37, 160], what)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `failed` (0xba414fa6) function"]
        pub fn failed(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([186, 65, 79, 166], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0x233240ee) function"]
        pub fn hoax_0(
            &self,
            who: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([35, 50, 64, 238], who)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0x29a9e300) function"]
        pub fn hoax_1(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([41, 169, 227, 0], (who, origin))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0xaf9bbe5f) function"]
        pub fn hoax_3(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([175, 155, 190, 95], (who, origin, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0xe9a79a7b) function"]
        pub fn hoax_2(
            &self,
            who: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([233, 167, 154, 123], (who, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `rewind` (0x2d6c17a3) function"]
        pub fn rewind(
            &self,
            time: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([45, 108, 23, 163], time)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setUp` (0x0a9254e4) function"]
        pub fn set_up(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([10, 146, 84, 228], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `skip` (0xb9c071b4) function"]
        pub fn skip(
            &self,
            time: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([185, 192, 113, 180], time)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0x108554f2) function"]
        pub fn start_hoax_1(
            &self,
            who: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([16, 133, 84, 242], (who, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0x3bf82db1) function"]
        pub fn start_hoax_3(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([59, 248, 45, 177], (who, origin, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0x6f597075) function"]
        pub fn start_hoax_0(
            &self,
            who: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([111, 89, 112, 117], who)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0xd06d8229) function"]
        pub fn start_hoax_2(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([208, 109, 130, 41], (who, origin))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testAsk` (0x4ebf0250) function"]
        pub fn test_ask(
            &self,
            stake: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([78, 191, 2, 80], stake)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testAskForOtherProposer` (0x5ca33863) function"]
        pub fn test_ask_for_other_proposer(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([92, 163, 56, 99], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testBondForStake` (0xd1cdf6ac) function"]
        pub fn test_bond_for_stake(
            &self,
            s: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([209, 205, 246, 172], s)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotAskIfNoAllowance` (0xff0ced17) function"]
        pub fn test_cannot_ask_if_no_allowance(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([255, 12, 237, 23], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotAskWithInsufficientBalanceForBond` (0x9082e6f0) function"]
        pub fn test_cannot_ask_with_insufficient_balance_for_bond(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([144, 130, 230, 240], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotAskWithNonWhitelistedToken` (0xfad89493) function"]
        pub fn test_cannot_ask_with_non_whitelisted_token(
            &self,
            bond_token: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([250, 216, 148, 147], bond_token)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotSettleAsIfNotSettler` (0x2fb38e7e) function"]
        pub fn test_cannot_settle_as_if_not_settler(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([47, 179, 142, 126], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotSettleIfAlreadySettled` (0x727cb043) function"]
        pub fn test_cannot_settle_if_already_settled(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([114, 124, 176, 67], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testSettle` (0x87289ca6) function"]
        pub fn test_settle(
            &self,
            answer: bool,
            stake: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([135, 40, 156, 166], (answer, stake))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `tip` (0xd82555f1) function"]
        pub fn tip(
            &self,
            token: ethers::core::types::Address,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([216, 37, 85, 241], (token, to, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `vm` (0x3a768463) function"]
        pub fn vm(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([58, 118, 132, 99], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `BondPctChanged` event"]
        pub fn bond_pct_changed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, BondPctChangedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `NewRequest` event"]
        pub fn new_request_filter(&self) -> ethers::contract::builders::Event<M, NewRequestFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `RequestSettled` event"]
        pub fn request_settled_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, RequestSettledFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `SettlerWhitelisted` event"]
        pub fn settler_whitelisted_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, SettlerWhitelistedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TokenWhitelisted` event"]
        pub fn token_whitelisted_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TokenWhitelistedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `WARNING_Deprecated` event"]
        pub fn warning_deprecated_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, WarningDeprecatedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log` event"]
        pub fn log_filter(&self) -> ethers::contract::builders::Event<M, LogFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_address` event"]
        pub fn log_address_filter(&self) -> ethers::contract::builders::Event<M, LogAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes` event"]
        pub fn log_bytes_filter(&self) -> ethers::contract::builders::Event<M, LogBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes32` event"]
        pub fn log_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_int` event"]
        pub fn log_int_filter(&self) -> ethers::contract::builders::Event<M, LogIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_address` event"]
        pub fn log_named_address_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes` event"]
        pub fn log_named_bytes_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes32` event"]
        pub fn log_named_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_int` event"]
        pub fn log_named_decimal_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_uint` event"]
        pub fn log_named_decimal_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_int` event"]
        pub fn log_named_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_string` event"]
        pub fn log_named_string_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_uint` event"]
        pub fn log_named_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_string` event"]
        pub fn log_string_filter(&self) -> ethers::contract::builders::Event<M, LogStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_uint` event"]
        pub fn log_uint_filter(&self) -> ethers::contract::builders::Event<M, LogUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `logs` event"]
        pub fn logs_filter(&self) -> ethers::contract::builders::Event<M, LogsFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, AllKnowingOracleTestEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>>
        for AllKnowingOracleTest<M>
    {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "BondPctChanged", abi = "BondPctChanged(uint256)")]
    pub struct BondPctChangedFilter {
        pub new_pct: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "NewRequest",
        abi = "NewRequest(bytes32,address,address,address,uint256,uint256)"
    )]
    pub struct NewRequestFilter {
        #[ethevent(indexed)]
        pub id: [u8; 32],
        #[ethevent(indexed)]
        pub proposer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub disputer: ethers::core::types::Address,
        pub bond_token: ethers::core::types::Address,
        pub stake: ethers::core::types::U256,
        pub bond: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "RequestSettled", abi = "RequestSettled(bytes32,bool)")]
    pub struct RequestSettledFilter {
        pub id: [u8; 32],
        pub answer: bool,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "SettlerWhitelisted", abi = "SettlerWhitelisted(address,bool)")]
    pub struct SettlerWhitelistedFilter {
        #[ethevent(indexed)]
        pub settler: ethers::core::types::Address,
        pub enabled: bool,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "TokenWhitelisted", abi = "TokenWhitelisted(address,bool)")]
    pub struct TokenWhitelistedFilter {
        #[ethevent(indexed)]
        pub token: ethers::core::types::Address,
        pub enabled: bool,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "WARNING_Deprecated", abi = "WARNING_Deprecated(string)")]
    pub struct WarningDeprecatedFilter {
        pub msg: String,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log", abi = "log(string)")]
    pub struct LogFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_address", abi = "log_address(address)")]
    pub struct LogAddressFilter(pub ethers::core::types::Address);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes", abi = "log_bytes(bytes)")]
    pub struct LogBytesFilter(pub ethers::core::types::Bytes);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes32", abi = "log_bytes32(bytes32)")]
    pub struct LogBytes32Filter(pub [u8; 32]);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_int", abi = "log_int(int256)")]
    pub struct LogIntFilter(pub I256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_address", abi = "log_named_address(string,address)")]
    pub struct LogNamedAddressFilter {
        pub key: String,
        pub val: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes", abi = "log_named_bytes(string,bytes)")]
    pub struct LogNamedBytesFilter {
        pub key: String,
        pub val: ethers::core::types::Bytes,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes32", abi = "log_named_bytes32(string,bytes32)")]
    pub struct LogNamedBytes32Filter {
        pub key: String,
        pub val: [u8; 32],
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_int",
        abi = "log_named_decimal_int(string,int256,uint256)"
    )]
    pub struct LogNamedDecimalIntFilter {
        pub key: String,
        pub val: I256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_uint",
        abi = "log_named_decimal_uint(string,uint256,uint256)"
    )]
    pub struct LogNamedDecimalUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_int", abi = "log_named_int(string,int256)")]
    pub struct LogNamedIntFilter {
        pub key: String,
        pub val: I256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_string", abi = "log_named_string(string,string)")]
    pub struct LogNamedStringFilter {
        pub key: String,
        pub val: String,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_uint", abi = "log_named_uint(string,uint256)")]
    pub struct LogNamedUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_string", abi = "log_string(string)")]
    pub struct LogStringFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_uint", abi = "log_uint(uint256)")]
    pub struct LogUintFilter(pub ethers::core::types::U256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "logs", abi = "logs(bytes)")]
    pub struct LogsFilter(pub ethers::core::types::Bytes);
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum AllKnowingOracleTestEvents {
        BondPctChangedFilter(BondPctChangedFilter),
        NewRequestFilter(NewRequestFilter),
        RequestSettledFilter(RequestSettledFilter),
        SettlerWhitelistedFilter(SettlerWhitelistedFilter),
        TokenWhitelistedFilter(TokenWhitelistedFilter),
        WarningDeprecatedFilter(WarningDeprecatedFilter),
        LogFilter(LogFilter),
        LogAddressFilter(LogAddressFilter),
        LogBytesFilter(LogBytesFilter),
        LogBytes32Filter(LogBytes32Filter),
        LogIntFilter(LogIntFilter),
        LogNamedAddressFilter(LogNamedAddressFilter),
        LogNamedBytesFilter(LogNamedBytesFilter),
        LogNamedBytes32Filter(LogNamedBytes32Filter),
        LogNamedDecimalIntFilter(LogNamedDecimalIntFilter),
        LogNamedDecimalUintFilter(LogNamedDecimalUintFilter),
        LogNamedIntFilter(LogNamedIntFilter),
        LogNamedStringFilter(LogNamedStringFilter),
        LogNamedUintFilter(LogNamedUintFilter),
        LogStringFilter(LogStringFilter),
        LogUintFilter(LogUintFilter),
        LogsFilter(LogsFilter),
    }
    impl ethers::contract::EthLogDecode for AllKnowingOracleTestEvents {
        fn decode_log(log: &ethers::core::abi::RawLog) -> Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = BondPctChangedFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::BondPctChangedFilter(decoded));
            }
            if let Ok(decoded) = NewRequestFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::NewRequestFilter(decoded));
            }
            if let Ok(decoded) = RequestSettledFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::RequestSettledFilter(decoded));
            }
            if let Ok(decoded) = SettlerWhitelistedFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::SettlerWhitelistedFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = TokenWhitelistedFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::TokenWhitelistedFilter(decoded));
            }
            if let Ok(decoded) = WarningDeprecatedFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::WarningDeprecatedFilter(decoded));
            }
            if let Ok(decoded) = LogFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::LogFilter(decoded));
            }
            if let Ok(decoded) = LogAddressFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::LogAddressFilter(decoded));
            }
            if let Ok(decoded) = LogBytesFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::LogBytesFilter(decoded));
            }
            if let Ok(decoded) = LogBytes32Filter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::LogBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogIntFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::LogIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedAddressFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::LogNamedAddressFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytesFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::LogNamedBytesFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytes32Filter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::LogNamedBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalIntFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::LogNamedDecimalIntFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = LogNamedDecimalUintFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::LogNamedDecimalUintFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = LogNamedIntFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::LogNamedIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedStringFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::LogNamedStringFilter(decoded));
            }
            if let Ok(decoded) = LogNamedUintFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::LogNamedUintFilter(decoded));
            }
            if let Ok(decoded) = LogStringFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::LogStringFilter(decoded));
            }
            if let Ok(decoded) = LogUintFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::LogUintFilter(decoded));
            }
            if let Ok(decoded) = LogsFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::LogsFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for AllKnowingOracleTestEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                AllKnowingOracleTestEvents::BondPctChangedFilter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::NewRequestFilter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::RequestSettledFilter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::SettlerWhitelistedFilter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::TokenWhitelistedFilter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::WarningDeprecatedFilter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::LogFilter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::LogAddressFilter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::LogBytesFilter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::LogBytes32Filter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::LogIntFilter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::LogNamedAddressFilter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::LogNamedBytesFilter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::LogNamedBytes32Filter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::LogNamedDecimalIntFilter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::LogNamedDecimalUintFilter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::LogNamedIntFilter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::LogNamedStringFilter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::LogNamedUintFilter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::LogStringFilter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::LogUintFilter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::LogsFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `IS_TEST` function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "IS_TEST", abi = "IS_TEST()")]
    pub struct IsTestCall;
    #[doc = "Container type for all input parameters for the `bound` function with signature `bound(uint256,uint256,uint256)` and selector `[90, 108, 30, 237]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "bound", abi = "bound(uint256,uint256,uint256)")]
    pub struct BoundCall {
        pub x: ethers::core::types::U256,
        pub min: ethers::core::types::U256,
        pub max: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `deal` function with signature `deal(address,address,uint256)` and selector `[107, 206, 152, 155]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deal", abi = "deal(address,address,uint256)")]
    pub struct DealWithTokenCall {
        pub token: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `deal` function with signature `deal(address,address,uint256,bool)` and selector `[151, 117, 74, 233]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deal", abi = "deal(address,address,uint256,bool)")]
    pub struct DealWithTokenAndAdjustCall {
        pub token: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
        pub adjust: bool,
    }
    #[doc = "Container type for all input parameters for the `deal` function with signature `deal(address,uint256)` and selector `[200, 138, 94, 109]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deal", abi = "deal(address,uint256)")]
    pub struct DealCall {
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `deployCode` function with signature `deployCode(string,bytes)` and selector `[41, 206, 157, 222]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deployCode", abi = "deployCode(string,bytes)")]
    pub struct DeployCodeWithArgsCall {
        pub what: String,
        pub args: ethers::core::types::Bytes,
    }
    #[doc = "Container type for all input parameters for the `deployCode` function with signature `deployCode(string)` and selector `[154, 131, 37, 160]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deployCode", abi = "deployCode(string)")]
    pub struct DeployCodeCall {
        pub what: String,
    }
    #[doc = "Container type for all input parameters for the `failed` function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "failed", abi = "failed()")]
    pub struct FailedCall;
    #[doc = "Container type for all input parameters for the `hoax` function with signature `hoax(address)` and selector `[35, 50, 64, 238]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address)")]
    pub struct Hoax0Call {
        pub who: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `hoax` function with signature `hoax(address,address)` and selector `[41, 169, 227, 0]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address,address)")]
    pub struct Hoax1Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `hoax` function with signature `hoax(address,address,uint256)` and selector `[175, 155, 190, 95]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address,address,uint256)")]
    pub struct Hoax3Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `hoax` function with signature `hoax(address,uint256)` and selector `[233, 167, 154, 123]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address,uint256)")]
    pub struct Hoax2Call {
        pub who: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `rewind` function with signature `rewind(uint256)` and selector `[45, 108, 23, 163]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "rewind", abi = "rewind(uint256)")]
    pub struct RewindCall {
        pub time: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `setUp` function with signature `setUp()` and selector `[10, 146, 84, 228]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "setUp", abi = "setUp()")]
    pub struct SetUpCall;
    #[doc = "Container type for all input parameters for the `skip` function with signature `skip(uint256)` and selector `[185, 192, 113, 180]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "skip", abi = "skip(uint256)")]
    pub struct SkipCall {
        pub time: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `startHoax` function with signature `startHoax(address,uint256)` and selector `[16, 133, 84, 242]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address,uint256)")]
    pub struct StartHoax1Call {
        pub who: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `startHoax` function with signature `startHoax(address,address,uint256)` and selector `[59, 248, 45, 177]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address,address,uint256)")]
    pub struct StartHoax3Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `startHoax` function with signature `startHoax(address)` and selector `[111, 89, 112, 117]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address)")]
    pub struct StartHoax0Call {
        pub who: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `startHoax` function with signature `startHoax(address,address)` and selector `[208, 109, 130, 41]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address,address)")]
    pub struct StartHoax2Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `testAsk` function with signature `testAsk(uint256)` and selector `[78, 191, 2, 80]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testAsk", abi = "testAsk(uint256)")]
    pub struct TestAskCall {
        pub stake: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `testAskForOtherProposer` function with signature `testAskForOtherProposer()` and selector `[92, 163, 56, 99]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testAskForOtherProposer", abi = "testAskForOtherProposer()")]
    pub struct TestAskForOtherProposerCall;
    #[doc = "Container type for all input parameters for the `testBondForStake` function with signature `testBondForStake(uint256)` and selector `[209, 205, 246, 172]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testBondForStake", abi = "testBondForStake(uint256)")]
    pub struct TestBondForStakeCall {
        pub s: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `testCannotAskIfNoAllowance` function with signature `testCannotAskIfNoAllowance()` and selector `[255, 12, 237, 23]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotAskIfNoAllowance",
        abi = "testCannotAskIfNoAllowance()"
    )]
    pub struct TestCannotAskIfNoAllowanceCall;
    #[doc = "Container type for all input parameters for the `testCannotAskWithInsufficientBalanceForBond` function with signature `testCannotAskWithInsufficientBalanceForBond()` and selector `[144, 130, 230, 240]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotAskWithInsufficientBalanceForBond",
        abi = "testCannotAskWithInsufficientBalanceForBond()"
    )]
    pub struct TestCannotAskWithInsufficientBalanceForBondCall;
    #[doc = "Container type for all input parameters for the `testCannotAskWithNonWhitelistedToken` function with signature `testCannotAskWithNonWhitelistedToken(address)` and selector `[250, 216, 148, 147]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotAskWithNonWhitelistedToken",
        abi = "testCannotAskWithNonWhitelistedToken(address)"
    )]
    pub struct TestCannotAskWithNonWhitelistedTokenCall {
        pub bond_token: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `testCannotSettleAsIfNotSettler` function with signature `testCannotSettleAsIfNotSettler()` and selector `[47, 179, 142, 126]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotSettleAsIfNotSettler",
        abi = "testCannotSettleAsIfNotSettler()"
    )]
    pub struct TestCannotSettleAsIfNotSettlerCall;
    #[doc = "Container type for all input parameters for the `testCannotSettleIfAlreadySettled` function with signature `testCannotSettleIfAlreadySettled()` and selector `[114, 124, 176, 67]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotSettleIfAlreadySettled",
        abi = "testCannotSettleIfAlreadySettled()"
    )]
    pub struct TestCannotSettleIfAlreadySettledCall;
    #[doc = "Container type for all input parameters for the `testSettle` function with signature `testSettle(bool,uint256)` and selector `[135, 40, 156, 166]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testSettle", abi = "testSettle(bool,uint256)")]
    pub struct TestSettleCall {
        pub answer: bool,
        pub stake: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `tip` function with signature `tip(address,address,uint256)` and selector `[216, 37, 85, 241]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "tip", abi = "tip(address,address,uint256)")]
    pub struct TipCall {
        pub token: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `vm` function with signature `vm()` and selector `[58, 118, 132, 99]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "vm", abi = "vm()")]
    pub struct VmCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum AllKnowingOracleTestCalls {
        IsTest(IsTestCall),
        Bound(BoundCall),
        DealWithToken(DealWithTokenCall),
        DealWithTokenAndAdjust(DealWithTokenAndAdjustCall),
        Deal(DealCall),
        DeployCodeWithArgs(DeployCodeWithArgsCall),
        DeployCode(DeployCodeCall),
        Failed(FailedCall),
        Hoax0(Hoax0Call),
        Hoax1(Hoax1Call),
        Hoax3(Hoax3Call),
        Hoax2(Hoax2Call),
        Rewind(RewindCall),
        SetUp(SetUpCall),
        Skip(SkipCall),
        StartHoax1(StartHoax1Call),
        StartHoax3(StartHoax3Call),
        StartHoax0(StartHoax0Call),
        StartHoax2(StartHoax2Call),
        TestAsk(TestAskCall),
        TestAskForOtherProposer(TestAskForOtherProposerCall),
        TestBondForStake(TestBondForStakeCall),
        TestCannotAskIfNoAllowance(TestCannotAskIfNoAllowanceCall),
        TestCannotAskWithInsufficientBalanceForBond(
            TestCannotAskWithInsufficientBalanceForBondCall,
        ),
        TestCannotAskWithNonWhitelistedToken(TestCannotAskWithNonWhitelistedTokenCall),
        TestCannotSettleAsIfNotSettler(TestCannotSettleAsIfNotSettlerCall),
        TestCannotSettleIfAlreadySettled(TestCannotSettleIfAlreadySettledCall),
        TestSettle(TestSettleCall),
        Tip(TipCall),
        Vm(VmCall),
    }
    impl ethers::core::abi::AbiDecode for AllKnowingOracleTestCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) = <IsTestCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::IsTest(decoded));
            }
            if let Ok(decoded) = <BoundCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::Bound(decoded));
            }
            if let Ok(decoded) =
                <DealWithTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::DealWithToken(decoded));
            }
            if let Ok(decoded) =
                <DealWithTokenAndAdjustCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::DealWithTokenAndAdjust(decoded));
            }
            if let Ok(decoded) = <DealCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(AllKnowingOracleTestCalls::Deal(decoded));
            }
            if let Ok(decoded) =
                <DeployCodeWithArgsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::DeployCodeWithArgs(decoded));
            }
            if let Ok(decoded) =
                <DeployCodeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::DeployCode(decoded));
            }
            if let Ok(decoded) = <FailedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::Failed(decoded));
            }
            if let Ok(decoded) = <Hoax0Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::Hoax0(decoded));
            }
            if let Ok(decoded) = <Hoax1Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::Hoax1(decoded));
            }
            if let Ok(decoded) = <Hoax3Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::Hoax3(decoded));
            }
            if let Ok(decoded) = <Hoax2Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::Hoax2(decoded));
            }
            if let Ok(decoded) = <RewindCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::Rewind(decoded));
            }
            if let Ok(decoded) = <SetUpCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::SetUp(decoded));
            }
            if let Ok(decoded) = <SkipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(AllKnowingOracleTestCalls::Skip(decoded));
            }
            if let Ok(decoded) =
                <StartHoax1Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::StartHoax1(decoded));
            }
            if let Ok(decoded) =
                <StartHoax3Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::StartHoax3(decoded));
            }
            if let Ok(decoded) =
                <StartHoax0Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::StartHoax0(decoded));
            }
            if let Ok(decoded) =
                <StartHoax2Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::StartHoax2(decoded));
            }
            if let Ok(decoded) =
                <TestAskCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::TestAsk(decoded));
            }
            if let Ok(decoded) =
                <TestAskForOtherProposerCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::TestAskForOtherProposer(decoded));
            }
            if let Ok(decoded) =
                <TestBondForStakeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::TestBondForStake(decoded));
            }
            if let Ok(decoded) =
                <TestCannotAskIfNoAllowanceCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(AllKnowingOracleTestCalls::TestCannotAskIfNoAllowance(
                    decoded,
                ));
            }
            if let Ok (decoded) = < TestCannotAskWithInsufficientBalanceForBondCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (AllKnowingOracleTestCalls :: TestCannotAskWithInsufficientBalanceForBond (decoded)) }
            if let Ok(decoded) =
                <TestCannotAskWithNonWhitelistedTokenCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(AllKnowingOracleTestCalls::TestCannotAskWithNonWhitelistedToken(decoded));
            }
            if let Ok(decoded) =
                <TestCannotSettleAsIfNotSettlerCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(AllKnowingOracleTestCalls::TestCannotSettleAsIfNotSettler(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <TestCannotSettleIfAlreadySettledCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(AllKnowingOracleTestCalls::TestCannotSettleIfAlreadySettled(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <TestSettleCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::TestSettle(decoded));
            }
            if let Ok(decoded) = <TipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(AllKnowingOracleTestCalls::Tip(decoded));
            }
            if let Ok(decoded) = <VmCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(AllKnowingOracleTestCalls::Vm(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for AllKnowingOracleTestCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                AllKnowingOracleTestCalls::IsTest(element) => element.encode(),
                AllKnowingOracleTestCalls::Bound(element) => element.encode(),
                AllKnowingOracleTestCalls::DealWithToken(element) => element.encode(),
                AllKnowingOracleTestCalls::DealWithTokenAndAdjust(element) => element.encode(),
                AllKnowingOracleTestCalls::Deal(element) => element.encode(),
                AllKnowingOracleTestCalls::DeployCodeWithArgs(element) => element.encode(),
                AllKnowingOracleTestCalls::DeployCode(element) => element.encode(),
                AllKnowingOracleTestCalls::Failed(element) => element.encode(),
                AllKnowingOracleTestCalls::Hoax0(element) => element.encode(),
                AllKnowingOracleTestCalls::Hoax1(element) => element.encode(),
                AllKnowingOracleTestCalls::Hoax3(element) => element.encode(),
                AllKnowingOracleTestCalls::Hoax2(element) => element.encode(),
                AllKnowingOracleTestCalls::Rewind(element) => element.encode(),
                AllKnowingOracleTestCalls::SetUp(element) => element.encode(),
                AllKnowingOracleTestCalls::Skip(element) => element.encode(),
                AllKnowingOracleTestCalls::StartHoax1(element) => element.encode(),
                AllKnowingOracleTestCalls::StartHoax3(element) => element.encode(),
                AllKnowingOracleTestCalls::StartHoax0(element) => element.encode(),
                AllKnowingOracleTestCalls::StartHoax2(element) => element.encode(),
                AllKnowingOracleTestCalls::TestAsk(element) => element.encode(),
                AllKnowingOracleTestCalls::TestAskForOtherProposer(element) => element.encode(),
                AllKnowingOracleTestCalls::TestBondForStake(element) => element.encode(),
                AllKnowingOracleTestCalls::TestCannotAskIfNoAllowance(element) => element.encode(),
                AllKnowingOracleTestCalls::TestCannotAskWithInsufficientBalanceForBond(element) => {
                    element.encode()
                }
                AllKnowingOracleTestCalls::TestCannotAskWithNonWhitelistedToken(element) => {
                    element.encode()
                }
                AllKnowingOracleTestCalls::TestCannotSettleAsIfNotSettler(element) => {
                    element.encode()
                }
                AllKnowingOracleTestCalls::TestCannotSettleIfAlreadySettled(element) => {
                    element.encode()
                }
                AllKnowingOracleTestCalls::TestSettle(element) => element.encode(),
                AllKnowingOracleTestCalls::Tip(element) => element.encode(),
                AllKnowingOracleTestCalls::Vm(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for AllKnowingOracleTestCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                AllKnowingOracleTestCalls::IsTest(element) => element.fmt(f),
                AllKnowingOracleTestCalls::Bound(element) => element.fmt(f),
                AllKnowingOracleTestCalls::DealWithToken(element) => element.fmt(f),
                AllKnowingOracleTestCalls::DealWithTokenAndAdjust(element) => element.fmt(f),
                AllKnowingOracleTestCalls::Deal(element) => element.fmt(f),
                AllKnowingOracleTestCalls::DeployCodeWithArgs(element) => element.fmt(f),
                AllKnowingOracleTestCalls::DeployCode(element) => element.fmt(f),
                AllKnowingOracleTestCalls::Failed(element) => element.fmt(f),
                AllKnowingOracleTestCalls::Hoax0(element) => element.fmt(f),
                AllKnowingOracleTestCalls::Hoax1(element) => element.fmt(f),
                AllKnowingOracleTestCalls::Hoax3(element) => element.fmt(f),
                AllKnowingOracleTestCalls::Hoax2(element) => element.fmt(f),
                AllKnowingOracleTestCalls::Rewind(element) => element.fmt(f),
                AllKnowingOracleTestCalls::SetUp(element) => element.fmt(f),
                AllKnowingOracleTestCalls::Skip(element) => element.fmt(f),
                AllKnowingOracleTestCalls::StartHoax1(element) => element.fmt(f),
                AllKnowingOracleTestCalls::StartHoax3(element) => element.fmt(f),
                AllKnowingOracleTestCalls::StartHoax0(element) => element.fmt(f),
                AllKnowingOracleTestCalls::StartHoax2(element) => element.fmt(f),
                AllKnowingOracleTestCalls::TestAsk(element) => element.fmt(f),
                AllKnowingOracleTestCalls::TestAskForOtherProposer(element) => element.fmt(f),
                AllKnowingOracleTestCalls::TestBondForStake(element) => element.fmt(f),
                AllKnowingOracleTestCalls::TestCannotAskIfNoAllowance(element) => element.fmt(f),
                AllKnowingOracleTestCalls::TestCannotAskWithInsufficientBalanceForBond(element) => {
                    element.fmt(f)
                }
                AllKnowingOracleTestCalls::TestCannotAskWithNonWhitelistedToken(element) => {
                    element.fmt(f)
                }
                AllKnowingOracleTestCalls::TestCannotSettleAsIfNotSettler(element) => {
                    element.fmt(f)
                }
                AllKnowingOracleTestCalls::TestCannotSettleIfAlreadySettled(element) => {
                    element.fmt(f)
                }
                AllKnowingOracleTestCalls::TestSettle(element) => element.fmt(f),
                AllKnowingOracleTestCalls::Tip(element) => element.fmt(f),
                AllKnowingOracleTestCalls::Vm(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<IsTestCall> for AllKnowingOracleTestCalls {
        fn from(var: IsTestCall) -> Self {
            AllKnowingOracleTestCalls::IsTest(var)
        }
    }
    impl ::std::convert::From<BoundCall> for AllKnowingOracleTestCalls {
        fn from(var: BoundCall) -> Self {
            AllKnowingOracleTestCalls::Bound(var)
        }
    }
    impl ::std::convert::From<DealWithTokenCall> for AllKnowingOracleTestCalls {
        fn from(var: DealWithTokenCall) -> Self {
            AllKnowingOracleTestCalls::DealWithToken(var)
        }
    }
    impl ::std::convert::From<DealWithTokenAndAdjustCall> for AllKnowingOracleTestCalls {
        fn from(var: DealWithTokenAndAdjustCall) -> Self {
            AllKnowingOracleTestCalls::DealWithTokenAndAdjust(var)
        }
    }
    impl ::std::convert::From<DealCall> for AllKnowingOracleTestCalls {
        fn from(var: DealCall) -> Self {
            AllKnowingOracleTestCalls::Deal(var)
        }
    }
    impl ::std::convert::From<DeployCodeWithArgsCall> for AllKnowingOracleTestCalls {
        fn from(var: DeployCodeWithArgsCall) -> Self {
            AllKnowingOracleTestCalls::DeployCodeWithArgs(var)
        }
    }
    impl ::std::convert::From<DeployCodeCall> for AllKnowingOracleTestCalls {
        fn from(var: DeployCodeCall) -> Self {
            AllKnowingOracleTestCalls::DeployCode(var)
        }
    }
    impl ::std::convert::From<FailedCall> for AllKnowingOracleTestCalls {
        fn from(var: FailedCall) -> Self {
            AllKnowingOracleTestCalls::Failed(var)
        }
    }
    impl ::std::convert::From<Hoax0Call> for AllKnowingOracleTestCalls {
        fn from(var: Hoax0Call) -> Self {
            AllKnowingOracleTestCalls::Hoax0(var)
        }
    }
    impl ::std::convert::From<Hoax1Call> for AllKnowingOracleTestCalls {
        fn from(var: Hoax1Call) -> Self {
            AllKnowingOracleTestCalls::Hoax1(var)
        }
    }
    impl ::std::convert::From<Hoax3Call> for AllKnowingOracleTestCalls {
        fn from(var: Hoax3Call) -> Self {
            AllKnowingOracleTestCalls::Hoax3(var)
        }
    }
    impl ::std::convert::From<Hoax2Call> for AllKnowingOracleTestCalls {
        fn from(var: Hoax2Call) -> Self {
            AllKnowingOracleTestCalls::Hoax2(var)
        }
    }
    impl ::std::convert::From<RewindCall> for AllKnowingOracleTestCalls {
        fn from(var: RewindCall) -> Self {
            AllKnowingOracleTestCalls::Rewind(var)
        }
    }
    impl ::std::convert::From<SetUpCall> for AllKnowingOracleTestCalls {
        fn from(var: SetUpCall) -> Self {
            AllKnowingOracleTestCalls::SetUp(var)
        }
    }
    impl ::std::convert::From<SkipCall> for AllKnowingOracleTestCalls {
        fn from(var: SkipCall) -> Self {
            AllKnowingOracleTestCalls::Skip(var)
        }
    }
    impl ::std::convert::From<StartHoax1Call> for AllKnowingOracleTestCalls {
        fn from(var: StartHoax1Call) -> Self {
            AllKnowingOracleTestCalls::StartHoax1(var)
        }
    }
    impl ::std::convert::From<StartHoax3Call> for AllKnowingOracleTestCalls {
        fn from(var: StartHoax3Call) -> Self {
            AllKnowingOracleTestCalls::StartHoax3(var)
        }
    }
    impl ::std::convert::From<StartHoax0Call> for AllKnowingOracleTestCalls {
        fn from(var: StartHoax0Call) -> Self {
            AllKnowingOracleTestCalls::StartHoax0(var)
        }
    }
    impl ::std::convert::From<StartHoax2Call> for AllKnowingOracleTestCalls {
        fn from(var: StartHoax2Call) -> Self {
            AllKnowingOracleTestCalls::StartHoax2(var)
        }
    }
    impl ::std::convert::From<TestAskCall> for AllKnowingOracleTestCalls {
        fn from(var: TestAskCall) -> Self {
            AllKnowingOracleTestCalls::TestAsk(var)
        }
    }
    impl ::std::convert::From<TestAskForOtherProposerCall> for AllKnowingOracleTestCalls {
        fn from(var: TestAskForOtherProposerCall) -> Self {
            AllKnowingOracleTestCalls::TestAskForOtherProposer(var)
        }
    }
    impl ::std::convert::From<TestBondForStakeCall> for AllKnowingOracleTestCalls {
        fn from(var: TestBondForStakeCall) -> Self {
            AllKnowingOracleTestCalls::TestBondForStake(var)
        }
    }
    impl ::std::convert::From<TestCannotAskIfNoAllowanceCall> for AllKnowingOracleTestCalls {
        fn from(var: TestCannotAskIfNoAllowanceCall) -> Self {
            AllKnowingOracleTestCalls::TestCannotAskIfNoAllowance(var)
        }
    }
    impl ::std::convert::From<TestCannotAskWithInsufficientBalanceForBondCall>
        for AllKnowingOracleTestCalls
    {
        fn from(var: TestCannotAskWithInsufficientBalanceForBondCall) -> Self {
            AllKnowingOracleTestCalls::TestCannotAskWithInsufficientBalanceForBond(var)
        }
    }
    impl ::std::convert::From<TestCannotAskWithNonWhitelistedTokenCall> for AllKnowingOracleTestCalls {
        fn from(var: TestCannotAskWithNonWhitelistedTokenCall) -> Self {
            AllKnowingOracleTestCalls::TestCannotAskWithNonWhitelistedToken(var)
        }
    }
    impl ::std::convert::From<TestCannotSettleAsIfNotSettlerCall> for AllKnowingOracleTestCalls {
        fn from(var: TestCannotSettleAsIfNotSettlerCall) -> Self {
            AllKnowingOracleTestCalls::TestCannotSettleAsIfNotSettler(var)
        }
    }
    impl ::std::convert::From<TestCannotSettleIfAlreadySettledCall> for AllKnowingOracleTestCalls {
        fn from(var: TestCannotSettleIfAlreadySettledCall) -> Self {
            AllKnowingOracleTestCalls::TestCannotSettleIfAlreadySettled(var)
        }
    }
    impl ::std::convert::From<TestSettleCall> for AllKnowingOracleTestCalls {
        fn from(var: TestSettleCall) -> Self {
            AllKnowingOracleTestCalls::TestSettle(var)
        }
    }
    impl ::std::convert::From<TipCall> for AllKnowingOracleTestCalls {
        fn from(var: TipCall) -> Self {
            AllKnowingOracleTestCalls::Tip(var)
        }
    }
    impl ::std::convert::From<VmCall> for AllKnowingOracleTestCalls {
        fn from(var: VmCall) -> Self {
            AllKnowingOracleTestCalls::Vm(var)
        }
    }
    #[doc = "Container type for all return fields from the `IS_TEST` function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct IsTestReturn(pub bool);
    #[doc = "Container type for all return fields from the `bound` function with signature `bound(uint256,uint256,uint256)` and selector `[90, 108, 30, 237]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct BoundReturn {
        pub result: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `deployCode` function with signature `deployCode(string,bytes)` and selector `[41, 206, 157, 222]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct DeployCodeWithArgsReturn {
        pub addr: ethers::core::types::Address,
    }
    #[doc = "Container type for all return fields from the `deployCode` function with signature `deployCode(string)` and selector `[154, 131, 37, 160]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct DeployCodeReturn {
        pub addr: ethers::core::types::Address,
    }
    #[doc = "Container type for all return fields from the `failed` function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct FailedReturn(pub bool);
    #[doc = "Container type for all return fields from the `vm` function with signature `vm()` and selector `[58, 118, 132, 99]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct VmReturn(pub ethers::core::types::Address);
}
