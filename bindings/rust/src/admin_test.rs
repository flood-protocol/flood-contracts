pub use admintest_mod::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod admintest_mod {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "AdminTest was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static ADMINTEST_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxFeePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"MaxFeePctChanged\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSafeBlockThreshold\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"SafeBlockThresholdChanged\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TokenWhitelisted\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"disputeId\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"filledAmount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TradeDisputed\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"filledAtBlock\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TradeFilled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"TradeRequested\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"filledAmount\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TradeSettled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"newFeePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"UpdatedFeeForTrade\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"msg\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"WARNING_Deprecated\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"logs\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"bound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deal\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"adjust\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deal\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deal\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"what\",\"type\":\"string\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deployCode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"what\",\"type\":\"string\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deployCode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"rewind\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setUp\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"skip\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newFee\",\"type\":\"uint128\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testMaxFeePctChange\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testThresholdChange\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testTokenWhitelist\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"tip\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"vm\",\"outputs\":[{\"internalType\":\"contract Vm\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static ADMINTEST_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x608060408190526000805460ff191660011790556001625e79b760e01b031990527f81376b9868b292a46a1c486d344e427a3088657fda629b5f4a647822d329cd6a608452737109709ecfa91a80626ff3989d68f67f5b1dd12d63ffa1864960a46020604051808303816000875af115801562000080573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000a691906200059c565b600880546001600160a01b0319166001600160a01b03929092169190911790556040516001625e79b760e01b031981527f28cac318a86c8a0a6a9156c2dba2c8c2363677ba0514ef616592d81557e679b66004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa18649906024016020604051808303816000875af11580156200013b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200016191906200059c565b600980546001600160a01b0319166001600160a01b03929092169190911790556040516001625e79b760e01b031981527f9791f723bf26b668c8cac0664b66d058cdb2a424cfb08c05dd9da570be0eff6f6004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa18649906024016020604051808303816000875af1158015620001f6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200021c91906200059c565b600a60006101000a8154816001600160a01b0302191690836001600160a01b03160217905550620002bb73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486040518060400160405280601a81526020017f546f6b656e466978747572652e736f6c3a4d6f636b546f6b656e0000000000008152506006604051602001620002a59190620005c7565b60408051601f19818403018152919052620003c5565b600b60006101000a8154816001600160a01b0302191690836001600160a01b031602179055506200038c73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26040518060400160405280601a81526020017f546f6b656e466978747572652e736f6c3a4d6f636b546f6b656e0000000000008152506012604051602001620002a591906060808252600d908201526c2bb930b83832b21022ba3432b960991b608082015260a060208201819052600490820152630ae8aa8960e31b60c082015260ff91909116604082015260e00190565b600c80546001600160a01b0319166001600160a01b03929092169190911790556064600f55348015620003be57600080fd5b50620007a4565b60006001600160a01b0384163b8015620003e3578491505062000461565b6000620003f1858562000468565b9050806001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000432573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200045c9190810190620006e7565b509150505b9392505050565b604051638d1cc92560e01b81526000908190737109709ecfa91a80626ff3989d68f67f5b1dd12d90638d1cc92590620004a69087906004016200073c565b6000604051808303816000875af1158015620004c6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620004f09190810190620006e7565b836040516020016200050492919062000771565b60405160208183030381529060405290508051602082016000f091506001600160a01b038216620005955760405162461bcd60e51b815260206004820152603160248201527f54657374206465706c6f79436f646528737472696e672c6279746573293a204460448201527032b83637bcb6b2b73a103330b4b632b21760791b606482015260840160405180910390fd5b5092915050565b600060208284031215620005af57600080fd5b81516001600160a01b03811681146200046157600080fd5b606081526000620005ec6060830160048152635553444360e01b602082015260400190565b8281036020840152620006108160048152635553444360e01b602082015260400190565b91505060ff8316604083015292915050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620006555781810151838201526020016200063b565b8381111562000665576000848401525b50505050565b60006001600160401b038084111562000688576200068862000622565b604051601f8501601f19908116603f01168101908282118183101715620006b357620006b362000622565b81604052809350858152868686011115620006cd57600080fd5b620006dd86602083018762000638565b5050509392505050565b600060208284031215620006fa57600080fd5b81516001600160401b038111156200071157600080fd5b8201601f810184136200072357600080fd5b62000734848251602084016200066b565b949350505050565b60208152600082518060208401526200075d81604085016020870162000638565b601f01601f19169190910160400192915050565b600083516200078581846020880162000638565b8351908301906200079b81836020880162000638565b01949350505050565b616da680620007b46000396000f3fe60806040523480156200001157600080fd5b5060043610620001755760003560e01c80636bce989b11620000d3578063ba414fa61162000086578063ba414fa61462000339578063c88a5e6d1462000354578063d06d8229146200036b578063d82555f11462000382578063e9a79a7b1462000399578063fa7626d414620003b057600080fd5b80636bce989b14620002af5780636f59707514620002c657806397754ae914620002dd5780639a8325a014620002f4578063af9bbe5f146200030b578063b9c071b4146200032257600080fd5b80632d6c17a3116200012c5780632d6c17a3146200021657806335605851146200022d5780633a76846314620002445780633bf82db1146200025b5780635a6c1eed14620002725780635b657cca146200029857600080fd5b80630a9254e4146200017a578063108554f214620001865780631e388b93146200019d578063233240ee14620001b457806329a9e30014620001cb57806329ce9dde14620001e2575b600080fd5b62000184620003be565b005b620001846200019736600462003d21565b620004be565b62000184620001ae36600462003d5d565b62000597565b62000184620001c536600462003d99565b6200092d565b62000184620001dc36600462003dbe565b62000a09565b620001f9620001f336600462003ed1565b62000abb565b6040516001600160a01b0390911681526020015b60405180910390f35b620001846200022736600462003f51565b62000beb565b620001846200023e36600462003f51565b62000c2b565b620001f960008051602062006d1183398151915281565b620001846200026c36600462003f6b565b62000f16565b620002896200028336600462003fac565b62000ff8565b6040519081526020016200020d565b62000184620002a936600462003fd9565b62001131565b62000184620002c036600462003f6b565b620014f2565b62000184620002d736600462003d99565b62001506565b62000184620002ee36600462004004565b620015b0565b620001f9620003053660046200405a565b620017ab565b620001846200031c36600462003f6b565b620018ad565b620001846200033336600462003f51565b6200195b565b620003436200197c565b60405190151581526020016200020d565b620001846200036536600462003d21565b62001aad565b620001846200037c36600462003dbe565b62001ae3565b620001846200039336600462003f6b565b62001b95565b62000184620003aa36600462003d21565b62001c46565b600054620003439060ff1681565b620003c862001cec565b600f54600d546040516001600160a01b0390911690620003e89062003cb8565b9182526001600160a01b03166020820152604001604051809103906000f08015801562000419573d6000803e3d6000fd5b50600e80546001600160a01b0319166001600160a01b03929092169182179055604080516318caf8e360e31b81526004808201939093526024810191909152604481019190915263426f6f6b60e01b606482015260008051602062006d118339815191529063c657c718906084015b600060405180830381600087803b158015620004a357600080fd5b505af1158015620004b8573d6000803e3d6000fd5b50505050565b60405163c88a5e6d60e01b815260008051602062006d118339815191529063c88a5e6d90620004f490859085906004016200409b565b600060405180830381600087803b1580156200050f57600080fd5b505af115801562000524573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b038516600482015260008051602062006d1183398151915292506306447d5691506024015b600060405180830381600087803b1580156200057a57600080fd5b505af11580156200058f573d6000803e3d6000fd5b505050505050565b600e546000906200061a9062000614908590620005eb90630daf9c2160e41b90620005ce906001906001600160a01b03166200227e565b9060038201805463ffffffff191660e09290921c91909117905590565b90600282018054600181018255600091825260209091206001600160a01b039290921691015590565b620022a3565b90506200062781620022cb565b604080518082018252600c81526b15539055551213d49256915160a21b6020820152905163f28dceb360e01b815260008051602062006d118339815191529163f28dceb3916200067b919060040162004111565b600060405180830381600087803b1580156200069657600080fd5b505af1158015620006ab573d6000803e3d6000fd5b505060085460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062006d11833981519152925063ca669fa79150602401600060405180830381600087803b1580156200070457600080fd5b505af115801562000719573d6000803e3d6000fd5b5050600e54604051630ffb1d8b60e01b81526001600160a01b03878116600483015286151560248301529091169250630ffb1d8b9150604401600060405180830381600087803b1580156200076d57600080fd5b505af115801562000782573d6000803e3d6000fd5b5050600e546040516381bad6f360e01b815260008051602062006d1183398151915293506381bad6f39250620007cf91600191600091829184916001600160a01b03169060040162004126565b600060405180830381600087803b158015620007ea57600080fd5b505af1158015620007ff573d6000803e3d6000fd5b50505050826001600160a01b03167fef81a9943b96c8df4ef243401c9bf5159146166211356898b52d382086168d928360405162000841911515815260200190565b60405180910390a2600e54604051630ffb1d8b60e01b81526001600160a01b038581166004830152841515602483015290911690630ffb1d8b90604401600060405180830381600087803b1580156200089957600080fd5b505af1158015620008ae573d6000803e3d6000fd5b5050600e5460009250620008e9915062000614908690620005eb90630daf9c2160e41b90620005ce906001906001600160a01b03166200227e565b9050620004b881846040518060400160405280601b81526020017f546f6b656e2073686f756c642062652077686974656c69737465640000000000815250620022da565b60405163c88a5e6d60e01b815260008051602062006d118339815191529063c88a5e6d9062000967908490600160801b906004016200409b565b600060405180830381600087803b1580156200098257600080fd5b505af115801562000997573d6000803e3d6000fd5b505060405163ca669fa760e01b81526001600160a01b038416600482015260008051602062006d11833981519152925063ca669fa791506024015b600060405180830381600087803b158015620009ed57600080fd5b505af115801562000a02573d6000803e3d6000fd5b5050505050565b60405163c88a5e6d60e01b815260008051602062006d118339815191529063c88a5e6d9062000a43908590600160801b906004016200409b565b600060405180830381600087803b15801562000a5e57600080fd5b505af115801562000a73573d6000803e3d6000fd5b50506040516323f2866760e11b81526001600160a01b0380861660048301528416602482015260008051602062006d1183398151915292506347e50cce91506044016200055f565b604051638d1cc92560e01b8152600090819060008051602062006d1183398151915290638d1cc9259062000af490879060040162004111565b6000604051808303816000875af115801562000b14573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000b3e919081019062004156565b8360405160200162000b52929190620041d6565b60405160208183030381529060405290508051602082016000f091506001600160a01b03821662000be45760405162461bcd60e51b815260206004820152603160248201527f54657374206465706c6f79436f646528737472696e672c6279746573293a204460448201527032b83637bcb6b2b73a103330b4b632b21760791b60648201526084015b60405180910390fd5b5092915050565b60008051602062006d1183398151915263e5d6bf0262000c0c83426200421f565b6040518263ffffffff1660e01b8152600401620009d291815260200190565b604080518082018252600c81526b15539055551213d49256915160a21b6020820152905163f28dceb360e01b815260008051602062006d118339815191529163f28dceb39162000c7f919060040162004111565b600060405180830381600087803b15801562000c9a57600080fd5b505af115801562000caf573d6000803e3d6000fd5b505060085460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062006d11833981519152925063ca669fa79150602401600060405180830381600087803b15801562000d0857600080fd5b505af115801562000d1d573d6000803e3d6000fd5b5050600e54604051632613f30760e01b8152600481018590526001600160a01b039091169250632613f3079150602401600060405180830381600087803b15801562000d6857600080fd5b505af115801562000d7d573d6000803e3d6000fd5b5050600e546040516381bad6f360e01b815260008051602062006d1183398151915293506381bad6f3925062000dca91600191600091829184916001600160a01b03169060040162004126565b600060405180830381600087803b15801562000de557600080fd5b505af115801562000dfa573d6000803e3d6000fd5b505050507fcf29a5174acb8c175d760a7381ffc52c6ae644e3a4ba3fa7e01344f959cd76158160405162000e3091815260200190565b60405180910390a1600e54604051632613f30760e01b8152600481018390526001600160a01b0390911690632613f30790602401600060405180830381600087803b15801562000e7f57600080fd5b505af115801562000e94573d6000803e3d6000fd5b5050600e546000925062000ece915062000ec8906307f8600760e11b90620005ce906001906001600160a01b03166200227e565b6200231a565b905062000f1281836040518060400160405280601c81526020017f546872656173686f6c642073686f756c642062652075706461746564000000008152506200233c565b5050565b60405163c88a5e6d60e01b815260008051602062006d118339815191529063c88a5e6d9062000f4c90869085906004016200409b565b600060405180830381600087803b15801562000f6757600080fd5b505af115801562000f7c573d6000803e3d6000fd5b50506040516308b6ac0f60e31b81526001600160a01b0380871660048301528516602482015260008051602062006d1183398151915292506345b5607891506044015b600060405180830381600087803b15801562000fda57600080fd5b505af115801562000fef573d6000803e3d6000fd5b50505050505050565b600081831115620010725760405162461bcd60e51b815260206004820152603a60248201527f5465737420626f756e642875696e743235362c75696e743235362c75696e743260448201527f3536293a204d6178206973206c657373207468616e206d696e2e000000000000606482015260840162000bdb565b60006200108084846200421f565b9050806000036200109457839150620010d4565b6000198103620010a757849150620010d4565b620010b28162004239565b90506000620010c2828762004255565b9050620010d0818662004278565b9250505b60408051818152600c818301526b109bdd5b990814995cdd5b1d60a21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1509392505050565b604080518082018252600c81526b15539055551213d49256915160a21b6020820152905163f28dceb360e01b815260008051602062006d118339815191529163f28dceb39162001185919060040162004111565b600060405180830381600087803b158015620011a057600080fd5b505af1158015620011b5573d6000803e3d6000fd5b505060085460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062006d11833981519152925063ca669fa79150602401600060405180830381600087803b1580156200120e57600080fd5b505af115801562001223573d6000803e3d6000fd5b5050600e5460405163bd20a85960e01b81526001600160801b03851660048201526001600160a01b03909116925063bd20a8599150602401600060405180830381600087803b1580156200127657600080fd5b505af11580156200128b573d6000803e3d6000fd5b50505050670de0b6b3a7640000816001600160801b0316106200134a57604051630618f58760e51b8152636a143fdd60e11b600482015260008051602062006d118339815191529063c31eb0e090602401600060405180830381600087803b158015620012f757600080fd5b505af11580156200130c573d6000803e3d6000fd5b5050600e5460405163bd20a85960e01b81526001600160801b03851660048201526001600160a01b03909116925063bd20a8599150602401620009d2565b600e546040516381bad6f360e01b815260008051602062006d11833981519152916381bad6f3916200139391600191600091829184916001600160a01b03169060040162004126565b600060405180830381600087803b158015620013ae57600080fd5b505af1158015620013c3573d6000803e3d6000fd5b50506040516001600160801b03841681527f841095ec206e4a3d8124f54a431661bd653b296066d7d695baaa9178e9d21bb49250602001905060405180910390a1600e5460405163bd20a85960e01b81526001600160801b03831660048201526001600160a01b039091169063bd20a85990602401600060405180830381600087803b1580156200145357600080fd5b505af115801562001468573d6000803e3d6000fd5b5050600e54600092506200149c915062000ec890637e388e1d60e11b90620005ce906001906001600160a01b03166200227e565b905062000f12816001600160801b0316836001600160801b03166040518060400160405280601981526020017f4d6178206665652073686f756c642062652075706461746564000000000000008152506200233c565b620015018383836000620015b0565b505050565b60405163c88a5e6d60e01b815260008051602062006d118339815191529063c88a5e6d9062001540908490600160801b906004016200409b565b600060405180830381600087803b1580156200155b57600080fd5b505af115801562001570573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b038416600482015260008051602062006d1183398151915292506306447d569150602401620009d2565b604080516001600160a01b0385811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166370a0823160e01b1790529151600092871691620016069162004293565b6000604051808303816000865af19150503d806000811462001645576040519150601f19603f3d011682016040523d82523d6000602084013e6200164a565b606091505b50915050600081806020019051810190620016669190620042b1565b905062001692846200168b87620005eb6370a0823160e01b620005ce60018d6200227e565b9062002378565b82156200058f5760408051600481526024810182526020810180516001600160e01b03166318160ddd60e01b17905290516000916001600160a01b03891691620016dd919062004293565b6000604051808303816000865af19150503d80600081146200171c576040519150601f19603f3d011682016040523d82523d6000602084013e62001721565b606091505b509150506000818060200190518101906200173d9190620042b1565b90508286101562001768576200175486846200421f565b6200176090826200421f565b905062001783565b6200177483876200421f565b62001780908262004278565b90505b620017a1816200168b6318160ddd60e01b620005ce60018d6200227e565b5050505050505050565b604051638d1cc92560e01b8152600090819060008051602062006d1183398151915290638d1cc92590620017e490869060040162004111565b6000604051808303816000875af115801562001804573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200182e919081019062004156565b90508051602082016000f091506001600160a01b038216620018a75760405162461bcd60e51b815260206004820152602b60248201527f54657374206465706c6f79436f646528737472696e67293a204465706c6f796d60448201526a32b73a103330b4b632b21760a91b606482015260840162000bdb565b50919050565b60405163c88a5e6d60e01b815260008051602062006d118339815191529063c88a5e6d90620018e390869085906004016200409b565b600060405180830381600087803b158015620018fe57600080fd5b505af115801562001913573d6000803e3d6000fd5b50506040516323f2866760e11b81526001600160a01b0380871660048301528516602482015260008051602062006d1183398151915292506347e50cce915060440162000fbf565b60008051602062006d1183398151915263e5d6bf0262000c0c834262004278565b60008054610100900460ff16156200199d5750600054610100900460ff1690565b600060008051602062006d118339815191523b1562001aa85760405160009060008051602062006d11833981519152907f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc49062001a0a9083906519985a5b195960d21b906020016200409b565b60408051601f198184030181529082905262001a2a9291602001620042cb565b60408051601f198184030181529082905262001a469162004293565b6000604051808303816000865af19150503d806000811462001a85576040519150601f19603f3d011682016040523d82523d6000602084013e62001a8a565b606091505b509150508080602001905181019062001aa49190620042fe565b9150505b919050565b60405163c88a5e6d60e01b815260008051602062006d118339815191529063c88a5e6d906200055f90859085906004016200409b565b60405163c88a5e6d60e01b815260008051602062006d118339815191529063c88a5e6d9062001b1d908590600160801b906004016200409b565b600060405180830381600087803b15801562001b3857600080fd5b505af115801562001b4d573d6000803e3d6000fd5b50506040516308b6ac0f60e31b81526001600160a01b0380861660048301528416602482015260008051602062006d1183398151915292506345b5607891506044016200055f565b7f42b963ace015abb7c727e77dec115c5f418f4f96d9ec897f85c202793274661a60405162001c1b906020808252603b908201527f54686520607469706020737464636865617420686173206265656e206465707260408201527f6563617465642e2055736520606465616c6020696e73746561642e0000000000606082015260800190565b60405180910390a162001501816200168b84620005eb6370a0823160e01b620005ce60018a6200227e565b60405163c88a5e6d60e01b815260008051602062006d118339815191529063c88a5e6d9062001c7c90859085906004016200409b565b600060405180830381600087803b15801562001c9757600080fd5b505af115801562001cac573d6000803e3d6000fd5b505060405163ca669fa760e01b81526001600160a01b038516600482015260008051602062006d11833981519152925063ca669fa791506024016200055f565b62001cf662002384565b60405162001d049062003cc6565b604051809103906000f08015801562001d21573d6000803e3d6000fd5b50600d80546001600160a01b0319166001600160a01b03929092169182179055604080516318caf8e360e31b815260048101929092526024820152601060448201526f416c6c4b6e6f77696e674f7261636c6560801b606482015260008051602062006d118339815191529063c657c71890608401600060405180830381600087803b15801562001db157600080fd5b505af115801562001dc6573d6000803e3d6000fd5b50506008546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062006d1183398151915292506306447d569150602401600060405180830381600087803b15801562001e1f57600080fd5b505af115801562001e34573d6000803e3d6000fd5b5050600b54600d5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b3935062001e739290911690600019906004016200409b565b6020604051808303816000875af115801562001e93573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001eb99190620042fe565b50600c54600d5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39262001ef492911690600019906004016200409b565b6020604051808303816000875af115801562001f14573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001f3a9190620042fe565b50604080516390c5013b60e01b8152905160008051602062006d11833981519152916390c5013b91600480830192600092919082900301818387803b15801562001f8357600080fd5b505af115801562001f98573d6000803e3d6000fd5b50506009546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062006d1183398151915292506306447d569150602401600060405180830381600087803b15801562001ff157600080fd5b505af115801562002006573d6000803e3d6000fd5b5050600b54600d5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b39350620020459290911690600019906004016200409b565b6020604051808303816000875af115801562002065573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200208b9190620042fe565b50600c54600d5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392620020c692911690600019906004016200409b565b6020604051808303816000875af1158015620020e6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200210c9190620042fe565b50604080516390c5013b60e01b8152905160008051602062006d11833981519152916390c5013b91600480830192600092919082900301818387803b1580156200215557600080fd5b505af11580156200216a573d6000803e3d6000fd5b5050600d54600b54604051630ffb1d8b60e01b81526001600160a01b0391821660048201526001602482015291169250630ffb1d8b9150604401600060405180830381600087803b158015620021bf57600080fd5b505af1158015620021d4573d6000803e3d6000fd5b5050600d54600c54604051630ffb1d8b60e01b81526001600160a01b0391821660048201526001602482015291169250630ffb1d8b9150604401600060405180830381600087803b1580156200222957600080fd5b505af11580156200223e573d6000803e3d6000fd5b5050600d54600a5460405163194f29df60e11b81526001600160a01b039182166004820152600160248201529116925063329e53be915060440162000488565b6005820180546001600160a01b0319166001600160a01b039290921691909117905590565b6000620022b0826200256e565b806020019051810190620022c59190620042fe565b92915050565b620022d7811562002636565b50565b81151583151514620015015760008051602062006d31833981519152816040516200230691906200431e565b60405180910390a1620015018383620026ae565b600062002327826200256e565b806020019051810190620022c59190620042b1565b818314620015015760008051602062006d31833981519152816040516200236491906200431e565b60405180910390a162001501838362002815565b62000f128282620028fa565b600854604080516318caf8e360e31b81526001600160a01b03909216600483015260248201526005604482015264416c69636560d81b606482015260008051602062006d118339815191529063c657c71890608401600060405180830381600087803b158015620023f457600080fd5b505af115801562002409573d6000803e3d6000fd5b5050600954604080516318caf8e360e31b81526001600160a01b039092166004830152602482015260036044820152622137b160e91b606482015260008051602062006d11833981519152925063c657c7189150608401600060405180830381600087803b1580156200247b57600080fd5b505af115801562002490573d6000803e3d6000fd5b5050600a54604080516318caf8e360e31b81526001600160a01b03909216600483015260248201526007604482015266436861726c696560c81b606482015260008051602062006d11833981519152925063c657c7189150608401600060405180830381600087803b1580156200250657600080fd5b505af11580156200251b573d6000803e3d6000fd5b5050604080516318caf8e360e31b815230600482015260248101919091526003604482015262596f7560e81b606482015260008051602062006d11833981519152925063c657c718915060840162000488565b60058101546060906001600160a01b031660006200258c8462002cf5565b604051630667f9d760e41b815290915060008051602062006d118339815191529063667f9d7090620025c590859085906004016200409b565b6020604051808303816000875af1158015620025e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200260b9190620042b1565b6040516020016200261e91815260200190565b60405160208183030381529060405292505050919050565b80620022d7577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516200269c9060208082526017908201527f4572726f723a20417373657274696f6e204661696c6564000000000000000000604082015260600190565b60405180910390a1620022d762003a7d565b8015158215151462000f12577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051620027259060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b626f6f6040820152616c5d60f01b606082015260800190565b60405180910390a160008051602062006d318339815191528162002767576040518060400160405280600581526020016466616c736560d81b81525062002785565b604051806040016040528060048152602001637472756560e01b8152505b6040516200279491906200434f565b60405180910390a160008051602062006d3183398151915282620027d6576040518060400160405280600581526020016466616c736560d81b815250620027f4565b604051806040016040528060048152602001637472756560e01b8152505b6040516200280391906200438e565b60405180910390a162000f1262003a7d565b80821462000f12577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051620028889060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a881604051620028c19190620043b9565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a882604051620028039190620043f2565b600582015460038301546004840154600285018054604080516020808402820181019092528281526001600160a01b039096169560e09590951b94600093909290918301828280156200296d57602002820191906000526020600020905b81548152602001906001019080831162002958575b50505050509050600083620029828362003b81565b60405160200162002995929190620042cb565b60408051601f198184030181528282526001600160a01b038816600090815260018b0160209081528382206001600160e01b03198a168352815292812091945090929091620029e99186918891016200441d565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff1662002a245762002a228762002cf5565b505b6001600160a01b0385166000908152602088815260408083206001600160e01b031988168452825280832090519091839162002a659187918991016200441d565b6040516020818303038152906040528051906020012081526020019081526020016000205460001b9050600080876001600160a01b03168460405162002aac919062004293565b600060405180830381855afa9150503d806000811462002ae9576040519150601f19603f3d011682016040523d82523d6000602084013e62002aee565b606091505b50915062002b0b90508162002b0588602062004459565b62003c2e565b604051630667f9d760e41b81529092506000915060008051602062006d118339815191529063667f9d709062002b48908b9087906004016200409b565b6020604051808303816000875af115801562002b68573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002b8e9190620042b1565b905080821462002c445760405162461bcd60e51b815260206004820152606e60248201527f73746453746f726167652066696e642853746453746f72616765293a2050616360448201527f6b656420736c6f742e205468697320776f756c642063617573652064616e676560648201527f726f7573206f76657277726974696e6720616e642063757272656e746c79206960848201526d39b73a1039bab83837b93a32b21760911b60a482015260c40162000bdb565b6040516370ca10bb60e01b815260008051602062006d11833981519152906370ca10bb9062002c7c908b9087908e906004016200447b565b600060405180830381600087803b15801562002c9757600080fd5b505af115801562002cac573d6000803e3d6000fd5b50505060058b0180546001600160a01b03191690555060038a01805463ffffffff1916905562002ce160028b01600062003cd4565b896004016000905550505050505050505050565b600581015460038201546004830154600284018054604080516020808402820181019092528281526000966001600160a01b03169560e01b94938793919290919083018282801562002d6757602002820191906000526020600020905b81548152602001906001019080831162002d52575b5050506001600160a01b038716600090815260018a01602090815260408083206001600160e01b03198a168452825280832090519596509491935062002db3925085918791016200441d565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff161562002e52576001600160a01b0384166000908152602087815260408083206001600160e01b0319871684528252808320905190929162002e229185918791016200441d565b60405160208183030381529060405280519060200120815260200190815260200160002054945050505050919050565b60008362002e608362003b81565b60405160200162002e73929190620042cb565b604051602081830303815290604052905060008051602062006d5183398151915260001c6001600160a01b031663266cf1096040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562002ed257600080fd5b505af115801562002ee7573d6000803e3d6000fd5b50505050600080866001600160a01b03168360405162002f08919062004293565b600060405180830381855afa9150503d806000811462002f45576040519150601f19603f3d011682016040523d82523d6000602084013e62002f4a565b606091505b50915062002f6190508162002b0587602062004459565b6040516365bc948160e01b81526001600160a01b03891660048201529092506000915060008051602062006d11833981519152906365bc9481906024016000604051808303816000875af115801562002fbe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262002fe8919081019062004525565b50905080516001036200334257600060008051602062006d5183398151915260001c6001600160a01b031663667f9d7089846000815181106200302f576200302f62004586565b60200260200101516040518363ffffffff1660e01b8152600401620030569291906200409b565b6020604051808303816000875af115801562003076573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200309c9190620042b1565b90508062003100577f080fc4a96620c4462e705b23f346413fe3796bb63c6f8d8591baec0e231577a58883600081518110620030dc57620030dc62004586565b602002602001015160001c604051620030f79291906200409b565b60405180910390a15b808314620031b35760405162461bcd60e51b815260206004820152606d60248201527f73746453746f726167652066696e642853746453746f72616765293a2050616360448201527f6b656420736c6f742e205468697320776f756c642063617573652064616e676560648201527f726f7573206f76657277726974696e6720616e642063757272656e746c79206960848201526c1cdb9d081cdd5c1c1bdc9d1959609a1b60a482015260c40162000bdb565b7f9c9555b1e3102e3cf48f427d79cb678f5d9bd1ed0ad574389461e255f95170ed88888789604051602001620031eb9291906200441d565b604051602081830303815290604052805190602001208560008151811062003217576200321762004586565b602002602001015160001c6040516200323494939291906200459c565b60405180910390a18160008151811062003252576200325262004586565b6020908102919091018101516001600160a01b038a1660009081528c835260408082206001600160e01b03198c16835284528082209051929390926200329d918a918c91016200441d565b60408051601f1981840301815291815281516020928301208352828201939093529082016000908120939093556001600160a01b038b16835260018d810182528284206001600160e01b03198c1685528252828420925190939162003307918a918c91016200441d565b60408051808303601f19018152918152815160209283012083529082019290925201600020805460ff19169115159190911790555062003900565b6001815111156200388f5760005b81518110156200388857600060008051602062006d5183398151915260001c6001600160a01b031663667f9d708a85858151811062003393576200339362004586565b60200260200101516040518363ffffffff1660e01b8152600401620033ba9291906200409b565b6020604051808303816000875af1158015620033da573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620034009190620042b1565b90508062003463577f080fc4a96620c4462e705b23f346413fe3796bb63c6f8d8591baec0e231577a5898484815181106200343f576200343f62004586565b602002602001015160001c6040516200345a9291906200409b565b60405180910390a15b60008051602062006d5183398151915260001c6001600160a01b03166370ca10bb8a8585815181106200349a576200349a62004586565b602002602001015161133760f01b6040518463ffffffff1660e01b8152600401620034c8939291906200447b565b600060405180830381600087803b158015620034e357600080fd5b505af1158015620034f8573d6000803e3d6000fd5b50505050600060608a6001600160a01b0316876040516200351a919062004293565b600060405180830381855afa9150503d806000811462003557576040519150601f19603f3d011682016040523d82523d6000602084013e6200355c565b606091505b509092509050620035748162002b058b602062004459565b955081801562003588575061133760f01b86145b15620037db577f9c9555b1e3102e3cf48f427d79cb678f5d9bd1ed0ad574389461e255f95170ed8b8b8a8c604051602001620035c69291906200441d565b60405160208183030381529060405280519060200120888881518110620035f157620035f162004586565b602002602001015160001c6040516200360e94939291906200459c565b60405180910390a18484815181106200362b576200362b62004586565b6020908102919091018101516001600160a01b038d1660009081528f835260408082206001600160e01b03198f168352845280822090519293909262003676918d918f91016200441d565b6040516020818303038152906040528051906020012081526020019081526020016000208190555060018d60010160008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008c6001600160e01b0319166001600160e01b031916815260200190815260200160002060008a8c604051602001620037039291906200441d565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548160ff02191690831515021790555060008051602062006d5183398151915260001c6001600160a01b03166370ca10bb8c87878151811062003775576200377562004586565b6020026020010151866040518463ffffffff1660e01b81526004016200379e939291906200447b565b600060405180830381600087803b158015620037b957600080fd5b505af1158015620037ce573d6000803e3d6000fd5b5050505050505062003888565b60008051602062006d5183398151915260001c6001600160a01b03166370ca10bb8c87878151811062003812576200381262004586565b6020026020010151866040518463ffffffff1660e01b81526004016200383b939291906200447b565b600060405180830381600087803b1580156200385657600080fd5b505af11580156200386b573d6000803e3d6000fd5b5050505050505080806200387f9062004239565b91505062003350565b5062003900565b6040805162461bcd60e51b81526020600482015260248101919091527f73746453746f726167652066696e642853746453746f72616765293a204e6f2060448201527f73746f726167652075736520646574656374656420666f72207461726765742e606482015260840162000bdb565b6001600160a01b038716600090815260018a01602090815260408083206001600160e01b03198a16845282528083209051909291620039449188918a91016200441d565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff16620039d35760405162461bcd60e51b815260206004820152602f60248201527f73746453746f726167652066696e642853746453746f72616765293a20536c6f60448201526e3a143994903737ba103337bab7321760891b606482015260840162000bdb565b6005890180546001600160a01b031916905560038901805463ffffffff1916905562003a0460028a01600062003cd4565b600060048a018190556001600160a01b038816815260208a815260408083206001600160e01b03198a1684528252808320905190929162003a4a9188918a91016200441d565b60405160208183030381529060405280519060200120815260200190815260200160002054975050505050505050919050565b60008051602062006d118339815191523b1562003b705760405160009060008051602062006d11833981519152907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49062003aeb9083906519985a5b195960d21b906001906020016200447b565b60408051601f198184030181529082905262003b0b9291602001620042cb565b60408051601f198184030181529082905262003b279162004293565b6000604051808303816000865af19150503d806000811462003b66576040519150601f19603f3d011682016040523d82523d6000602084013e62003b6b565b606091505b505050505b6000805461ff001916610100179055565b606060008251602062003b95919062004459565b67ffffffffffffffff81111562003bb05762003bb062003df6565b6040519080825280601f01601f19166020018201604052801562003bdb576020820181803683370190505b50905060005b835181101562000be457600084828151811062003c025762003c0262004586565b60200260200101519050808260200260200184015250808062003c259062004239565b91505062003be1565b6000806000602085511162003c4557845162003c48565b60205b905060005b8181101562003cae5762003c6381600862004459565b8662003c70838862004278565b8151811062003c835762003c8362004586565b01602001516001600160f81b031916901c92909217918062003ca58162004239565b91505062003c4d565b5090949350505050565b61195d80620045cd83390190565b610de78062005f2a83390190565b5080546000825590600052602060002090810190620022d791905b8082111562003d05576000815560010162003cef565b5090565b80356001600160a01b038116811462001aa857600080fd5b6000806040838503121562003d3557600080fd5b62003d408362003d09565b946020939093013593505050565b8015158114620022d757600080fd5b6000806040838503121562003d7157600080fd5b62003d7c8362003d09565b9150602083013562003d8e8162003d4e565b809150509250929050565b60006020828403121562003dac57600080fd5b62003db78262003d09565b9392505050565b6000806040838503121562003dd257600080fd5b62003ddd8362003d09565b915062003ded6020840162003d09565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171562003e385762003e3862003df6565b604052919050565b600067ffffffffffffffff82111562003e5d5762003e5d62003df6565b50601f01601f191660200190565b600062003e8262003e7c8462003e40565b62003e0c565b905082815283838301111562003e9757600080fd5b828260208301376000602084830101529392505050565b600082601f83011262003ec057600080fd5b62003db78383356020850162003e6b565b6000806040838503121562003ee557600080fd5b823567ffffffffffffffff8082111562003efe57600080fd5b62003f0c8683870162003eae565b9350602085013591508082111562003f2357600080fd5b508301601f8101851362003f3657600080fd5b62003f478582356020840162003e6b565b9150509250929050565b60006020828403121562003f6457600080fd5b5035919050565b60008060006060848603121562003f8157600080fd5b62003f8c8462003d09565b925062003f9c6020850162003d09565b9150604084013590509250925092565b60008060006060848603121562003fc257600080fd5b505081359360208301359350604090920135919050565b60006020828403121562003fec57600080fd5b81356001600160801b038116811462003db757600080fd5b600080600080608085870312156200401b57600080fd5b620040268562003d09565b9350620040366020860162003d09565b92506040850135915060608501356200404f8162003d4e565b939692955090935050565b6000602082840312156200406d57600080fd5b813567ffffffffffffffff8111156200408557600080fd5b620040938482850162003eae565b949350505050565b6001600160a01b03929092168252602082015260400190565b60005b83811015620040d1578181015183820152602001620040b7565b83811115620004b85750506000910152565b60008151808452620040fd816020860160208601620040b4565b601f01601f19169290920160200192915050565b60208152600062003db76020830184620040e3565b941515855292151560208501529015156040840152151560608301526001600160a01b0316608082015260a00190565b6000602082840312156200416957600080fd5b815167ffffffffffffffff8111156200418157600080fd5b8201601f810184136200419357600080fd5b8051620041a462003e7c8262003e40565b818152856020838501011115620041ba57600080fd5b620041cd826020830160208601620040b4565b95945050505050565b60008351620041ea818460208801620040b4565b83519083019062004200818360208801620040b4565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b60008282101562004234576200423462004209565b500390565b6000600182016200424e576200424e62004209565b5060010190565b6000826200427357634e487b7160e01b600052601260045260246000fd5b500690565b600082198211156200428e576200428e62004209565b500190565b60008251620042a7818460208701620040b4565b9190910192915050565b600060208284031215620042c457600080fd5b5051919050565b6001600160e01b0319831681528151600090620042f0816004850160208701620040b4565b919091016004019392505050565b6000602082840312156200431157600080fd5b815162003db78162003d4e565b60408152600560408201526422b93937b960d91b606082015260806020820152600062003db76080830184620040e3565b6040815260006200437a60408301600a8152690808115e1c1958dd195960b21b602082015260400190565b8281036020840152620040938185620040e3565b6040815260006200437a60408301600a815269080808081058dd1d585b60b21b602082015260400190565b604081526000620043e460408301600a8152690808115e1c1958dd195960b21b602082015260400190565b905082602083015292915050565b604081526000620043e460408301600a815269080808081058dd1d585b60b21b602082015260400190565b825160009082906020808701845b8381101562004449578151855293820193908201906001016200442b565b5050948252509092019392505050565b600081600019048311821515161562004476576200447662004209565b500290565b6001600160a01b039390931683526020830191909152604082015260600190565b600082601f830112620044ae57600080fd5b8151602067ffffffffffffffff821115620044cd57620044cd62003df6565b8160051b620044de82820162003e0c565b9283528481018201928281019087851115620044f957600080fd5b83870192505b848310156200451a57825182529183019190830190620044ff565b979650505050505050565b600080604083850312156200453957600080fd5b825167ffffffffffffffff808211156200455257600080fd5b62004560868387016200449c565b935060208501519150808211156200457757600080fd5b5062003f47858286016200449c565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b039490941684526001600160e01b0319929092166020840152604083015260608201526080019056fe60a060405260018055600060025534801561001957600080fd5b5060405161195d38038061195d83398101604081905261003891610106565b600080546001600160a01b031916339081178255604051909182917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76908290a3506001600160a01b03811660805260038290556040518281527fcf29a5174acb8c175d760a7381ffc52c6ae644e3a4ba3fa7e01344f959cd76159060200160405180910390a16703782dace9d9000060048190556040519081527f841095ec206e4a3d8124f54a431661bd653b296066d7d695baaa9178e9d21bb49060200160405180910390a15050610143565b6000806040838503121561011957600080fd5b825160208401519092506001600160a01b038116811461013857600080fd5b809150509250929050565b6080516117e361017a6000396000818161021601528181610425015281816104ef01528181610548015261060201526117e36000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80635881266d116100a2578063bd20a85911610071578063bd20a85914610276578063cd805d5e14610289578063daf9c21014610292578063e02c0279146102c5578063fc711c3a146102d857600080fd5b80635881266d146101fe5780637dc0d1d0146102115780638da5cb5b146102505780639170c05b1461026357600080fd5b806313af4035116100de57806313af4035146101675780632613f3071461017a57806329d56bc01461018d5780632d4d9a63146101a057600080fd5b806308ef3d44146101105780630ff0c00e146101255780630ffb1d8b1461014157806310f40e6a14610154575b600080fd5b61012361011e36600461140f565b6102e1565b005b61012e60035481565b6040519081526020015b60405180910390f35b61012361014f366004611450565b6105b1565b6101236101623660046114c9565b6106f7565b61012361017536600461154b565b610757565b61012361018836600461156d565b6107cc565b61012361019b366004611586565b610832565b6101d96101ae36600461156d565b6006602052600090815260409020805460018201546002909201546001600160a01b03909116919083565b604080516001600160a01b039094168452602084019290925290820152606001610138565b61012361020c3660046115bf565b6108b5565b6102387f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610138565b600054610238906001600160a01b031681565b610123610271366004611627565b61095d565b61012361028436600461156d565b610b0a565b61012e60025481565b6102b56102a036600461154b565b60056020526000908152604090205460ff1681565b6040519015158152602001610138565b6101236102d336600461167e565b610b91565b61012e60045481565b6001546001146103255760405162461bcd60e51b815260206004820152600a6024820152695245454e5452414e435960b01b60448201526064015b60405180910390fd5b600260015561033381610cf5565b61035357604051631acc120960e11b81526004810182905260240161031c565b600081815260066020908152604091829020825160608101845281546001600160a01b0316815260018201549281019290925260020154918101829052600354909161039f90436116f3565b106103bd57604051632c02744560e11b815260040160405180910390fd5b602081810151825160008581526006909352604080842080546001600160a01b031916815560018101859055600201849055516384bfabcf60e01b81526001600160a01b038083166004830152336024830152888116604483015260648201849052929391927f000000000000000000000000000000000000000000000000000000000000000016906384bfabcf90608401602060405180830381865afa15801561046c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610490919061170a565b90508085836001600160a01b03167fc293ada1a20d5f6111738a64aec9c7262db402de1650b576e691e321964bb01e868a6040516104d8929190918252602082015260400190565b60405180910390a46105146001600160a01b0388167f000000000000000000000000000000000000000000000000000000000000000085610d36565b604051632bd6267f60e21b81526001600160a01b0383811660048301523360248301528881166044830152606482018590527f0000000000000000000000000000000000000000000000000000000000000000169063af5899fc90608401600060405180830381600087803b15801561058c57600080fd5b505af11580156105a0573d6000803e3d6000fd5b505060018055505050505050505050565b6000546001600160a01b031633146105db5760405162461bcd60e51b815260040161031c90611723565b80801561066f5750604051630daf9c2160e41b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063daf9c21090602401602060405180830381865afa158015610649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066d9190611749565b155b15610698576040516313c42eef60e21b81526001600160a01b038316600482015260240161031c565b6001600160a01b038216600081815260056020908152604091829020805460ff191685151590811790915591519182527fef81a9943b96c8df4ef243401c9bf5159146166211356898b52d382086168d92910160405180910390a25050565b6107048487858585610db3565b61070f878787610f1a565b60408051848152602081018790524391889133917f970202b118cfe4d540f3c2eac57995322281324b625e43838fb87e30e0753b9e910160405180910390a450505050505050565b6000546001600160a01b031633146107815760405162461bcd60e51b815260040161031c90611723565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a350565b6000546001600160a01b031633146107f65760405162461bcd60e51b815260040161031c90611723565b60038190556040518181527fcf29a5174acb8c175d760a7381ffc52c6ae644e3a4ba3fa7e01344f959cd7615906020015b60405180910390a150565b6000828152600660205260409020600201541561086557604051638b6bbbad60e01b81526004810183905260240161031c565b610870848383610f1a565b60408051848152602081018390524391849133917f970202b118cfe4d540f3c2eac57995322281324b625e43838fb87e30e0753b9e910160405180910390a450505050565b6004548411156108db576040516305bf279d60e41b81526004810185905260240161031c565b6108e483610cf5565b1561090557604051638b6bbbad60e01b81526004810184905260240161031c565b6109128584868585610db3565b82856001600160a01b03167f6ab91dbc42f726b630639350395426be048c50255f12e82d28e2dffac41745938660405161094e91815260200190565b60405180910390a35050505050565b6001600160a01b03851660009081526005602052604090205460ff166109a15760405163f602627d60e01b81526001600160a01b038616600482015260240161031c565b6001600160a01b03841660009081526005602052604090205460ff166109e55760405163f602627d60e01b81526001600160a01b038516600482015260240161031c565b836001600160a01b0316856001600160a01b031603610a1757604051631d2792fb60e31b815260040160405180910390fd5b600454821115610a3d576040516305bf279d60e41b81526004810183905260240161031c565b82600003610a5e5760405163abc5ee6f60e01b815260040160405180910390fd5b6001600160a01b038116610a8557604051631feef77d60e01b815260040160405180910390fd5b610a9a6001600160a01b038616333086610f80565b60025460408051858152602081018590526001600160a01b03848116828401529151878316928916917f7361c265d28ece9d5df249995186533440e0b7a1310ae54d496fa1783056e3da919081900360600190a460028054906000610afe83611766565b91905055505050505050565b6000546001600160a01b03163314610b345760405162461bcd60e51b815260040161031c90611723565b670de0b6b3a76400008110610b5c57604051636a143fdd60e11b815260040160405180910390fd5b60048190556040518181527f841095ec206e4a3d8124f54a431661bd653b296066d7d695baaa9178e9d21bb490602001610827565b610b9a81610cf5565b610bba57604051631acc120960e11b81526004810182905260240161031c565b600081815260066020908152604091829020825160608101845281546001600160a01b03168152600182015492810192909252600201549181018290526003549091610c0690436116f3565b1015610c4a576000816040015143610c1e91906116f3565b600354610c2b91906116f3565b9050806040516325797e0360e11b815260040161031c91815260200190565b6020808201518251600085815260069093526040832080546001600160a01b0319168155600181018490556002019290925590610c916001600160a01b038916868461100a565b610ca56001600160a01b038a16828961100a565b8184826001600160a01b03167f3281f74a3f7405b6bd35e9687b3fcaaf242c466ac789d117f22b62b140af8dcc89604051610ce291815260200190565b60405180910390a4505050505050505050565b600090815260066020908152604091829020825160608101845281546001600160a01b03168152600182015492810192909252600201549101819052151590565b600060405163095ea7b360e01b8152836004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080610dad5760405162461bcd60e51b815260206004820152600e60248201526d1054141493d59157d1905253115160921b604482015260640161031c565b50505050565b600454831115610dd9576040516305bf279d60e41b81526004810184905260240161031c565b610de284610cf5565b15610e0357604051638b6bbbad60e01b81526004810185905260240161031c565b604080517f0efb9dda140a951df4393d44ca40349032d31811466afd20eacd4b4136c3f4986020808301919091528183018790526060808301879052835180840390910181526080830184528051908201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000060a084015260bc8084018290528451808503909101815260dc90930190935281519101206000610edc8286868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061108292505050565b9050876001600160a01b0316816001600160a01b031614610f10576040516324a0dbd760e21b815260040160405180910390fd5b5050505050505050565b60408051606081018252338082526020808301858152438486019081526000888152600690935294909120835181546001600160a01b0319166001600160a01b039182161782559151600182015593516002909401939093559091610dad919086169030855b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d11600160005114161716915050806110035760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b604482015260640161031c565b5050505050565b600060405163a9059cbb60e01b8152836004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080610dad5760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b604482015260640161031c565b600080600061109185856110a6565b9150915061109e81611114565b509392505050565b60008082516041036110dc5760208301516040840151606085015160001a6110d0878285856112cd565b9450945050505061110d565b825160400361110557602083015160408401516110fa8683836113ba565b93509350505061110d565b506000905060025b9250929050565b60008160048111156111285761112861177f565b036111305750565b60018160048111156111445761114461177f565b036111915760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161031c565b60028160048111156111a5576111a561177f565b036111f25760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161031c565b60038160048111156112065761120661177f565b0361125e5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161031c565b60048160048111156112725761127261177f565b036112ca5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161031c565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561130457506000905060036113b1565b8460ff16601b1415801561131c57508460ff16601c14155b1561132d57506000905060046113b1565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611381573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166113aa576000600192509250506113b1565b9150600090505b94509492505050565b6000806001600160ff1b038316816113d760ff86901c601b611795565b90506113e5878288856112cd565b935093505050935093915050565b80356001600160a01b038116811461140a57600080fd5b919050565b60008060006060848603121561142457600080fd5b61142d846113f3565b95602085013595506040909401359392505050565b80151581146112ca57600080fd5b6000806040838503121561146357600080fd5b61146c836113f3565b9150602083013561147c81611442565b809150509250929050565b60008083601f84011261149957600080fd5b50813567ffffffffffffffff8111156114b157600080fd5b60208301915083602082850101111561110d57600080fd5b600080600080600080600060c0888a0312156114e457600080fd5b6114ed886113f3565b96506020880135955060408801359450611509606089016113f3565b93506080880135925060a088013567ffffffffffffffff81111561152c57600080fd5b6115388a828b01611487565b989b979a50959850939692959293505050565b60006020828403121561155d57600080fd5b611566826113f3565b9392505050565b60006020828403121561157f57600080fd5b5035919050565b6000806000806080858703121561159c57600080fd5b6115a5856113f3565b966020860135965060408601359560600135945092505050565b6000806000806000608086880312156115d757600080fd5b6115e0866113f3565b94506020860135935060408601359250606086013567ffffffffffffffff81111561160a57600080fd5b61161688828901611487565b969995985093965092949392505050565b600080600080600060a0868803121561163f57600080fd5b611648866113f3565b9450611656602087016113f3565b93506040860135925060608601359150611672608087016113f3565b90509295509295909350565b60008060008060008060c0878903121561169757600080fd5b6116a0876113f3565b95506116ae602088016113f3565b945060408701359350606087013592506116ca608088016113f3565b915060a087013590509295509295509295565b634e487b7160e01b600052601160045260246000fd5b600082821015611705576117056116dd565b500390565b60006020828403121561171c57600080fd5b5051919050565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b60006020828403121561175b57600080fd5b815161156681611442565b600060018201611778576117786116dd565b5060010190565b634e487b7160e01b600052602160045260246000fd5b600082198211156117a8576117a86116dd565b50019056fea2646970667358221220b41ca7110c27843c888fd86833e8f4658e46a22feba9517f56d8855f80a64b5264736f6c634300080f0033608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76908290a350601960049081553360009081526003602052604090819020805460ff19166001179055905490517fa2e09ae7caa0e84bcfe806d931934b92bf11ce67ffcaa3033af9a1e031996951916100a89190815260200190565b60405180910390a1610d28806100bf6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638945bd281161008c578063af5899fc11610066578063af5899fc14610202578063c70a900f14610215578063daf9c21014610248578063fc361c381461026b57600080fd5b80638945bd28146101515780638da5cb5b146101645780639d8669851461018f57600080fd5b806307de99f6146100d45780630ffb1d8b146100fa57806313af40351461010f578063329e53be14610122578063391fe4e21461013557806384bfabcf1461013e575b600080fd5b6100e76100e2366004610ad9565b61027e565b6040519081526020015b60405180910390f35b61010d610108366004610b1e565b61028f565b005b61010d61011d366004610b51565b610322565b61010d610130366004610b1e565b610397565b6100e760045481565b6100e761014c366004610b73565b610419565b61010d61015f366004610ad9565b61043e565b600054610177906001600160a01b031681565b6040516001600160a01b0390911681526020016100f1565b6101ef61019d366004610ad9565b60016020819052600091825260409091208054918101546002820154600383015460048401546005909401546001600160a01b0395861695938416949390921692909160ff8082169161010090041687565b6040516100f19796959493929190610bd4565b61010d610210366004610b73565b6104a3565b610238610223366004610b51565b60036020526000908152604090205460ff1681565b60405190151581526020016100f1565b610238610256366004610b51565b60026020526000908152604090205460ff1681565b61010d610279366004610c3a565b6106fe565b600061028982610962565b92915050565b6000546001600160a01b031633146102c25760405162461bcd60e51b81526004016102b990610c5d565b60405180910390fd5b6001600160a01b038216600081815260026020908152604091829020805460ff191685151590811790915591519182527fef81a9943b96c8df4ef243401c9bf5159146166211356898b52d382086168d9291015b60405180910390a25050565b6000546001600160a01b0316331461034c5760405162461bcd60e51b81526004016102b990610c5d565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a350565b6000546001600160a01b031633146103c15760405162461bcd60e51b81526004016102b990610c5d565b6001600160a01b038216600081815260036020908152604091829020805460ff191685151590811790915591519182527f8cc72bec7e2cf5979aefd933f40a28eb590098d522a5c458e497e71c5e6fa90f9101610316565b60008061042583610962565b9050610434868686868561097e565b9695505050505050565b6000546001600160a01b031633146104685760405162461bcd60e51b81526004016102b990610c5d565b60048190556040518181527fa2e09ae7caa0e84bcfe806d931934b92bf11ce67ffcaa3033af9a1e0319969519060200160405180910390a150565b6001600160a01b03821660009081526002602052604090205460ff166104e75760405163010d7e6160e11b81526001600160a01b03831660048201526024016102b9565b60006104f282610962565b90506000610503868686868661097e565b90506001600082815260016020526040902060050154610100900460ff16600281111561053257610532610bbe565b036105535760405163d5e880e960e01b8152600481018290526024016102b9565b60006040518060e00160405280886001600160a01b03168152602001876001600160a01b03168152602001866001600160a01b03168152602001858152602001848152602001600015158152602001600160028111156105b5576105b5610bbe565b9052600083815260016020818152604092839020845181546001600160a01b03199081166001600160a01b03928316178355928601519382018054841694821694909417909355928401516002808501805490931691909316179055606083015160038301556080830151600483015560a083015160058301805460ff198116921515928317825560c0860151959650869593919261ffff1990911661ff0019909116179061010090849081111561066f5761066f610bbe565b021790555061068c9150506001600160a01b0386168730866109d1565b6106a16001600160a01b0386163330876109d1565b604080516001600160a01b038781168252602082018790529181018590528188169189169084907fb10e0c42d0d8cd4a999f95c50d18109fb205fdf5e55a8ed89121cab7f9f65f699060600160405180910390a450505050505050565b3360009081526003602052604090205460ff1661072e576040516314e9dd3960e31b815260040160405180910390fd5b6000828152600160208181526040808420815160e08101835281546001600160a01b03908116825294820154851693810193909352600280820154909416918301919091526003810154606083015260048101546080830152600581015460ff808216151560a08501529293919260c085019261010090920416908111156107b8576107b8610bbe565b60028111156107c9576107c9610bbe565b905250905060028160c0015160028111156107e6576107e6610bbe565b036108075760405163b677167760e01b8152600481018490526024016102b9565b81156108415780516060820151608083015161083c929161082791610c99565b60408401516001600160a01b03169190610a5b565b61085d565b61085d8160200151826060015183608001516108279190610c99565b600260c0820181815283151560a08401908152600086815260016020818152604092839020875181546001600160a01b039182166001600160a01b0319918216178355928901519382018054948216948416949094179093559287015183870180549190931691161790556060850151600382015560808501516004820155905160058201805491151560ff198316811782559351869593949093919261ff001990911661ffff19909116179061010090849081111561091f5761091f610bbe565b02179055505060405183151581528491507fdbed7580b9c2829ee6b384e3833f10b16f9885601c98a01c40fd705b543e9c669060200160405180910390a2505050565b60006064600454836109749190610cb1565b6102899190610cd0565b604080516001600160a01b0396871660208083019190915295871681830152939095166060840152608083019190915260a0808301919091528351808303909101815260c0909101909252815191012090565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d1160016000511416171691505080610a545760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b60448201526064016102b9565b5050505050565b600060405163a9059cbb60e01b8152836004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080610ad35760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b60448201526064016102b9565b50505050565b600060208284031215610aeb57600080fd5b5035919050565b80356001600160a01b0381168114610b0957600080fd5b919050565b80358015158114610b0957600080fd5b60008060408385031215610b3157600080fd5b610b3a83610af2565b9150610b4860208401610b0e565b90509250929050565b600060208284031215610b6357600080fd5b610b6c82610af2565b9392505050565b60008060008060808587031215610b8957600080fd5b610b9285610af2565b9350610ba060208601610af2565b9250610bae60408601610af2565b9396929550929360600135925050565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b038881168252878116602083015286166040820152606081018590526080810184905282151560a082015260e0810160038310610c2857634e487b7160e01b600052602160045260246000fd5b8260c083015298975050505050505050565b60008060408385031215610c4d57600080fd5b82359150610b4860208401610b0e565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115610cac57610cac610c83565b500190565b6000816000190483118215151615610ccb57610ccb610c83565b500290565b600082610ced57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220a086d5378c38188b517141b491168433bcacdd1ef66aa0a3a08acd1fabd82c2a64736f6c634300080f00330000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12d280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12da2646970667358221220915fb5b43fbeac6ca485f08ea8256d2c5e779d12142278aaed940b3f5f0cbe1464736f6c634300080f0033" . parse () . expect ("invalid bytecode")
        });
    pub struct AdminTest<M>(ethers::contract::Contract<M>);
    impl<M> Clone for AdminTest<M> {
        fn clone(&self) -> Self {
            AdminTest(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for AdminTest<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for AdminTest<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(AdminTest))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> AdminTest<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), ADMINTEST_ABI.clone(), client).into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                ADMINTEST_ABI.clone(),
                ADMINTEST_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `IS_TEST` (0xfa7626d4) function"]
        pub fn is_test(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([250, 118, 38, 212], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `bound` (0x5a6c1eed) function"]
        pub fn bound(
            &self,
            x: ethers::core::types::U256,
            min: ethers::core::types::U256,
            max: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([90, 108, 30, 237], (x, min, max))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deal` (0x6bce989b) function"]
        pub fn deal_with_token(
            &self,
            token: ethers::core::types::Address,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([107, 206, 152, 155], (token, to, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deal` (0x97754ae9) function"]
        pub fn deal_with_token_and_adjust(
            &self,
            token: ethers::core::types::Address,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
            adjust: bool,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([151, 117, 74, 233], (token, to, give, adjust))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deal` (0xc88a5e6d) function"]
        pub fn deal(
            &self,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([200, 138, 94, 109], (to, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deployCode` (0x29ce9dde) function"]
        pub fn deploy_code_with_args(
            &self,
            what: String,
            args: ethers::core::types::Bytes,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([41, 206, 157, 222], (what, args))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deployCode` (0x9a8325a0) function"]
        pub fn deploy_code(
            &self,
            what: String,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([154, 131, 37, 160], what)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `failed` (0xba414fa6) function"]
        pub fn failed(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([186, 65, 79, 166], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0x233240ee) function"]
        pub fn hoax_0(
            &self,
            who: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([35, 50, 64, 238], who)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0x29a9e300) function"]
        pub fn hoax_2(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([41, 169, 227, 0], (who, origin))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0xaf9bbe5f) function"]
        pub fn hoax_3(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([175, 155, 190, 95], (who, origin, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0xe9a79a7b) function"]
        pub fn hoax_4(
            &self,
            who: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([233, 167, 154, 123], (who, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `rewind` (0x2d6c17a3) function"]
        pub fn rewind(
            &self,
            time: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([45, 108, 23, 163], time)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setUp` (0x0a9254e4) function"]
        pub fn set_up(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([10, 146, 84, 228], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `skip` (0xb9c071b4) function"]
        pub fn skip(
            &self,
            time: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([185, 192, 113, 180], time)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0x108554f2) function"]
        pub fn start_hoax_1(
            &self,
            who: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([16, 133, 84, 242], (who, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0x3bf82db1) function"]
        pub fn start_hoax_2(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([59, 248, 45, 177], (who, origin, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0x6f597075) function"]
        pub fn start_hoax_0(
            &self,
            who: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([111, 89, 112, 117], who)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0xd06d8229) function"]
        pub fn start_hoax_4(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([208, 109, 130, 41], (who, origin))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testMaxFeePctChange` (0x5b657cca) function"]
        pub fn test_max_fee_pct_change(
            &self,
            new_fee: u128,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([91, 101, 124, 202], new_fee)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testThresholdChange` (0x35605851) function"]
        pub fn test_threshold_change(
            &self,
            new_threshold: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([53, 96, 88, 81], new_threshold)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testTokenWhitelist` (0x1e388b93) function"]
        pub fn test_token_whitelist(
            &self,
            token: ethers::core::types::Address,
            enabled: bool,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([30, 56, 139, 147], (token, enabled))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `tip` (0xd82555f1) function"]
        pub fn tip(
            &self,
            token: ethers::core::types::Address,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([216, 37, 85, 241], (token, to, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `vm` (0x3a768463) function"]
        pub fn vm(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([58, 118, 132, 99], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `MaxFeePctChanged` event"]
        pub fn max_fee_pct_changed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, MaxFeePctChangedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `SafeBlockThresholdChanged` event"]
        pub fn safe_block_threshold_changed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, SafeBlockThresholdChangedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TokenWhitelisted` event"]
        pub fn token_whitelisted_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TokenWhitelistedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeDisputed` event"]
        pub fn trade_disputed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeDisputedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeFilled` event"]
        pub fn trade_filled_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeFilledFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeRequested` event"]
        pub fn trade_requested_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeRequestedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeSettled` event"]
        pub fn trade_settled_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeSettledFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `UpdatedFeeForTrade` event"]
        pub fn updated_fee_for_trade_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, UpdatedFeeForTradeFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `WARNING_Deprecated` event"]
        pub fn warning_deprecated_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, WarningDeprecatedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log` event"]
        pub fn log_filter(&self) -> ethers::contract::builders::Event<M, LogFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_address` event"]
        pub fn log_address_filter(&self) -> ethers::contract::builders::Event<M, LogAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes` event"]
        pub fn log_bytes_filter(&self) -> ethers::contract::builders::Event<M, LogBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes32` event"]
        pub fn log_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_int` event"]
        pub fn log_int_filter(&self) -> ethers::contract::builders::Event<M, LogIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_address` event"]
        pub fn log_named_address_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes` event"]
        pub fn log_named_bytes_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes32` event"]
        pub fn log_named_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_int` event"]
        pub fn log_named_decimal_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_uint` event"]
        pub fn log_named_decimal_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_int` event"]
        pub fn log_named_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_string` event"]
        pub fn log_named_string_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_uint` event"]
        pub fn log_named_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_string` event"]
        pub fn log_string_filter(&self) -> ethers::contract::builders::Event<M, LogStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_uint` event"]
        pub fn log_uint_filter(&self) -> ethers::contract::builders::Event<M, LogUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `logs` event"]
        pub fn logs_filter(&self) -> ethers::contract::builders::Event<M, LogsFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, AdminTestEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for AdminTest<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "MaxFeePctChanged", abi = "MaxFeePctChanged(uint256)")]
    pub struct MaxFeePctChangedFilter {
        pub new_max_fee_pct: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "SafeBlockThresholdChanged",
        abi = "SafeBlockThresholdChanged(uint256)"
    )]
    pub struct SafeBlockThresholdChangedFilter {
        pub new_safe_block_threshold: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "TokenWhitelisted", abi = "TokenWhitelisted(address,bool)")]
    pub struct TokenWhitelistedFilter {
        #[ethevent(indexed)]
        pub token: ethers::core::types::Address,
        pub whitelisted: bool,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeDisputed",
        abi = "TradeDisputed(address,uint256,bytes32,uint256,uint256)"
    )]
    pub struct TradeDisputedFilter {
        #[ethevent(indexed)]
        pub relayer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
        #[ethevent(indexed)]
        pub dispute_id: [u8; 32],
        pub filled_amount: ethers::core::types::U256,
        pub fee_pct: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeFilled",
        abi = "TradeFilled(address,uint256,uint256,uint256,uint256)"
    )]
    pub struct TradeFilledFilter {
        #[ethevent(indexed)]
        pub relayer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
        #[ethevent(indexed)]
        pub filled_at_block: ethers::core::types::U256,
        pub fee_pct: ethers::core::types::U256,
        pub amount_out: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeRequested",
        abi = "TradeRequested(address,address,uint256,uint256,address,uint256)"
    )]
    pub struct TradeRequestedFilter {
        #[ethevent(indexed)]
        pub token_in: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub token_out: ethers::core::types::Address,
        pub amount_in: ethers::core::types::U256,
        pub fee_pct: ethers::core::types::U256,
        pub to: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeSettled",
        abi = "TradeSettled(address,uint256,uint256,uint256)"
    )]
    pub struct TradeSettledFilter {
        #[ethevent(indexed)]
        pub relayer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
        #[ethevent(indexed)]
        pub filled_amount: ethers::core::types::U256,
        pub fee_pct: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "UpdatedFeeForTrade",
        abi = "UpdatedFeeForTrade(address,uint256,uint256)"
    )]
    pub struct UpdatedFeeForTradeFilter {
        #[ethevent(indexed)]
        pub trader: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
        pub new_fee_pct: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "WARNING_Deprecated", abi = "WARNING_Deprecated(string)")]
    pub struct WarningDeprecatedFilter {
        pub msg: String,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log", abi = "log(string)")]
    pub struct LogFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_address", abi = "log_address(address)")]
    pub struct LogAddressFilter(pub ethers::core::types::Address);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes", abi = "log_bytes(bytes)")]
    pub struct LogBytesFilter(pub ethers::core::types::Bytes);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes32", abi = "log_bytes32(bytes32)")]
    pub struct LogBytes32Filter(pub [u8; 32]);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_int", abi = "log_int(int256)")]
    pub struct LogIntFilter(pub I256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_address", abi = "log_named_address(string,address)")]
    pub struct LogNamedAddressFilter {
        pub key: String,
        pub val: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes", abi = "log_named_bytes(string,bytes)")]
    pub struct LogNamedBytesFilter {
        pub key: String,
        pub val: ethers::core::types::Bytes,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes32", abi = "log_named_bytes32(string,bytes32)")]
    pub struct LogNamedBytes32Filter {
        pub key: String,
        pub val: [u8; 32],
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_int",
        abi = "log_named_decimal_int(string,int256,uint256)"
    )]
    pub struct LogNamedDecimalIntFilter {
        pub key: String,
        pub val: I256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_uint",
        abi = "log_named_decimal_uint(string,uint256,uint256)"
    )]
    pub struct LogNamedDecimalUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_int", abi = "log_named_int(string,int256)")]
    pub struct LogNamedIntFilter {
        pub key: String,
        pub val: I256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_string", abi = "log_named_string(string,string)")]
    pub struct LogNamedStringFilter {
        pub key: String,
        pub val: String,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_uint", abi = "log_named_uint(string,uint256)")]
    pub struct LogNamedUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_string", abi = "log_string(string)")]
    pub struct LogStringFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_uint", abi = "log_uint(uint256)")]
    pub struct LogUintFilter(pub ethers::core::types::U256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "logs", abi = "logs(bytes)")]
    pub struct LogsFilter(pub ethers::core::types::Bytes);
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum AdminTestEvents {
        MaxFeePctChangedFilter(MaxFeePctChangedFilter),
        SafeBlockThresholdChangedFilter(SafeBlockThresholdChangedFilter),
        TokenWhitelistedFilter(TokenWhitelistedFilter),
        TradeDisputedFilter(TradeDisputedFilter),
        TradeFilledFilter(TradeFilledFilter),
        TradeRequestedFilter(TradeRequestedFilter),
        TradeSettledFilter(TradeSettledFilter),
        UpdatedFeeForTradeFilter(UpdatedFeeForTradeFilter),
        WarningDeprecatedFilter(WarningDeprecatedFilter),
        LogFilter(LogFilter),
        LogAddressFilter(LogAddressFilter),
        LogBytesFilter(LogBytesFilter),
        LogBytes32Filter(LogBytes32Filter),
        LogIntFilter(LogIntFilter),
        LogNamedAddressFilter(LogNamedAddressFilter),
        LogNamedBytesFilter(LogNamedBytesFilter),
        LogNamedBytes32Filter(LogNamedBytes32Filter),
        LogNamedDecimalIntFilter(LogNamedDecimalIntFilter),
        LogNamedDecimalUintFilter(LogNamedDecimalUintFilter),
        LogNamedIntFilter(LogNamedIntFilter),
        LogNamedStringFilter(LogNamedStringFilter),
        LogNamedUintFilter(LogNamedUintFilter),
        LogStringFilter(LogStringFilter),
        LogUintFilter(LogUintFilter),
        LogsFilter(LogsFilter),
    }
    impl ethers::contract::EthLogDecode for AdminTestEvents {
        fn decode_log(log: &ethers::core::abi::RawLog) -> Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = MaxFeePctChangedFilter::decode_log(log) {
                return Ok(AdminTestEvents::MaxFeePctChangedFilter(decoded));
            }
            if let Ok(decoded) = SafeBlockThresholdChangedFilter::decode_log(log) {
                return Ok(AdminTestEvents::SafeBlockThresholdChangedFilter(decoded));
            }
            if let Ok(decoded) = TokenWhitelistedFilter::decode_log(log) {
                return Ok(AdminTestEvents::TokenWhitelistedFilter(decoded));
            }
            if let Ok(decoded) = TradeDisputedFilter::decode_log(log) {
                return Ok(AdminTestEvents::TradeDisputedFilter(decoded));
            }
            if let Ok(decoded) = TradeFilledFilter::decode_log(log) {
                return Ok(AdminTestEvents::TradeFilledFilter(decoded));
            }
            if let Ok(decoded) = TradeRequestedFilter::decode_log(log) {
                return Ok(AdminTestEvents::TradeRequestedFilter(decoded));
            }
            if let Ok(decoded) = TradeSettledFilter::decode_log(log) {
                return Ok(AdminTestEvents::TradeSettledFilter(decoded));
            }
            if let Ok(decoded) = UpdatedFeeForTradeFilter::decode_log(log) {
                return Ok(AdminTestEvents::UpdatedFeeForTradeFilter(decoded));
            }
            if let Ok(decoded) = WarningDeprecatedFilter::decode_log(log) {
                return Ok(AdminTestEvents::WarningDeprecatedFilter(decoded));
            }
            if let Ok(decoded) = LogFilter::decode_log(log) {
                return Ok(AdminTestEvents::LogFilter(decoded));
            }
            if let Ok(decoded) = LogAddressFilter::decode_log(log) {
                return Ok(AdminTestEvents::LogAddressFilter(decoded));
            }
            if let Ok(decoded) = LogBytesFilter::decode_log(log) {
                return Ok(AdminTestEvents::LogBytesFilter(decoded));
            }
            if let Ok(decoded) = LogBytes32Filter::decode_log(log) {
                return Ok(AdminTestEvents::LogBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogIntFilter::decode_log(log) {
                return Ok(AdminTestEvents::LogIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedAddressFilter::decode_log(log) {
                return Ok(AdminTestEvents::LogNamedAddressFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytesFilter::decode_log(log) {
                return Ok(AdminTestEvents::LogNamedBytesFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytes32Filter::decode_log(log) {
                return Ok(AdminTestEvents::LogNamedBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalIntFilter::decode_log(log) {
                return Ok(AdminTestEvents::LogNamedDecimalIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalUintFilter::decode_log(log) {
                return Ok(AdminTestEvents::LogNamedDecimalUintFilter(decoded));
            }
            if let Ok(decoded) = LogNamedIntFilter::decode_log(log) {
                return Ok(AdminTestEvents::LogNamedIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedStringFilter::decode_log(log) {
                return Ok(AdminTestEvents::LogNamedStringFilter(decoded));
            }
            if let Ok(decoded) = LogNamedUintFilter::decode_log(log) {
                return Ok(AdminTestEvents::LogNamedUintFilter(decoded));
            }
            if let Ok(decoded) = LogStringFilter::decode_log(log) {
                return Ok(AdminTestEvents::LogStringFilter(decoded));
            }
            if let Ok(decoded) = LogUintFilter::decode_log(log) {
                return Ok(AdminTestEvents::LogUintFilter(decoded));
            }
            if let Ok(decoded) = LogsFilter::decode_log(log) {
                return Ok(AdminTestEvents::LogsFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for AdminTestEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                AdminTestEvents::MaxFeePctChangedFilter(element) => element.fmt(f),
                AdminTestEvents::SafeBlockThresholdChangedFilter(element) => element.fmt(f),
                AdminTestEvents::TokenWhitelistedFilter(element) => element.fmt(f),
                AdminTestEvents::TradeDisputedFilter(element) => element.fmt(f),
                AdminTestEvents::TradeFilledFilter(element) => element.fmt(f),
                AdminTestEvents::TradeRequestedFilter(element) => element.fmt(f),
                AdminTestEvents::TradeSettledFilter(element) => element.fmt(f),
                AdminTestEvents::UpdatedFeeForTradeFilter(element) => element.fmt(f),
                AdminTestEvents::WarningDeprecatedFilter(element) => element.fmt(f),
                AdminTestEvents::LogFilter(element) => element.fmt(f),
                AdminTestEvents::LogAddressFilter(element) => element.fmt(f),
                AdminTestEvents::LogBytesFilter(element) => element.fmt(f),
                AdminTestEvents::LogBytes32Filter(element) => element.fmt(f),
                AdminTestEvents::LogIntFilter(element) => element.fmt(f),
                AdminTestEvents::LogNamedAddressFilter(element) => element.fmt(f),
                AdminTestEvents::LogNamedBytesFilter(element) => element.fmt(f),
                AdminTestEvents::LogNamedBytes32Filter(element) => element.fmt(f),
                AdminTestEvents::LogNamedDecimalIntFilter(element) => element.fmt(f),
                AdminTestEvents::LogNamedDecimalUintFilter(element) => element.fmt(f),
                AdminTestEvents::LogNamedIntFilter(element) => element.fmt(f),
                AdminTestEvents::LogNamedStringFilter(element) => element.fmt(f),
                AdminTestEvents::LogNamedUintFilter(element) => element.fmt(f),
                AdminTestEvents::LogStringFilter(element) => element.fmt(f),
                AdminTestEvents::LogUintFilter(element) => element.fmt(f),
                AdminTestEvents::LogsFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `IS_TEST`function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "IS_TEST", abi = "IS_TEST()")]
    pub struct IsTestCall;
    #[doc = "Container type for all input parameters for the `bound`function with signature `bound(uint256,uint256,uint256)` and selector `[90, 108, 30, 237]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "bound", abi = "bound(uint256,uint256,uint256)")]
    pub struct BoundCall {
        pub x: ethers::core::types::U256,
        pub min: ethers::core::types::U256,
        pub max: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `deal`function with signature `deal(address,address,uint256)` and selector `[107, 206, 152, 155]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deal", abi = "deal(address,address,uint256)")]
    pub struct DealWithTokenCall {
        pub token: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `deal`function with signature `deal(address,address,uint256,bool)` and selector `[151, 117, 74, 233]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deal", abi = "deal(address,address,uint256,bool)")]
    pub struct DealWithTokenAndAdjustCall {
        pub token: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
        pub adjust: bool,
    }
    #[doc = "Container type for all input parameters for the `deal`function with signature `deal(address,uint256)` and selector `[200, 138, 94, 109]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deal", abi = "deal(address,uint256)")]
    pub struct DealCall {
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `deployCode`function with signature `deployCode(string,bytes)` and selector `[41, 206, 157, 222]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deployCode", abi = "deployCode(string,bytes)")]
    pub struct DeployCodeWithArgsCall {
        pub what: String,
        pub args: ethers::core::types::Bytes,
    }
    #[doc = "Container type for all input parameters for the `deployCode`function with signature `deployCode(string)` and selector `[154, 131, 37, 160]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deployCode", abi = "deployCode(string)")]
    pub struct DeployCodeCall {
        pub what: String,
    }
    #[doc = "Container type for all input parameters for the `failed`function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "failed", abi = "failed()")]
    pub struct FailedCall;
    #[doc = "Container type for all input parameters for the `hoax`function with signature `hoax(address)` and selector `[35, 50, 64, 238]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address)")]
    pub struct Hoax0Call {
        pub who: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `hoax`function with signature `hoax(address,address)` and selector `[41, 169, 227, 0]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address,address)")]
    pub struct Hoax2Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `hoax`function with signature `hoax(address,address,uint256)` and selector `[175, 155, 190, 95]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address,address,uint256)")]
    pub struct Hoax3Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `hoax`function with signature `hoax(address,uint256)` and selector `[233, 167, 154, 123]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address,uint256)")]
    pub struct Hoax4Call {
        pub who: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `rewind`function with signature `rewind(uint256)` and selector `[45, 108, 23, 163]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "rewind", abi = "rewind(uint256)")]
    pub struct RewindCall {
        pub time: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `setUp`function with signature `setUp()` and selector `[10, 146, 84, 228]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "setUp", abi = "setUp()")]
    pub struct SetUpCall;
    #[doc = "Container type for all input parameters for the `skip`function with signature `skip(uint256)` and selector `[185, 192, 113, 180]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "skip", abi = "skip(uint256)")]
    pub struct SkipCall {
        pub time: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `startHoax`function with signature `startHoax(address,uint256)` and selector `[16, 133, 84, 242]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address,uint256)")]
    pub struct StartHoax1Call {
        pub who: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `startHoax`function with signature `startHoax(address,address,uint256)` and selector `[59, 248, 45, 177]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address,address,uint256)")]
    pub struct StartHoax2Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `startHoax`function with signature `startHoax(address)` and selector `[111, 89, 112, 117]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address)")]
    pub struct StartHoax0Call {
        pub who: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `startHoax`function with signature `startHoax(address,address)` and selector `[208, 109, 130, 41]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address,address)")]
    pub struct StartHoax4Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `testMaxFeePctChange`function with signature `testMaxFeePctChange(uint128)` and selector `[91, 101, 124, 202]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testMaxFeePctChange", abi = "testMaxFeePctChange(uint128)")]
    pub struct TestMaxFeePctChangeCall {
        pub new_fee: u128,
    }
    #[doc = "Container type for all input parameters for the `testThresholdChange`function with signature `testThresholdChange(uint256)` and selector `[53, 96, 88, 81]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testThresholdChange", abi = "testThresholdChange(uint256)")]
    pub struct TestThresholdChangeCall {
        pub new_threshold: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `testTokenWhitelist`function with signature `testTokenWhitelist(address,bool)` and selector `[30, 56, 139, 147]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testTokenWhitelist", abi = "testTokenWhitelist(address,bool)")]
    pub struct TestTokenWhitelistCall {
        pub token: ethers::core::types::Address,
        pub enabled: bool,
    }
    #[doc = "Container type for all input parameters for the `tip`function with signature `tip(address,address,uint256)` and selector `[216, 37, 85, 241]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "tip", abi = "tip(address,address,uint256)")]
    pub struct TipCall {
        pub token: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `vm`function with signature `vm()` and selector `[58, 118, 132, 99]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "vm", abi = "vm()")]
    pub struct VmCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum AdminTestCalls {
        IsTest(IsTestCall),
        Bound(BoundCall),
        DealWithToken(DealWithTokenCall),
        DealWithTokenAndAdjust(DealWithTokenAndAdjustCall),
        Deal(DealCall),
        DeployCodeWithArgs(DeployCodeWithArgsCall),
        DeployCode(DeployCodeCall),
        Failed(FailedCall),
        Hoax0(Hoax0Call),
        Hoax2(Hoax2Call),
        Hoax3(Hoax3Call),
        Hoax4(Hoax4Call),
        Rewind(RewindCall),
        SetUp(SetUpCall),
        Skip(SkipCall),
        StartHoax1(StartHoax1Call),
        StartHoax2(StartHoax2Call),
        StartHoax0(StartHoax0Call),
        StartHoax4(StartHoax4Call),
        TestMaxFeePctChange(TestMaxFeePctChangeCall),
        TestThresholdChange(TestThresholdChangeCall),
        TestTokenWhitelist(TestTokenWhitelistCall),
        Tip(TipCall),
        Vm(VmCall),
    }
    impl ethers::core::abi::AbiDecode for AdminTestCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) = <IsTestCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::IsTest(decoded));
            }
            if let Ok(decoded) = <BoundCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::Bound(decoded));
            }
            if let Ok(decoded) =
                <DealWithTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::DealWithToken(decoded));
            }
            if let Ok(decoded) =
                <DealWithTokenAndAdjustCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::DealWithTokenAndAdjust(decoded));
            }
            if let Ok(decoded) = <DealCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(AdminTestCalls::Deal(decoded));
            }
            if let Ok(decoded) =
                <DeployCodeWithArgsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::DeployCodeWithArgs(decoded));
            }
            if let Ok(decoded) =
                <DeployCodeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::DeployCode(decoded));
            }
            if let Ok(decoded) = <FailedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::Failed(decoded));
            }
            if let Ok(decoded) = <Hoax0Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::Hoax0(decoded));
            }
            if let Ok(decoded) = <Hoax2Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::Hoax2(decoded));
            }
            if let Ok(decoded) = <Hoax3Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::Hoax3(decoded));
            }
            if let Ok(decoded) = <Hoax4Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::Hoax4(decoded));
            }
            if let Ok(decoded) = <RewindCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::Rewind(decoded));
            }
            if let Ok(decoded) = <SetUpCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::SetUp(decoded));
            }
            if let Ok(decoded) = <SkipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(AdminTestCalls::Skip(decoded));
            }
            if let Ok(decoded) =
                <StartHoax1Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::StartHoax1(decoded));
            }
            if let Ok(decoded) =
                <StartHoax2Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::StartHoax2(decoded));
            }
            if let Ok(decoded) =
                <StartHoax0Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::StartHoax0(decoded));
            }
            if let Ok(decoded) =
                <StartHoax4Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::StartHoax4(decoded));
            }
            if let Ok(decoded) =
                <TestMaxFeePctChangeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::TestMaxFeePctChange(decoded));
            }
            if let Ok(decoded) =
                <TestThresholdChangeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::TestThresholdChange(decoded));
            }
            if let Ok(decoded) =
                <TestTokenWhitelistCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::TestTokenWhitelist(decoded));
            }
            if let Ok(decoded) = <TipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(AdminTestCalls::Tip(decoded));
            }
            if let Ok(decoded) = <VmCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(AdminTestCalls::Vm(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for AdminTestCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                AdminTestCalls::IsTest(element) => element.encode(),
                AdminTestCalls::Bound(element) => element.encode(),
                AdminTestCalls::DealWithToken(element) => element.encode(),
                AdminTestCalls::DealWithTokenAndAdjust(element) => element.encode(),
                AdminTestCalls::Deal(element) => element.encode(),
                AdminTestCalls::DeployCodeWithArgs(element) => element.encode(),
                AdminTestCalls::DeployCode(element) => element.encode(),
                AdminTestCalls::Failed(element) => element.encode(),
                AdminTestCalls::Hoax0(element) => element.encode(),
                AdminTestCalls::Hoax2(element) => element.encode(),
                AdminTestCalls::Hoax3(element) => element.encode(),
                AdminTestCalls::Hoax4(element) => element.encode(),
                AdminTestCalls::Rewind(element) => element.encode(),
                AdminTestCalls::SetUp(element) => element.encode(),
                AdminTestCalls::Skip(element) => element.encode(),
                AdminTestCalls::StartHoax1(element) => element.encode(),
                AdminTestCalls::StartHoax2(element) => element.encode(),
                AdminTestCalls::StartHoax0(element) => element.encode(),
                AdminTestCalls::StartHoax4(element) => element.encode(),
                AdminTestCalls::TestMaxFeePctChange(element) => element.encode(),
                AdminTestCalls::TestThresholdChange(element) => element.encode(),
                AdminTestCalls::TestTokenWhitelist(element) => element.encode(),
                AdminTestCalls::Tip(element) => element.encode(),
                AdminTestCalls::Vm(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for AdminTestCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                AdminTestCalls::IsTest(element) => element.fmt(f),
                AdminTestCalls::Bound(element) => element.fmt(f),
                AdminTestCalls::DealWithToken(element) => element.fmt(f),
                AdminTestCalls::DealWithTokenAndAdjust(element) => element.fmt(f),
                AdminTestCalls::Deal(element) => element.fmt(f),
                AdminTestCalls::DeployCodeWithArgs(element) => element.fmt(f),
                AdminTestCalls::DeployCode(element) => element.fmt(f),
                AdminTestCalls::Failed(element) => element.fmt(f),
                AdminTestCalls::Hoax0(element) => element.fmt(f),
                AdminTestCalls::Hoax2(element) => element.fmt(f),
                AdminTestCalls::Hoax3(element) => element.fmt(f),
                AdminTestCalls::Hoax4(element) => element.fmt(f),
                AdminTestCalls::Rewind(element) => element.fmt(f),
                AdminTestCalls::SetUp(element) => element.fmt(f),
                AdminTestCalls::Skip(element) => element.fmt(f),
                AdminTestCalls::StartHoax1(element) => element.fmt(f),
                AdminTestCalls::StartHoax2(element) => element.fmt(f),
                AdminTestCalls::StartHoax0(element) => element.fmt(f),
                AdminTestCalls::StartHoax4(element) => element.fmt(f),
                AdminTestCalls::TestMaxFeePctChange(element) => element.fmt(f),
                AdminTestCalls::TestThresholdChange(element) => element.fmt(f),
                AdminTestCalls::TestTokenWhitelist(element) => element.fmt(f),
                AdminTestCalls::Tip(element) => element.fmt(f),
                AdminTestCalls::Vm(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<IsTestCall> for AdminTestCalls {
        fn from(var: IsTestCall) -> Self {
            AdminTestCalls::IsTest(var)
        }
    }
    impl ::std::convert::From<BoundCall> for AdminTestCalls {
        fn from(var: BoundCall) -> Self {
            AdminTestCalls::Bound(var)
        }
    }
    impl ::std::convert::From<DealWithTokenCall> for AdminTestCalls {
        fn from(var: DealWithTokenCall) -> Self {
            AdminTestCalls::DealWithToken(var)
        }
    }
    impl ::std::convert::From<DealWithTokenAndAdjustCall> for AdminTestCalls {
        fn from(var: DealWithTokenAndAdjustCall) -> Self {
            AdminTestCalls::DealWithTokenAndAdjust(var)
        }
    }
    impl ::std::convert::From<DealCall> for AdminTestCalls {
        fn from(var: DealCall) -> Self {
            AdminTestCalls::Deal(var)
        }
    }
    impl ::std::convert::From<DeployCodeWithArgsCall> for AdminTestCalls {
        fn from(var: DeployCodeWithArgsCall) -> Self {
            AdminTestCalls::DeployCodeWithArgs(var)
        }
    }
    impl ::std::convert::From<DeployCodeCall> for AdminTestCalls {
        fn from(var: DeployCodeCall) -> Self {
            AdminTestCalls::DeployCode(var)
        }
    }
    impl ::std::convert::From<FailedCall> for AdminTestCalls {
        fn from(var: FailedCall) -> Self {
            AdminTestCalls::Failed(var)
        }
    }
    impl ::std::convert::From<Hoax0Call> for AdminTestCalls {
        fn from(var: Hoax0Call) -> Self {
            AdminTestCalls::Hoax0(var)
        }
    }
    impl ::std::convert::From<Hoax2Call> for AdminTestCalls {
        fn from(var: Hoax2Call) -> Self {
            AdminTestCalls::Hoax2(var)
        }
    }
    impl ::std::convert::From<Hoax3Call> for AdminTestCalls {
        fn from(var: Hoax3Call) -> Self {
            AdminTestCalls::Hoax3(var)
        }
    }
    impl ::std::convert::From<Hoax4Call> for AdminTestCalls {
        fn from(var: Hoax4Call) -> Self {
            AdminTestCalls::Hoax4(var)
        }
    }
    impl ::std::convert::From<RewindCall> for AdminTestCalls {
        fn from(var: RewindCall) -> Self {
            AdminTestCalls::Rewind(var)
        }
    }
    impl ::std::convert::From<SetUpCall> for AdminTestCalls {
        fn from(var: SetUpCall) -> Self {
            AdminTestCalls::SetUp(var)
        }
    }
    impl ::std::convert::From<SkipCall> for AdminTestCalls {
        fn from(var: SkipCall) -> Self {
            AdminTestCalls::Skip(var)
        }
    }
    impl ::std::convert::From<StartHoax1Call> for AdminTestCalls {
        fn from(var: StartHoax1Call) -> Self {
            AdminTestCalls::StartHoax1(var)
        }
    }
    impl ::std::convert::From<StartHoax2Call> for AdminTestCalls {
        fn from(var: StartHoax2Call) -> Self {
            AdminTestCalls::StartHoax2(var)
        }
    }
    impl ::std::convert::From<StartHoax0Call> for AdminTestCalls {
        fn from(var: StartHoax0Call) -> Self {
            AdminTestCalls::StartHoax0(var)
        }
    }
    impl ::std::convert::From<StartHoax4Call> for AdminTestCalls {
        fn from(var: StartHoax4Call) -> Self {
            AdminTestCalls::StartHoax4(var)
        }
    }
    impl ::std::convert::From<TestMaxFeePctChangeCall> for AdminTestCalls {
        fn from(var: TestMaxFeePctChangeCall) -> Self {
            AdminTestCalls::TestMaxFeePctChange(var)
        }
    }
    impl ::std::convert::From<TestThresholdChangeCall> for AdminTestCalls {
        fn from(var: TestThresholdChangeCall) -> Self {
            AdminTestCalls::TestThresholdChange(var)
        }
    }
    impl ::std::convert::From<TestTokenWhitelistCall> for AdminTestCalls {
        fn from(var: TestTokenWhitelistCall) -> Self {
            AdminTestCalls::TestTokenWhitelist(var)
        }
    }
    impl ::std::convert::From<TipCall> for AdminTestCalls {
        fn from(var: TipCall) -> Self {
            AdminTestCalls::Tip(var)
        }
    }
    impl ::std::convert::From<VmCall> for AdminTestCalls {
        fn from(var: VmCall) -> Self {
            AdminTestCalls::Vm(var)
        }
    }
}
