pub use deployscript_mod::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod deployscript_mod {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "DeployScript was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static DEPLOYSCRIPT_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            serde_json :: from_str ("[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"run\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"vm\",\"outputs\":[{\"internalType\":\"contract Vm\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static DEPLOYSCRIPT_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x608060405234801561001057600080fd5b5061294e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80633a7684631461003b578063c040622614610072575b600080fd5b610056737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b03909116815260200160405180910390f35b61007a61007c565b005b60408051637fb5297f60e01b815290516101f491737109709ecfa91a80626ff3989d68f67f5b1dd12d91637fb5297f9160048082019260009290919082900301818387803b1580156100cd57600080fd5b505af11580156100e1573d6000803e3d6000fd5b5050505060006040516100f3906101ba565b604051809103906000f08015801561010f573d6000803e3d6000fd5b5090508181604051610120906101c7565b9182526001600160a01b03166020820152604001604051809103906000f080158015610150573d6000803e3d6000fd5b505060408051633b756e9b60e11b81529051737109709ecfa91a80626ff3989d68f67f5b1dd12d916376eadd3691600480830192600092919082900301818387803b15801561019e57600080fd5b505af11580156101b2573d6000803e3d6000fd5b505050505050565b610de7806101d583390190565b61195d80610fbc8339019056fe608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76908290a350601960049081553360009081526003602052604090819020805460ff19166001179055905490517fa2e09ae7caa0e84bcfe806d931934b92bf11ce67ffcaa3033af9a1e031996951916100a89190815260200190565b60405180910390a1610d28806100bf6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638945bd281161008c578063af5899fc11610066578063af5899fc14610202578063c70a900f14610215578063daf9c21014610248578063fc361c381461026b57600080fd5b80638945bd28146101515780638da5cb5b146101645780639d8669851461018f57600080fd5b806307de99f6146100d45780630ffb1d8b146100fa57806313af40351461010f578063329e53be14610122578063391fe4e21461013557806384bfabcf1461013e575b600080fd5b6100e76100e2366004610ad9565b61027e565b6040519081526020015b60405180910390f35b61010d610108366004610b1e565b61028f565b005b61010d61011d366004610b51565b610322565b61010d610130366004610b1e565b610397565b6100e760045481565b6100e761014c366004610b73565b610419565b61010d61015f366004610ad9565b61043e565b600054610177906001600160a01b031681565b6040516001600160a01b0390911681526020016100f1565b6101ef61019d366004610ad9565b60016020819052600091825260409091208054918101546002820154600383015460048401546005909401546001600160a01b0395861695938416949390921692909160ff8082169161010090041687565b6040516100f19796959493929190610bd4565b61010d610210366004610b73565b6104a3565b610238610223366004610b51565b60036020526000908152604090205460ff1681565b60405190151581526020016100f1565b610238610256366004610b51565b60026020526000908152604090205460ff1681565b61010d610279366004610c3a565b6106fe565b600061028982610962565b92915050565b6000546001600160a01b031633146102c25760405162461bcd60e51b81526004016102b990610c5d565b60405180910390fd5b6001600160a01b038216600081815260026020908152604091829020805460ff191685151590811790915591519182527fef81a9943b96c8df4ef243401c9bf5159146166211356898b52d382086168d9291015b60405180910390a25050565b6000546001600160a01b0316331461034c5760405162461bcd60e51b81526004016102b990610c5d565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a350565b6000546001600160a01b031633146103c15760405162461bcd60e51b81526004016102b990610c5d565b6001600160a01b038216600081815260036020908152604091829020805460ff191685151590811790915591519182527f8cc72bec7e2cf5979aefd933f40a28eb590098d522a5c458e497e71c5e6fa90f9101610316565b60008061042583610962565b9050610434868686868561097e565b9695505050505050565b6000546001600160a01b031633146104685760405162461bcd60e51b81526004016102b990610c5d565b60048190556040518181527fa2e09ae7caa0e84bcfe806d931934b92bf11ce67ffcaa3033af9a1e0319969519060200160405180910390a150565b6001600160a01b03821660009081526002602052604090205460ff166104e75760405163010d7e6160e11b81526001600160a01b03831660048201526024016102b9565b60006104f282610962565b90506000610503868686868661097e565b90506001600082815260016020526040902060050154610100900460ff16600281111561053257610532610bbe565b036105535760405163d5e880e960e01b8152600481018290526024016102b9565b60006040518060e00160405280886001600160a01b03168152602001876001600160a01b03168152602001866001600160a01b03168152602001858152602001848152602001600015158152602001600160028111156105b5576105b5610bbe565b9052600083815260016020818152604092839020845181546001600160a01b03199081166001600160a01b03928316178355928601519382018054841694821694909417909355928401516002808501805490931691909316179055606083015160038301556080830151600483015560a083015160058301805460ff198116921515928317825560c0860151959650869593919261ffff1990911661ff0019909116179061010090849081111561066f5761066f610bbe565b021790555061068c9150506001600160a01b0386168730866109d1565b6106a16001600160a01b0386163330876109d1565b604080516001600160a01b038781168252602082018790529181018590528188169189169084907fb10e0c42d0d8cd4a999f95c50d18109fb205fdf5e55a8ed89121cab7f9f65f699060600160405180910390a450505050505050565b3360009081526003602052604090205460ff1661072e576040516314e9dd3960e31b815260040160405180910390fd5b6000828152600160208181526040808420815160e08101835281546001600160a01b03908116825294820154851693810193909352600280820154909416918301919091526003810154606083015260048101546080830152600581015460ff808216151560a08501529293919260c085019261010090920416908111156107b8576107b8610bbe565b60028111156107c9576107c9610bbe565b905250905060028160c0015160028111156107e6576107e6610bbe565b036108075760405163b677167760e01b8152600481018490526024016102b9565b81156108415780516060820151608083015161083c929161082791610c99565b60408401516001600160a01b03169190610a5b565b61085d565b61085d8160200151826060015183608001516108279190610c99565b600260c0820181815283151560a08401908152600086815260016020818152604092839020875181546001600160a01b039182166001600160a01b0319918216178355928901519382018054948216948416949094179093559287015183870180549190931691161790556060850151600382015560808501516004820155905160058201805491151560ff198316811782559351869593949093919261ff001990911661ffff19909116179061010090849081111561091f5761091f610bbe565b02179055505060405183151581528491507fdbed7580b9c2829ee6b384e3833f10b16f9885601c98a01c40fd705b543e9c669060200160405180910390a2505050565b60006064600454836109749190610cb1565b6102899190610cd0565b604080516001600160a01b0396871660208083019190915295871681830152939095166060840152608083019190915260a0808301919091528351808303909101815260c0909101909252815191012090565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d1160016000511416171691505080610a545760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b60448201526064016102b9565b5050505050565b600060405163a9059cbb60e01b8152836004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080610ad35760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b60448201526064016102b9565b50505050565b600060208284031215610aeb57600080fd5b5035919050565b80356001600160a01b0381168114610b0957600080fd5b919050565b80358015158114610b0957600080fd5b60008060408385031215610b3157600080fd5b610b3a83610af2565b9150610b4860208401610b0e565b90509250929050565b600060208284031215610b6357600080fd5b610b6c82610af2565b9392505050565b60008060008060808587031215610b8957600080fd5b610b9285610af2565b9350610ba060208601610af2565b9250610bae60408601610af2565b9396929550929360600135925050565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b038881168252878116602083015286166040820152606081018590526080810184905282151560a082015260e0810160038310610c2857634e487b7160e01b600052602160045260246000fd5b8260c083015298975050505050505050565b60008060408385031215610c4d57600080fd5b82359150610b4860208401610b0e565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115610cac57610cac610c83565b500190565b6000816000190483118215151615610ccb57610ccb610c83565b500290565b600082610ced57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220a086d5378c38188b517141b491168433bcacdd1ef66aa0a3a08acd1fabd82c2a64736f6c634300080f003360a060405260018055600060025534801561001957600080fd5b5060405161195d38038061195d83398101604081905261003891610106565b600080546001600160a01b031916339081178255604051909182917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76908290a3506001600160a01b03811660805260038290556040518281527fcf29a5174acb8c175d760a7381ffc52c6ae644e3a4ba3fa7e01344f959cd76159060200160405180910390a16703782dace9d9000060048190556040519081527f841095ec206e4a3d8124f54a431661bd653b296066d7d695baaa9178e9d21bb49060200160405180910390a15050610143565b6000806040838503121561011957600080fd5b825160208401519092506001600160a01b038116811461013857600080fd5b809150509250929050565b6080516117e361017a6000396000818161021601528181610425015281816104ef01528181610548015261060201526117e36000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80635881266d116100a2578063bd20a85911610071578063bd20a85914610276578063cd805d5e14610289578063daf9c21014610292578063e02c0279146102c5578063fc711c3a146102d857600080fd5b80635881266d146101fe5780637dc0d1d0146102115780638da5cb5b146102505780639170c05b1461026357600080fd5b806313af4035116100de57806313af4035146101675780632613f3071461017a57806329d56bc01461018d5780632d4d9a63146101a057600080fd5b806308ef3d44146101105780630ff0c00e146101255780630ffb1d8b1461014157806310f40e6a14610154575b600080fd5b61012361011e36600461140f565b6102e1565b005b61012e60035481565b6040519081526020015b60405180910390f35b61012361014f366004611450565b6105b1565b6101236101623660046114c9565b6106f7565b61012361017536600461154b565b610757565b61012361018836600461156d565b6107cc565b61012361019b366004611586565b610832565b6101d96101ae36600461156d565b6006602052600090815260409020805460018201546002909201546001600160a01b03909116919083565b604080516001600160a01b039094168452602084019290925290820152606001610138565b61012361020c3660046115bf565b6108b5565b6102387f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610138565b600054610238906001600160a01b031681565b610123610271366004611627565b61095d565b61012361028436600461156d565b610b0a565b61012e60025481565b6102b56102a036600461154b565b60056020526000908152604090205460ff1681565b6040519015158152602001610138565b6101236102d336600461167e565b610b91565b61012e60045481565b6001546001146103255760405162461bcd60e51b815260206004820152600a6024820152695245454e5452414e435960b01b60448201526064015b60405180910390fd5b600260015561033381610cf5565b61035357604051631acc120960e11b81526004810182905260240161031c565b600081815260066020908152604091829020825160608101845281546001600160a01b0316815260018201549281019290925260020154918101829052600354909161039f90436116f3565b106103bd57604051632c02744560e11b815260040160405180910390fd5b602081810151825160008581526006909352604080842080546001600160a01b031916815560018101859055600201849055516384bfabcf60e01b81526001600160a01b038083166004830152336024830152888116604483015260648201849052929391927f000000000000000000000000000000000000000000000000000000000000000016906384bfabcf90608401602060405180830381865afa15801561046c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610490919061170a565b90508085836001600160a01b03167fc293ada1a20d5f6111738a64aec9c7262db402de1650b576e691e321964bb01e868a6040516104d8929190918252602082015260400190565b60405180910390a46105146001600160a01b0388167f000000000000000000000000000000000000000000000000000000000000000085610d36565b604051632bd6267f60e21b81526001600160a01b0383811660048301523360248301528881166044830152606482018590527f0000000000000000000000000000000000000000000000000000000000000000169063af5899fc90608401600060405180830381600087803b15801561058c57600080fd5b505af11580156105a0573d6000803e3d6000fd5b505060018055505050505050505050565b6000546001600160a01b031633146105db5760405162461bcd60e51b815260040161031c90611723565b80801561066f5750604051630daf9c2160e41b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063daf9c21090602401602060405180830381865afa158015610649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066d9190611749565b155b15610698576040516313c42eef60e21b81526001600160a01b038316600482015260240161031c565b6001600160a01b038216600081815260056020908152604091829020805460ff191685151590811790915591519182527fef81a9943b96c8df4ef243401c9bf5159146166211356898b52d382086168d92910160405180910390a25050565b6107048487858585610db3565b61070f878787610f1a565b60408051848152602081018790524391889133917f970202b118cfe4d540f3c2eac57995322281324b625e43838fb87e30e0753b9e910160405180910390a450505050505050565b6000546001600160a01b031633146107815760405162461bcd60e51b815260040161031c90611723565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a350565b6000546001600160a01b031633146107f65760405162461bcd60e51b815260040161031c90611723565b60038190556040518181527fcf29a5174acb8c175d760a7381ffc52c6ae644e3a4ba3fa7e01344f959cd7615906020015b60405180910390a150565b6000828152600660205260409020600201541561086557604051638b6bbbad60e01b81526004810183905260240161031c565b610870848383610f1a565b60408051848152602081018390524391849133917f970202b118cfe4d540f3c2eac57995322281324b625e43838fb87e30e0753b9e910160405180910390a450505050565b6004548411156108db576040516305bf279d60e41b81526004810185905260240161031c565b6108e483610cf5565b1561090557604051638b6bbbad60e01b81526004810184905260240161031c565b6109128584868585610db3565b82856001600160a01b03167f6ab91dbc42f726b630639350395426be048c50255f12e82d28e2dffac41745938660405161094e91815260200190565b60405180910390a35050505050565b6001600160a01b03851660009081526005602052604090205460ff166109a15760405163f602627d60e01b81526001600160a01b038616600482015260240161031c565b6001600160a01b03841660009081526005602052604090205460ff166109e55760405163f602627d60e01b81526001600160a01b038516600482015260240161031c565b836001600160a01b0316856001600160a01b031603610a1757604051631d2792fb60e31b815260040160405180910390fd5b600454821115610a3d576040516305bf279d60e41b81526004810183905260240161031c565b82600003610a5e5760405163abc5ee6f60e01b815260040160405180910390fd5b6001600160a01b038116610a8557604051631feef77d60e01b815260040160405180910390fd5b610a9a6001600160a01b038616333086610f80565b60025460408051858152602081018590526001600160a01b03848116828401529151878316928916917f7361c265d28ece9d5df249995186533440e0b7a1310ae54d496fa1783056e3da919081900360600190a460028054906000610afe83611766565b91905055505050505050565b6000546001600160a01b03163314610b345760405162461bcd60e51b815260040161031c90611723565b670de0b6b3a76400008110610b5c57604051636a143fdd60e11b815260040160405180910390fd5b60048190556040518181527f841095ec206e4a3d8124f54a431661bd653b296066d7d695baaa9178e9d21bb490602001610827565b610b9a81610cf5565b610bba57604051631acc120960e11b81526004810182905260240161031c565b600081815260066020908152604091829020825160608101845281546001600160a01b03168152600182015492810192909252600201549181018290526003549091610c0690436116f3565b1015610c4a576000816040015143610c1e91906116f3565b600354610c2b91906116f3565b9050806040516325797e0360e11b815260040161031c91815260200190565b6020808201518251600085815260069093526040832080546001600160a01b0319168155600181018490556002019290925590610c916001600160a01b038916868461100a565b610ca56001600160a01b038a16828961100a565b8184826001600160a01b03167f3281f74a3f7405b6bd35e9687b3fcaaf242c466ac789d117f22b62b140af8dcc89604051610ce291815260200190565b60405180910390a4505050505050505050565b600090815260066020908152604091829020825160608101845281546001600160a01b03168152600182015492810192909252600201549101819052151590565b600060405163095ea7b360e01b8152836004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080610dad5760405162461bcd60e51b815260206004820152600e60248201526d1054141493d59157d1905253115160921b604482015260640161031c565b50505050565b600454831115610dd9576040516305bf279d60e41b81526004810184905260240161031c565b610de284610cf5565b15610e0357604051638b6bbbad60e01b81526004810185905260240161031c565b604080517f0efb9dda140a951df4393d44ca40349032d31811466afd20eacd4b4136c3f4986020808301919091528183018790526060808301879052835180840390910181526080830184528051908201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000060a084015260bc8084018290528451808503909101815260dc90930190935281519101206000610edc8286868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061108292505050565b9050876001600160a01b0316816001600160a01b031614610f10576040516324a0dbd760e21b815260040160405180910390fd5b5050505050505050565b60408051606081018252338082526020808301858152438486019081526000888152600690935294909120835181546001600160a01b0319166001600160a01b039182161782559151600182015593516002909401939093559091610dad919086169030855b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d11600160005114161716915050806110035760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b604482015260640161031c565b5050505050565b600060405163a9059cbb60e01b8152836004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080610dad5760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b604482015260640161031c565b600080600061109185856110a6565b9150915061109e81611114565b509392505050565b60008082516041036110dc5760208301516040840151606085015160001a6110d0878285856112cd565b9450945050505061110d565b825160400361110557602083015160408401516110fa8683836113ba565b93509350505061110d565b506000905060025b9250929050565b60008160048111156111285761112861177f565b036111305750565b60018160048111156111445761114461177f565b036111915760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161031c565b60028160048111156111a5576111a561177f565b036111f25760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161031c565b60038160048111156112065761120661177f565b0361125e5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161031c565b60048160048111156112725761127261177f565b036112ca5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161031c565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561130457506000905060036113b1565b8460ff16601b1415801561131c57508460ff16601c14155b1561132d57506000905060046113b1565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611381573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166113aa576000600192509250506113b1565b9150600090505b94509492505050565b6000806001600160ff1b038316816113d760ff86901c601b611795565b90506113e5878288856112cd565b935093505050935093915050565b80356001600160a01b038116811461140a57600080fd5b919050565b60008060006060848603121561142457600080fd5b61142d846113f3565b95602085013595506040909401359392505050565b80151581146112ca57600080fd5b6000806040838503121561146357600080fd5b61146c836113f3565b9150602083013561147c81611442565b809150509250929050565b60008083601f84011261149957600080fd5b50813567ffffffffffffffff8111156114b157600080fd5b60208301915083602082850101111561110d57600080fd5b600080600080600080600060c0888a0312156114e457600080fd5b6114ed886113f3565b96506020880135955060408801359450611509606089016113f3565b93506080880135925060a088013567ffffffffffffffff81111561152c57600080fd5b6115388a828b01611487565b989b979a50959850939692959293505050565b60006020828403121561155d57600080fd5b611566826113f3565b9392505050565b60006020828403121561157f57600080fd5b5035919050565b6000806000806080858703121561159c57600080fd5b6115a5856113f3565b966020860135965060408601359560600135945092505050565b6000806000806000608086880312156115d757600080fd5b6115e0866113f3565b94506020860135935060408601359250606086013567ffffffffffffffff81111561160a57600080fd5b61161688828901611487565b969995985093965092949392505050565b600080600080600060a0868803121561163f57600080fd5b611648866113f3565b9450611656602087016113f3565b93506040860135925060608601359150611672608087016113f3565b90509295509295909350565b60008060008060008060c0878903121561169757600080fd5b6116a0876113f3565b95506116ae602088016113f3565b945060408701359350606087013592506116ca608088016113f3565b915060a087013590509295509295509295565b634e487b7160e01b600052601160045260246000fd5b600082821015611705576117056116dd565b500390565b60006020828403121561171c57600080fd5b5051919050565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b60006020828403121561175b57600080fd5b815161156681611442565b600060018201611778576117786116dd565b5060010190565b634e487b7160e01b600052602160045260246000fd5b600082198211156117a8576117a86116dd565b50019056fea2646970667358221220b41ca7110c27843c888fd86833e8f4658e46a22feba9517f56d8855f80a64b5264736f6c634300080f0033a2646970667358221220f25b632d3c47cb8aa2f899eff272062d8e2f47e1cd6cb3c2e6b8e8fe48d13d6f64736f6c634300080f0033" . parse () . expect ("invalid bytecode")
        });
    pub struct DeployScript<M>(ethers::contract::Contract<M>);
    impl<M> Clone for DeployScript<M> {
        fn clone(&self) -> Self {
            DeployScript(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for DeployScript<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for DeployScript<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(DeployScript))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> DeployScript<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), DEPLOYSCRIPT_ABI.clone(), client).into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                DEPLOYSCRIPT_ABI.clone(),
                DEPLOYSCRIPT_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `run` (0xc0406226) function"]
        pub fn run(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([192, 64, 98, 38], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `vm` (0x3a768463) function"]
        pub fn vm(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([58, 118, 132, 99], ())
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for DeployScript<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[doc = "Container type for all input parameters for the `run`function with signature `run()` and selector `[192, 64, 98, 38]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "run", abi = "run()")]
    pub struct RunCall;
    #[doc = "Container type for all input parameters for the `vm`function with signature `vm()` and selector `[58, 118, 132, 99]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "vm", abi = "vm()")]
    pub struct VmCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum DeployScriptCalls {
        Run(RunCall),
        Vm(VmCall),
    }
    impl ethers::core::abi::AbiDecode for DeployScriptCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) = <RunCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(DeployScriptCalls::Run(decoded));
            }
            if let Ok(decoded) = <VmCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(DeployScriptCalls::Vm(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for DeployScriptCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                DeployScriptCalls::Run(element) => element.encode(),
                DeployScriptCalls::Vm(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for DeployScriptCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                DeployScriptCalls::Run(element) => element.fmt(f),
                DeployScriptCalls::Vm(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<RunCall> for DeployScriptCalls {
        fn from(var: RunCall) -> Self {
            DeployScriptCalls::Run(var)
        }
    }
    impl ::std::convert::From<VmCall> for DeployScriptCalls {
        fn from(var: VmCall) -> Self {
            DeployScriptCalls::Vm(var)
        }
    }
}
