pub use trade_fixture::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod trade_fixture {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "TradeFixture was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static TRADEFIXTURE_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            ethers :: core :: utils :: __serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxFeePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"MaxFeePctChanged\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSafeBlockThreshold\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"SafeBlockThresholdChanged\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TokenWhitelisted\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"disputeId\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"filledAmount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TradeDisputed\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TradeFilled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"TradeRequested\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"filledAmount\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TradeSettled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"newFeePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"UpdatedFeeForTrade\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"msg\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"WARNING_Deprecated\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"logs\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"bound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deal\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"adjust\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deal\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deal\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"what\",\"type\":\"string\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deployCode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"what\",\"type\":\"string\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deployCode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"rewind\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setUp\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"skip\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"tip\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"vm\",\"outputs\":[{\"internalType\":\"contract Vm\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static TRADEFIXTURE_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x608060408190526000805460ff191660011790556001625e79b760e01b031990527f81376b9868b292a46a1c486d344e427a3088657fda629b5f4a647822d329cd6a608452737109709ecfa91a80626ff3989d68f67f5b1dd12d63ffa1864960a46020604051808303816000875af115801562000080573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000a69190620005e3565b600880546001600160a01b0319166001600160a01b03929092169190911790556040516001625e79b760e01b031981527f28cac318a86c8a0a6a9156c2dba2c8c2363677ba0514ef616592d81557e679b66004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa18649906024016020604051808303816000875af11580156200013b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001619190620005e3565b600980546001600160a01b0319166001600160a01b03929092169190911790556040516001625e79b760e01b031981527f9791f723bf26b668c8cac0664b66d058cdb2a424cfb08c05dd9da570be0eff6f6004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa18649906024016020604051808303816000875af1158015620001f6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200021c9190620005e3565b600a60006101000a8154816001600160a01b0302191690836001600160a01b03160217905550620002bb73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486040518060400160405280601a81526020017f546f6b656e466978747572652e736f6c3a4d6f636b546f6b656e0000000000008152506006604051602001620002a591906200060e565b60408051601f198184030181529190526200040c565b600b60006101000a8154816001600160a01b0302191690836001600160a01b031602179055506200038c73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26040518060400160405280601a81526020017f546f6b656e466978747572652e736f6c3a4d6f636b546f6b656e0000000000008152506012604051602001620002a591906060808252600d908201526c2bb930b83832b21022ba3432b960991b608082015260a060208201819052600490820152630ae8aa8960e31b60c082015260ff91909116604082015260e00190565b600c80546001600160a01b039283166001600160a01b031991821681179092556064600f55601080548216909217909155600b54601180548316918416919091179055662386f26fc10000601255670de0b6b3a7640000601355600a546014805490921692169190911790553480156200040557600080fd5b50620007eb565b60006001600160a01b0384163b80156200042a5784915050620004a8565b6000620004388585620004af565b9050806001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000479573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620004a391908101906200072e565b509150505b9392505050565b604051638d1cc92560e01b81526000908190737109709ecfa91a80626ff3989d68f67f5b1dd12d90638d1cc92590620004ed90879060040162000783565b6000604051808303816000875af11580156200050d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200053791908101906200072e565b836040516020016200054b929190620007b8565b60405160208183030381529060405290508051602082016000f091506001600160a01b038216620005dc5760405162461bcd60e51b815260206004820152603160248201527f54657374206465706c6f79436f646528737472696e672c6279746573293a204460448201527032b83637bcb6b2b73a103330b4b632b21760791b606482015260840160405180910390fd5b5092915050565b600060208284031215620005f657600080fd5b81516001600160a01b0381168114620004a857600080fd5b606081526000620006336060830160048152635553444360e01b602082015260400190565b8281036020840152620006578160048152635553444360e01b602082015260400190565b91505060ff8316604083015292915050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200069c57818101518382015260200162000682565b83811115620006ac576000848401525b50505050565b60006001600160401b0380841115620006cf57620006cf62000669565b604051601f8501601f19908116603f01168101908282118183101715620006fa57620006fa62000669565b816040528093508581528686860111156200071457600080fd5b620007248660208301876200067f565b5050509392505050565b6000602082840312156200074157600080fd5b81516001600160401b038111156200075857600080fd5b8201601f810184136200076a57600080fd5b6200077b84825160208401620006b2565b949350505050565b6020815260008251806020840152620007a48160408501602087016200067f565b601f01601f19169190910160400192915050565b60008351620007cc8184602088016200067f565b835190830190620007e28183602088016200067f565b01949350505050565b61645c80620007fb6000396000f3fe60806040523480156200001157600080fd5b5060043610620001515760003560e01c80636f59707511620000c7578063ba414fa61162000086578063ba414fa614620002d0578063c88a5e6d14620002eb578063d06d82291462000302578063d82555f11462000319578063e9a79a7b1462000330578063fa7626d4146200034757600080fd5b80636f597075146200025d57806397754ae914620002745780639a8325a0146200028b578063af9bbe5f14620002a2578063b9c071b414620002b957600080fd5b80632d6c17a311620001145780632d6c17a314620001db5780633a76846314620001f25780633bf82db114620002095780635a6c1eed14620002205780636bce989b146200024657600080fd5b80630a9254e41462000156578063108554f21462000162578063233240ee146200017957806329a9e300146200019057806329ce9dde14620001a7575b600080fd5b6200016062000355565b005b6200016062000173366004620034b9565b62000ac5565b620001606200018a366004620034e6565b62000b9e565b62000160620001a13660046200350b565b62000c7a565b620001be620001b83660046200361e565b62000d2c565b6040516001600160a01b0390911681526020015b60405180910390f35b62000160620001ec3660046200369e565b62000e5c565b620001be600080516020620063e783398151915281565b620001606200021a366004620036b8565b62000e9c565b6200023762000231366004620036f9565b62000f7e565b604051908152602001620001d2565b6200016062000257366004620036b8565b620010b7565b620001606200026e366004620034e6565b620010cb565b620001606200028536600462003735565b62001175565b620001be6200029c3660046200378b565b620013b6565b62000160620002b3366004620036b8565b620014b8565b62000160620002ca3660046200369e565b62001566565b620002da62001587565b6040519015158152602001620001d2565b62000160620002fc366004620034b9565b620016b8565b62000160620003133660046200350b565b620016ee565b620001606200032a366004620036b8565b620017a0565b6200016062000341366004620034b9565b62001851565b600054620002da9060ff1681565b6200035f620018f7565b600e54600b54604051630ffb1d8b60e01b81526001600160a01b03918216600482015260016024820152911690630ffb1d8b90604401600060405180830381600087803b158015620003b057600080fd5b505af1158015620003c5573d6000803e3d6000fd5b5050600e54600c54604051630ffb1d8b60e01b81526001600160a01b0391821660048201526001602482015291169250630ffb1d8b9150604401600060405180830381600087803b1580156200041a57600080fd5b505af11580156200042f573d6000803e3d6000fd5b5050600b54604080516318caf8e360e31b81526001600160a01b0390921660048084019190915260248301919091526044820152635553444360e01b6064820152600080516020620063e7833981519152925063c657c7189150608401600060405180830381600087803b158015620004a757600080fd5b505af1158015620004bc573d6000803e3d6000fd5b5050600c54604080516318caf8e360e31b81526001600160a01b0390921660048084019190915260248301919091526044820152630ae8aa8960e31b6064820152600080516020620063e7833981519152925063c657c7189150608401600060405180830381600087803b1580156200053457600080fd5b505af115801562000549573d6000803e3d6000fd5b50506008546040516303223eab60e11b81526001600160a01b039091166004820152600080516020620063e783398151915292506306447d569150602401600060405180830381600087803b158015620005a257600080fd5b505af1158015620005b7573d6000803e3d6000fd5b5050600b54600e5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b39350620005f6929091169060001990600401620037cc565b6020604051808303816000875af115801562000616573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200063c9190620037e5565b50600c54600e5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392620006779291169060001990600401620037cc565b6020604051808303816000875af115801562000697573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006bd9190620037e5565b50604080516390c5013b60e01b81529051600080516020620063e7833981519152916390c5013b91600480830192600092919082900301818387803b1580156200070657600080fd5b505af11580156200071b573d6000803e3d6000fd5b50506009546040516303223eab60e11b81526001600160a01b039091166004820152600080516020620063e783398151915292506306447d569150602401600060405180830381600087803b1580156200077457600080fd5b505af115801562000789573d6000803e3d6000fd5b5050600b54600e5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b39350620007c8929091169060001990600401620037cc565b6020604051808303816000875af1158015620007e8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200080e9190620037e5565b50600c54600e5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392620008499291169060001990600401620037cc565b6020604051808303816000875af115801562000869573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200088f9190620037e5565b50604080516390c5013b60e01b81529051600080516020620063e7833981519152916390c5013b91600480830192600092919082900301818387803b158015620008d857600080fd5b505af1158015620008ed573d6000803e3d6000fd5b5050600a546040516303223eab60e11b81526001600160a01b039091166004820152600080516020620063e783398151915292506306447d569150602401600060405180830381600087803b1580156200094657600080fd5b505af11580156200095b573d6000803e3d6000fd5b5050600b54600e5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b393506200099a929091169060001990600401620037cc565b6020604051808303816000875af1158015620009ba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009e09190620037e5565b50600c54600e5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39262000a1b9291169060001990600401620037cc565b6020604051808303816000875af115801562000a3b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a619190620037e5565b50604080516390c5013b60e01b81529051600080516020620063e7833981519152916390c5013b91600480830192600092919082900301818387803b15801562000aaa57600080fd5b505af115801562000abf573d6000803e3d6000fd5b50505050565b60405163c88a5e6d60e01b8152600080516020620063e78339815191529063c88a5e6d9062000afb9085908590600401620037cc565b600060405180830381600087803b15801562000b1657600080fd5b505af115801562000b2b573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b0385166004820152600080516020620063e783398151915292506306447d5691506024015b600060405180830381600087803b15801562000b8157600080fd5b505af115801562000b96573d6000803e3d6000fd5b505050505050565b60405163c88a5e6d60e01b8152600080516020620063e78339815191529063c88a5e6d9062000bd8908490600160801b90600401620037cc565b600060405180830381600087803b15801562000bf357600080fd5b505af115801562000c08573d6000803e3d6000fd5b505060405163ca669fa760e01b81526001600160a01b0384166004820152600080516020620063e7833981519152925063ca669fa791506024015b600060405180830381600087803b15801562000c5e57600080fd5b505af115801562000c73573d6000803e3d6000fd5b5050505050565b60405163c88a5e6d60e01b8152600080516020620063e78339815191529063c88a5e6d9062000cb4908590600160801b90600401620037cc565b600060405180830381600087803b15801562000ccf57600080fd5b505af115801562000ce4573d6000803e3d6000fd5b50506040516323f2866760e11b81526001600160a01b03808616600483015284166024820152600080516020620063e783398151915292506347e50cce915060440162000b66565b604051638d1cc92560e01b81526000908190600080516020620063e783398151915290638d1cc9259062000d6590879060040162003834565b6000604051808303816000875af115801562000d85573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000daf919081019062003869565b8360405160200162000dc3929190620038e9565b60405160208183030381529060405290508051602082016000f091506001600160a01b03821662000e555760405162461bcd60e51b815260206004820152603160248201527f54657374206465706c6f79436f646528737472696e672c6279746573293a204460448201527032b83637bcb6b2b73a103330b4b632b21760791b60648201526084015b60405180910390fd5b5092915050565b600080516020620063e783398151915263e5d6bf0262000e7d834262003932565b6040518263ffffffff1660e01b815260040162000c4391815260200190565b60405163c88a5e6d60e01b8152600080516020620063e78339815191529063c88a5e6d9062000ed29086908590600401620037cc565b600060405180830381600087803b15801562000eed57600080fd5b505af115801562000f02573d6000803e3d6000fd5b50506040516308b6ac0f60e31b81526001600160a01b03808716600483015285166024820152600080516020620063e783398151915292506345b5607891506044015b600060405180830381600087803b15801562000f6057600080fd5b505af115801562000f75573d6000803e3d6000fd5b50505050505050565b60008183111562000ff85760405162461bcd60e51b815260206004820152603a60248201527f5465737420626f756e642875696e743235362c75696e743235362c75696e743260448201527f3536293a204d6178206973206c657373207468616e206d696e2e000000000000606482015260840162000e4c565b600062001006848462003932565b9050806000036200101a578391506200105a565b60001981036200102d578491506200105a565b62001038816200394c565b9050600062001048828762003968565b90506200105681866200398b565b9250505b60408051818152600c818301526b109bdd5b990814995cdd5b1d60a21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1509392505050565b620010c6838383600062001175565b505050565b60405163c88a5e6d60e01b8152600080516020620063e78339815191529063c88a5e6d9062001105908490600160801b90600401620037cc565b600060405180830381600087803b1580156200112057600080fd5b505af115801562001135573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b0384166004820152600080516020620063e783398151915292506306447d56915060240162000c43565b604080516001600160a01b0385811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166370a0823160e01b1790529151600092871691620011cb91620039a6565b6000604051808303816000865af19150503d80600081146200120a576040519150601f19603f3d011682016040523d82523d6000602084013e6200120f565b606091505b509150506000818060200190518101906200122b9190620039c4565b90506200129d8462001296876200126d6370a0823160e01b6200125060018d620019dc565b9060038201805463ffffffff191660e09290921c91909117905590565b90600282018054600181018255600091825260209091206001600160a01b039290921691015590565b9062001a01565b821562000b965760408051600481526024810182526020810180516001600160e01b03166318160ddd60e01b17905290516000916001600160a01b03891691620012e89190620039a6565b6000604051808303816000865af19150503d806000811462001327576040519150601f19603f3d011682016040523d82523d6000602084013e6200132c565b606091505b50915050600081806020019051810190620013489190620039c4565b90508286101562001373576200135f868462003932565b6200136b908262003932565b90506200138e565b6200137f838762003932565b6200138b90826200398b565b90505b620013ac81620012966318160ddd60e01b6200125060018d620019dc565b5050505050505050565b604051638d1cc92560e01b81526000908190600080516020620063e783398151915290638d1cc92590620013ef90869060040162003834565b6000604051808303816000875af11580156200140f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001439919081019062003869565b90508051602082016000f091506001600160a01b038216620014b25760405162461bcd60e51b815260206004820152602b60248201527f54657374206465706c6f79436f646528737472696e67293a204465706c6f796d60448201526a32b73a103330b4b632b21760a91b606482015260840162000e4c565b50919050565b60405163c88a5e6d60e01b8152600080516020620063e78339815191529063c88a5e6d90620014ee9086908590600401620037cc565b600060405180830381600087803b1580156200150957600080fd5b505af11580156200151e573d6000803e3d6000fd5b50506040516323f2866760e11b81526001600160a01b03808716600483015285166024820152600080516020620063e783398151915292506347e50cce915060440162000f45565b600080516020620063e783398151915263e5d6bf0262000e7d83426200398b565b60008054610100900460ff1615620015a85750600054610100900460ff1690565b6000600080516020620063e78339815191523b15620016b357604051600090600080516020620063e7833981519152907f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc490620016159083906519985a5b195960d21b90602001620037cc565b60408051601f1981840301815290829052620016359291602001620039de565b60408051601f19818403018152908290526200165191620039a6565b6000604051808303816000865af19150503d806000811462001690576040519150601f19603f3d011682016040523d82523d6000602084013e62001695565b606091505b5091505080806020019051810190620016af9190620037e5565b9150505b919050565b60405163c88a5e6d60e01b8152600080516020620063e78339815191529063c88a5e6d9062000b669085908590600401620037cc565b60405163c88a5e6d60e01b8152600080516020620063e78339815191529063c88a5e6d9062001728908590600160801b90600401620037cc565b600060405180830381600087803b1580156200174357600080fd5b505af115801562001758573d6000803e3d6000fd5b50506040516308b6ac0f60e31b81526001600160a01b03808616600483015284166024820152600080516020620063e783398151915292506345b56078915060440162000b66565b7f42b963ace015abb7c727e77dec115c5f418f4f96d9ec897f85c202793274661a60405162001826906020808252603b908201527f54686520607469706020737464636865617420686173206265656e206465707260408201527f6563617465642e2055736520606465616c6020696e73746561642e0000000000606082015260800190565b60405180910390a1620010c68162001296846200126d6370a0823160e01b6200125060018a620019dc565b60405163c88a5e6d60e01b8152600080516020620063e78339815191529063c88a5e6d90620018879085908590600401620037cc565b600060405180830381600087803b158015620018a257600080fd5b505af1158015620018b7573d6000803e3d6000fd5b505060405163ca669fa760e01b81526001600160a01b0385166004820152600080516020620063e7833981519152925063ca669fa7915060240162000b66565b6200190162001a11565b600f54600d546040516001600160a01b0390911690620019219062003447565b9182526001600160a01b03166020820152604001604051809103906000f08015801562001952573d6000803e3d6000fd5b50600e80546001600160a01b0319166001600160a01b03929092169182179055604080516318caf8e360e31b81526004808201939093526024810191909152604481019190915263426f6f6b60e01b6064820152600080516020620063e78339815191529063c657c718906084015b600060405180830381600087803b15801562000aaa57600080fd5b6005820180546001600160a01b0319166001600160a01b039290921691909117905590565b62001a0d828262001fa3565b5050565b62001a1b6200239e565b60405162001a299062003455565b604051809103906000f08015801562001a46573d6000803e3d6000fd5b50600d80546001600160a01b0319166001600160a01b03929092169182179055604080516318caf8e360e31b815260048101929092526024820152601060448201526f416c6c4b6e6f77696e674f7261636c6560801b6064820152600080516020620063e78339815191529063c657c71890608401600060405180830381600087803b15801562001ad657600080fd5b505af115801562001aeb573d6000803e3d6000fd5b50506008546040516303223eab60e11b81526001600160a01b039091166004820152600080516020620063e783398151915292506306447d569150602401600060405180830381600087803b15801562001b4457600080fd5b505af115801562001b59573d6000803e3d6000fd5b5050600b54600d5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b3935062001b98929091169060001990600401620037cc565b6020604051808303816000875af115801562001bb8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001bde9190620037e5565b50600c54600d5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39262001c199291169060001990600401620037cc565b6020604051808303816000875af115801562001c39573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001c5f9190620037e5565b50604080516390c5013b60e01b81529051600080516020620063e7833981519152916390c5013b91600480830192600092919082900301818387803b15801562001ca857600080fd5b505af115801562001cbd573d6000803e3d6000fd5b50506009546040516303223eab60e11b81526001600160a01b039091166004820152600080516020620063e783398151915292506306447d569150602401600060405180830381600087803b15801562001d1657600080fd5b505af115801562001d2b573d6000803e3d6000fd5b5050600b54600d5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b3935062001d6a929091169060001990600401620037cc565b6020604051808303816000875af115801562001d8a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001db09190620037e5565b50600c54600d5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39262001deb9291169060001990600401620037cc565b6020604051808303816000875af115801562001e0b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001e319190620037e5565b50604080516390c5013b60e01b81529051600080516020620063e7833981519152916390c5013b91600480830192600092919082900301818387803b15801562001e7a57600080fd5b505af115801562001e8f573d6000803e3d6000fd5b5050600d54600b54604051630ffb1d8b60e01b81526001600160a01b0391821660048201526001602482015291169250630ffb1d8b9150604401600060405180830381600087803b15801562001ee457600080fd5b505af115801562001ef9573d6000803e3d6000fd5b5050600d54600c54604051630ffb1d8b60e01b81526001600160a01b0391821660048201526001602482015291169250630ffb1d8b9150604401600060405180830381600087803b15801562001f4e57600080fd5b505af115801562001f63573d6000803e3d6000fd5b5050600d54600a5460405163194f29df60e11b81526001600160a01b039182166004820152600160248201529116925063329e53be9150604401620019c1565b600582015460038301546004840154600285018054604080516020808402820181019092528281526001600160a01b039096169560e09590951b94600093909290918301828280156200201657602002820191906000526020600020905b81548152602001906001019080831162002001575b505050505090506000836200202b8362002588565b6040516020016200203e929190620039de565b60408051601f198184030181528282526001600160a01b038816600090815260018b0160209081528382206001600160e01b03198a1683528152928120919450909290916200209291869188910162003a11565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff16620020cd57620020cb8762002635565b505b6001600160a01b0385166000908152602088815260408083206001600160e01b03198816845282528083209051909183916200210e91879189910162003a11565b6040516020818303038152906040528051906020012081526020019081526020016000205460001b9050600080876001600160a01b031684604051620021559190620039a6565b600060405180830381855afa9150503d806000811462002192576040519150601f19603f3d011682016040523d82523d6000602084013e62002197565b606091505b509150620021b4905081620021ae88602062003a4d565b620033bd565b604051630667f9d760e41b815290925060009150600080516020620063e78339815191529063667f9d7090620021f1908b908790600401620037cc565b6020604051808303816000875af115801562002211573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620022379190620039c4565b9050808214620022ed5760405162461bcd60e51b815260206004820152606e60248201527f73746453746f726167652066696e642853746453746f72616765293a2050616360448201527f6b656420736c6f742e205468697320776f756c642063617573652064616e676560648201527f726f7573206f76657277726974696e6720616e642063757272656e746c79206960848201526d39b73a1039bab83837b93a32b21760911b60a482015260c40162000e4c565b6040516370ca10bb60e01b8152600080516020620063e7833981519152906370ca10bb9062002325908b9087908e9060040162003a6f565b600060405180830381600087803b1580156200234057600080fd5b505af115801562002355573d6000803e3d6000fd5b50505060058b0180546001600160a01b03191690555060038a01805463ffffffff191690556200238a60028b01600062003463565b896004016000905550505050505050505050565b600854604080516318caf8e360e31b81526001600160a01b03909216600483015260248201526005604482015264416c69636560d81b6064820152600080516020620063e78339815191529063c657c71890608401600060405180830381600087803b1580156200240e57600080fd5b505af115801562002423573d6000803e3d6000fd5b5050600954604080516318caf8e360e31b81526001600160a01b039092166004830152602482015260036044820152622137b160e91b6064820152600080516020620063e7833981519152925063c657c7189150608401600060405180830381600087803b1580156200249557600080fd5b505af1158015620024aa573d6000803e3d6000fd5b5050600a54604080516318caf8e360e31b81526001600160a01b03909216600483015260248201526007604482015266436861726c696560c81b6064820152600080516020620063e7833981519152925063c657c7189150608401600060405180830381600087803b1580156200252057600080fd5b505af115801562002535573d6000803e3d6000fd5b5050604080516318caf8e360e31b815230600482015260248101919091526003604482015262596f7560e81b6064820152600080516020620063e7833981519152925063c657c7189150608401620019c1565b60606000825160206200259c919062003a4d565b67ffffffffffffffff811115620025b757620025b762003543565b6040519080825280601f01601f191660200182016040528015620025e2576020820181803683370190505b50905060005b835181101562000e5557600084828151811062002609576200260962003a90565b6020026020010151905080826020026020018401525080806200262c906200394c565b915050620025e8565b600581015460038201546004830154600284018054604080516020808402820181019092528281526000966001600160a01b03169560e01b949387939192909190830182828015620026a757602002820191906000526020600020905b81548152602001906001019080831162002692575b5050506001600160a01b038716600090815260018a01602090815260408083206001600160e01b03198a1684528252808320905195965094919350620026f39250859187910162003a11565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff161562002792576001600160a01b0384166000908152602087815260408083206001600160e01b031987168452825280832090519092916200276291859187910162003a11565b60405160208183030381529060405280519060200120815260200190815260200160002054945050505050919050565b600083620027a08362002588565b604051602001620027b3929190620039de565b60405160208183030381529060405290506000805160206200640783398151915260001c6001600160a01b031663266cf1096040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200281257600080fd5b505af115801562002827573d6000803e3d6000fd5b50505050600080866001600160a01b031683604051620028489190620039a6565b600060405180830381855afa9150503d806000811462002885576040519150601f19603f3d011682016040523d82523d6000602084013e6200288a565b606091505b509150620028a1905081620021ae87602062003a4d565b6040516365bc948160e01b81526001600160a01b038916600482015290925060009150600080516020620063e7833981519152906365bc9481906024016000604051808303816000875af1158015620028fe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262002928919081019062003b2f565b509050805160010362002c825760006000805160206200640783398151915260001c6001600160a01b031663667f9d7089846000815181106200296f576200296f62003a90565b60200260200101516040518363ffffffff1660e01b815260040162002996929190620037cc565b6020604051808303816000875af1158015620029b6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620029dc9190620039c4565b90508062002a40577f080fc4a96620c4462e705b23f346413fe3796bb63c6f8d8591baec0e231577a5888360008151811062002a1c5762002a1c62003a90565b602002602001015160001c60405162002a37929190620037cc565b60405180910390a15b80831462002af35760405162461bcd60e51b815260206004820152606d60248201527f73746453746f726167652066696e642853746453746f72616765293a2050616360448201527f6b656420736c6f742e205468697320776f756c642063617573652064616e676560648201527f726f7573206f76657277726974696e6720616e642063757272656e746c79206960848201526c1cdb9d081cdd5c1c1bdc9d1959609a1b60a482015260c40162000e4c565b7f9c9555b1e3102e3cf48f427d79cb678f5d9bd1ed0ad574389461e255f95170ed8888878960405160200162002b2b92919062003a11565b604051602081830303815290604052805190602001208560008151811062002b575762002b5762003a90565b602002602001015160001c60405162002b74949392919062003b90565b60405180910390a18160008151811062002b925762002b9262003a90565b6020908102919091018101516001600160a01b038a1660009081528c835260408082206001600160e01b03198c168352845280822090519293909262002bdd918a918c910162003a11565b60408051601f1981840301815291815281516020928301208352828201939093529082016000908120939093556001600160a01b038b16835260018d810182528284206001600160e01b03198c1685528252828420925190939162002c47918a918c910162003a11565b60408051808303601f19018152918152815160209283012083529082019290925201600020805460ff19169115159190911790555062003240565b600181511115620031cf5760005b8151811015620031c85760006000805160206200640783398151915260001c6001600160a01b031663667f9d708a85858151811062002cd35762002cd362003a90565b60200260200101516040518363ffffffff1660e01b815260040162002cfa929190620037cc565b6020604051808303816000875af115801562002d1a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002d409190620039c4565b90508062002da3577f080fc4a96620c4462e705b23f346413fe3796bb63c6f8d8591baec0e231577a58984848151811062002d7f5762002d7f62003a90565b602002602001015160001c60405162002d9a929190620037cc565b60405180910390a15b6000805160206200640783398151915260001c6001600160a01b03166370ca10bb8a85858151811062002dda5762002dda62003a90565b602002602001015161133760f01b6040518463ffffffff1660e01b815260040162002e089392919062003a6f565b600060405180830381600087803b15801562002e2357600080fd5b505af115801562002e38573d6000803e3d6000fd5b50505050600060608a6001600160a01b03168760405162002e5a9190620039a6565b600060405180830381855afa9150503d806000811462002e97576040519150601f19603f3d011682016040523d82523d6000602084013e62002e9c565b606091505b50909250905062002eb481620021ae8b602062003a4d565b955081801562002ec8575061133760f01b86145b156200311b577f9c9555b1e3102e3cf48f427d79cb678f5d9bd1ed0ad574389461e255f95170ed8b8b8a8c60405160200162002f0692919062003a11565b6040516020818303038152906040528051906020012088888151811062002f315762002f3162003a90565b602002602001015160001c60405162002f4e949392919062003b90565b60405180910390a184848151811062002f6b5762002f6b62003a90565b6020908102919091018101516001600160a01b038d1660009081528f835260408082206001600160e01b03198f168352845280822090519293909262002fb6918d918f910162003a11565b6040516020818303038152906040528051906020012081526020019081526020016000208190555060018d60010160008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008c6001600160e01b0319166001600160e01b031916815260200190815260200160002060008a8c6040516020016200304392919062003a11565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548160ff0219169083151502179055506000805160206200640783398151915260001c6001600160a01b03166370ca10bb8c878781518110620030b557620030b562003a90565b6020026020010151866040518463ffffffff1660e01b8152600401620030de9392919062003a6f565b600060405180830381600087803b158015620030f957600080fd5b505af11580156200310e573d6000803e3d6000fd5b50505050505050620031c8565b6000805160206200640783398151915260001c6001600160a01b03166370ca10bb8c87878151811062003152576200315262003a90565b6020026020010151866040518463ffffffff1660e01b81526004016200317b9392919062003a6f565b600060405180830381600087803b1580156200319657600080fd5b505af1158015620031ab573d6000803e3d6000fd5b505050505050508080620031bf906200394c565b91505062002c90565b5062003240565b6040805162461bcd60e51b81526020600482015260248101919091527f73746453746f726167652066696e642853746453746f72616765293a204e6f2060448201527f73746f726167652075736520646574656374656420666f72207461726765742e606482015260840162000e4c565b6001600160a01b038716600090815260018a01602090815260408083206001600160e01b03198a16845282528083209051909291620032849188918a910162003a11565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff16620033135760405162461bcd60e51b815260206004820152602f60248201527f73746453746f726167652066696e642853746453746f72616765293a20536c6f60448201526e3a143994903737ba103337bab7321760891b606482015260840162000e4c565b6005890180546001600160a01b031916905560038901805463ffffffff191690556200334460028a01600062003463565b600060048a018190556001600160a01b038816815260208a815260408083206001600160e01b03198a168452825280832090519092916200338a9188918a910162003a11565b60405160208183030381529060405280519060200120815260200190815260200160002054975050505050505050919050565b60008060006020855111620033d4578451620033d7565b60205b905060005b818110156200343d57620033f281600862003a4d565b86620033ff83886200398b565b8151811062003412576200341262003a90565b01602001516001600160f81b031916901c92909217918062003434816200394c565b915050620033dc565b5090949350505050565b611a3f8062003bc183390190565b610de7806200560083390190565b508054600082559060005260206000209081019062003483919062003486565b50565b5b808211156200349d576000815560010162003487565b5090565b80356001600160a01b0381168114620016b357600080fd5b60008060408385031215620034cd57600080fd5b620034d883620034a1565b946020939093013593505050565b600060208284031215620034f957600080fd5b6200350482620034a1565b9392505050565b600080604083850312156200351f57600080fd5b6200352a83620034a1565b91506200353a60208401620034a1565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171562003585576200358562003543565b604052919050565b600067ffffffffffffffff821115620035aa57620035aa62003543565b50601f01601f191660200190565b6000620035cf620035c9846200358d565b62003559565b9050828152838383011115620035e457600080fd5b828260208301376000602084830101529392505050565b600082601f8301126200360d57600080fd5b6200350483833560208501620035b8565b600080604083850312156200363257600080fd5b823567ffffffffffffffff808211156200364b57600080fd5b6200365986838701620035fb565b935060208501359150808211156200367057600080fd5b508301601f810185136200368357600080fd5b6200369485823560208401620035b8565b9150509250929050565b600060208284031215620036b157600080fd5b5035919050565b600080600060608486031215620036ce57600080fd5b620036d984620034a1565b9250620036e960208501620034a1565b9150604084013590509250925092565b6000806000606084860312156200370f57600080fd5b505081359360208301359350604090920135919050565b80151581146200348357600080fd5b600080600080608085870312156200374c57600080fd5b6200375785620034a1565b93506200376760208601620034a1565b9250604085013591506060850135620037808162003726565b939692955090935050565b6000602082840312156200379e57600080fd5b813567ffffffffffffffff811115620037b657600080fd5b620037c484828501620035fb565b949350505050565b6001600160a01b03929092168252602082015260400190565b600060208284031215620037f857600080fd5b8151620035048162003726565b60005b838110156200382257818101518382015260200162003808565b8381111562000abf5750506000910152565b60208152600082518060208401526200385581604085016020870162003805565b601f01601f19169190910160400192915050565b6000602082840312156200387c57600080fd5b815167ffffffffffffffff8111156200389457600080fd5b8201601f81018413620038a657600080fd5b8051620038b7620035c9826200358d565b818152856020838501011115620038cd57600080fd5b620038e082602083016020860162003805565b95945050505050565b60008351620038fd81846020880162003805565b8351908301906200391381836020880162003805565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156200394757620039476200391c565b500390565b6000600182016200396157620039616200391c565b5060010190565b6000826200398657634e487b7160e01b600052601260045260246000fd5b500690565b60008219821115620039a157620039a16200391c565b500190565b60008251620039ba81846020870162003805565b9190910192915050565b600060208284031215620039d757600080fd5b5051919050565b6001600160e01b031983168152815160009062003a0381600485016020870162003805565b919091016004019392505050565b825160009082906020808701845b8381101562003a3d5781518552938201939082019060010162003a1f565b5050948252509092019392505050565b600081600019048311821515161562003a6a5762003a6a6200391c565b500290565b6001600160a01b039390931683526020830191909152604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600082601f83011262003ab857600080fd5b8151602067ffffffffffffffff82111562003ad75762003ad762003543565b8160051b62003ae882820162003559565b928352848101820192828101908785111562003b0357600080fd5b83870192505b8483101562003b245782518252918301919083019062003b09565b979650505050505050565b6000806040838503121562003b4357600080fd5b825167ffffffffffffffff8082111562003b5c57600080fd5b62003b6a8683870162003aa6565b9350602085015191508082111562003b8157600080fd5b50620036948582860162003aa6565b6001600160a01b039490941684526001600160e01b0319929092166020840152604083015260608201526080019056fe60a060405260018055600060025534801561001957600080fd5b50604051611a3f380380611a3f83398101604081905261003891610106565b600080546001600160a01b031916339081178255604051909182917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76908290a3506001600160a01b03811660805260038290556040518281527fcf29a5174acb8c175d760a7381ffc52c6ae644e3a4ba3fa7e01344f959cd76159060200160405180910390a16703782dace9d9000060048190556040519081527f841095ec206e4a3d8124f54a431661bd653b296066d7d695baaa9178e9d21bb49060200160405180910390a15050610143565b6000806040838503121561011957600080fd5b825160208401519092506001600160a01b038116811461013857600080fd5b809150509250929050565b6080516118c561017a600039600081816101c80152818161035c015281816106540152818161071e015261077701526118c56000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80639170c05b116100ad578063d70e3dfd11610071578063d70e3dfd14610277578063daf9c210146102a0578063e02c0279146102d3578063ec4cd7db146102e6578063fc711c3a146102f957600080fd5b80639170c05b146102155780639501325f14610228578063bd20a85914610248578063bd4ac9971461025b578063cd805d5e1461026e57600080fd5b80632613f307116100f45780632613f3071461018a5780632b0cf6531461019d5780637d9dd85d146101b05780637dc0d1d0146101c35780638da5cb5b1461020257600080fd5b80630b20b7bc146101265780630ff0c00e146101595780630ffb1d8b1461016257806313af403514610177575b600080fd5b610146610134366004611454565b60086020526000908152604090205481565b6040519081526020015b60405180910390f35b61014660035481565b610175610170366004611497565b610302565b005b6101756101853660046114ce565b610451565b610175610198366004611454565b6104c6565b6101756101ab3660046114f0565b61052c565b6101756101be366004611591565b6107e4565b6101ea7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610150565b6000546101ea906001600160a01b031681565b61017561022336600461164d565b610859565b610146610236366004611454565b60066020526000908152604090205481565b610175610256366004611454565b610a06565b6101756102693660046116a4565b610a8d565b61014660025481565b6101ea610285366004611454565b6007602052600090815260409020546001600160a01b031681565b6102c36102ae3660046114ce565b60056020526000908152604090205460ff1681565b6040519015158152602001610150565b6101756102e13660046114f0565b610b53565b6101756102f4366004611755565b610cb6565b61014660045481565b6000546001600160a01b031633146103355760405162461bcd60e51b815260040161032c906117bf565b60405180910390fd5b8080156103c95750604051630daf9c2160e41b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063daf9c21090602401602060405180830381865afa1580156103a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c791906117e5565b155b156103f2576040516313c42eef60e21b81526001600160a01b038316600482015260240161032c565b6001600160a01b038216600081815260056020908152604091829020805460ff191685151590811790915591519182527fef81a9943b96c8df4ef243401c9bf5159146166211356898b52d382086168d92910160405180910390a25050565b6000546001600160a01b0316331461047b5760405162461bcd60e51b815260040161032c906117bf565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a350565b6000546001600160a01b031633146104f05760405162461bcd60e51b815260040161032c906117bf565b60038190556040518181527fcf29a5174acb8c175d760a7381ffc52c6ae644e3a4ba3fa7e01344f959cd7615906020015b60405180910390a150565b60015460011461056b5760405162461bcd60e51b815260206004820152600a6024820152695245454e5452414e435960b01b604482015260640161032c565b60026001556000610580878787878787610d4b565b6000818152600660205260408120549192508190036105b55760405163cc4f06a160e01b81526004810183905260240161032c565b6003546105c28243611818565b106105e057604051632c02744560e11b815260040160405180910390fd5b600082815260086020818152604080842080546007845282862080546006865284882088905581546001600160a01b03191690915594909352849055516384bfabcf60e01b81526001600160a01b03928316600482018190523360248301528b8416604483015260648201839052919391927f000000000000000000000000000000000000000000000000000000000000000016906384bfabcf90608401602060405180830381865afa15801561069b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bf919061182f565b90508086836001600160a01b03167fc293ada1a20d5f6111738a64aec9c7262db402de1650b576e691e321964bb01e868c604051610707929190918252602082015260400190565b60405180910390a46107436001600160a01b038b167f000000000000000000000000000000000000000000000000000000000000000085610da3565b604051632bd6267f60e21b81526001600160a01b0383811660048301523360248301528b81166044830152606482018590527f0000000000000000000000000000000000000000000000000000000000000000169063af5899fc90608401600060405180830381600087803b1580156107bb57600080fd5b505af11580156107cf573d6000803e3d6000fd5b50506001805550505050505050505050505050565b60006107f48c8c8c8c8c8c610d4b565b90506108038582868686610e20565b61080e8b8288610f8d565b6040805185815260208101889052889133917f942417ccf4f356e8d909c054f8a8147622647605cbeafd9c63b4fc3cc1dd2a53910160405180910390a3505050505050505050505050565b6001600160a01b03851660009081526005602052604090205460ff1661089d5760405163f602627d60e01b81526001600160a01b038616600482015260240161032c565b6001600160a01b03841660009081526005602052604090205460ff166108e15760405163f602627d60e01b81526001600160a01b038516600482015260240161032c565b836001600160a01b0316856001600160a01b03160361091357604051631d2792fb60e31b815260040160405180910390fd5b600454821115610939576040516305bf279d60e41b81526004810183905260240161032c565b8260000361095a5760405163abc5ee6f60e01b815260040160405180910390fd5b6001600160a01b03811661098157604051631feef77d60e01b815260040160405180910390fd5b6109966001600160a01b038616333086610fe1565b60025460408051858152602081018590526001600160a01b03848116828401529151878316928916917f7361c265d28ece9d5df249995186533440e0b7a1310ae54d496fa1783056e3da919081900360600190a4600280549060006109fa83611848565b91905055505050505050565b6000546001600160a01b03163314610a305760405162461bcd60e51b815260040161032c906117bf565b670de0b6b3a76400008110610a5857604051636a143fdd60e11b815260040160405180910390fd5b60048190556040518181527f841095ec206e4a3d8124f54a431661bd653b296066d7d695baaa9178e9d21bb490602001610521565b6000610a9d8b8b8b8b8b8b610d4b565b9050600454841115610ac5576040516305bf279d60e41b81526004810185905260240161032c565b60008181526006602052604090205415610af5576040516304daa62560e21b81526004810182905260240161032c565b610b028582868686610e20565b85856001600160a01b03167f6ab91dbc42f726b630639350395426be048c50255f12e82d28e2dffac417459386604051610b3e91815260200190565b60405180910390a35050505050505050505050565b6000610b63878787878787610d4b565b60008181526006602052604081205491925003610b965760405163cc4f06a160e01b81526004810182905260240161032c565b600354600082815260066020526040902054610bb29043611818565b1015610bfd57600081815260066020526040812054610bd19043611818565b600354610bde9190611818565b9050806040516325797e0360e11b815260040161032c91815260200190565b600081815260086020818152604080842080546007845282862080546006865293872087905580546001600160a01b031916905593909252929055906001600160a01b0390811690610c52908916868461106b565b610c666001600160a01b038a16828961106b565b8184826001600160a01b03167f3281f74a3f7405b6bd35e9687b3fcaaf242c466ac789d117f22b62b140af8dcc89604051610ca391815260200190565b60405180910390a4505050505050505050565b6000610cc6888888888888610d4b565b60008181526006602052604090205490915015610cf9576040516304daa62560e21b81526004810182905260240161032c565b610d04878284610f8d565b6040805186815260208101849052849133917f942417ccf4f356e8d909c054f8a8147622647605cbeafd9c63b4fc3cc1dd2a53910160405180910390a35050505050505050565b604080516001600160a01b039788166020808301919091529688168183015260608101959095526080850193909352941660a083015260c0808301949094528051808303909401845260e09091019052815191012090565b600060405163095ea7b360e01b8152836004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080610e1a5760405162461bcd60e51b815260206004820152600e60248201526d1054141493d59157d1905253115160921b604482015260640161032c565b50505050565b600454831115610e46576040516305bf279d60e41b81526004810184905260240161032c565b60008481526006602052604090205415610e76576040516304daa62560e21b81526004810185905260240161032c565b604080517f0efb9dda140a951df4393d44ca40349032d31811466afd20eacd4b4136c3f4986020808301919091528183018790526060808301879052835180840390910181526080830184528051908201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000060a084015260bc8084018290528451808503909101815260dc90930190935281519101206000610f4f8286868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506110e392505050565b9050876001600160a01b0316816001600160a01b031614610f83576040516324a0dbd760e21b815260040160405180910390fd5b5050505050505050565b60008281526006602090815260408083204390556007825280832080546001600160a01b031916339081179091556008909252909120829055610fdc906001600160a01b038516903084610fe1565b505050565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d11600160005114161716915050806110645760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b604482015260640161032c565b5050505050565b600060405163a9059cbb60e01b8152836004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080610e1a5760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b604482015260640161032c565b60008060006110f28585611107565b915091506110ff81611175565b509392505050565b600080825160410361113d5760208301516040840151606085015160001a6111318782858561132e565b9450945050505061116e565b8251604003611166576020830151604084015161115b86838361141b565b93509350505061116e565b506000905060025b9250929050565b600081600481111561118957611189611861565b036111915750565b60018160048111156111a5576111a5611861565b036111f25760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161032c565b600281600481111561120657611206611861565b036112535760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161032c565b600381600481111561126757611267611861565b036112bf5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161032c565b60048160048111156112d3576112d3611861565b0361132b5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161032c565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156113655750600090506003611412565b8460ff16601b1415801561137d57508460ff16601c14155b1561138e5750600090506004611412565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156113e2573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661140b57600060019250925050611412565b9150600090505b94509492505050565b6000806001600160ff1b0383168161143860ff86901c601b611877565b90506114468782888561132e565b935093505050935093915050565b60006020828403121561146657600080fd5b5035919050565b80356001600160a01b038116811461148457600080fd5b919050565b801515811461132b57600080fd5b600080604083850312156114aa57600080fd5b6114b38361146d565b915060208301356114c381611489565b809150509250929050565b6000602082840312156114e057600080fd5b6114e98261146d565b9392505050565b60008060008060008060c0878903121561150957600080fd5b6115128761146d565b95506115206020880161146d565b9450604087013593506060870135925061153c6080880161146d565b915060a087013590509295509295509295565b60008083601f84011261156157600080fd5b50813567ffffffffffffffff81111561157957600080fd5b60208301915083602082850101111561116e57600080fd5b60008060008060008060008060008060006101408c8e0312156115b357600080fd5b6115bc8c61146d565b9a506115ca60208d0161146d565b995060408c0135985060608c013597506115e660808d0161146d565b965060a08c0135955060c08c0135945061160260e08d0161146d565b93506101008c013592506101208c013567ffffffffffffffff81111561162757600080fd5b6116338e828f0161154f565b915080935050809150509295989b509295989b9093969950565b600080600080600060a0868803121561166557600080fd5b61166e8661146d565b945061167c6020870161146d565b935060408601359250606086013591506116986080870161146d565b90509295509295909350565b6000806000806000806000806000806101208b8d0312156116c457600080fd5b6116cd8b61146d565b99506116db60208c0161146d565b985060408b0135975060608b013596506116f760808c0161146d565b955060a08b0135945061170c60c08c0161146d565b935060e08b013592506101008b013567ffffffffffffffff81111561173057600080fd5b61173c8d828e0161154f565b915080935050809150509295989b9194979a5092959850565b600080600080600080600060e0888a03121561177057600080fd5b6117798861146d565b96506117876020890161146d565b955060408801359450606088013593506117a36080890161146d565b925060a0880135915060c0880135905092959891949750929550565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b6000602082840312156117f757600080fd5b81516114e981611489565b634e487b7160e01b600052601160045260246000fd5b60008282101561182a5761182a611802565b500390565b60006020828403121561184157600080fd5b5051919050565b60006001820161185a5761185a611802565b5060010190565b634e487b7160e01b600052602160045260246000fd5b6000821982111561188a5761188a611802565b50019056fea2646970667358221220113fb638bdd45eef8a6121716cc16f962536180e2705f01f90d7a5598262081364736f6c634300080f0033608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76908290a350601960049081553360009081526003602052604090819020805460ff19166001179055905490517fa2e09ae7caa0e84bcfe806d931934b92bf11ce67ffcaa3033af9a1e031996951916100a89190815260200190565b60405180910390a1610d28806100bf6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638945bd281161008c578063af5899fc11610066578063af5899fc14610202578063c70a900f14610215578063daf9c21014610248578063fc361c381461026b57600080fd5b80638945bd28146101515780638da5cb5b146101645780639d8669851461018f57600080fd5b806307de99f6146100d45780630ffb1d8b146100fa57806313af40351461010f578063329e53be14610122578063391fe4e21461013557806384bfabcf1461013e575b600080fd5b6100e76100e2366004610ad9565b61027e565b6040519081526020015b60405180910390f35b61010d610108366004610b1e565b61028f565b005b61010d61011d366004610b51565b610322565b61010d610130366004610b1e565b610397565b6100e760045481565b6100e761014c366004610b73565b610419565b61010d61015f366004610ad9565b61043e565b600054610177906001600160a01b031681565b6040516001600160a01b0390911681526020016100f1565b6101ef61019d366004610ad9565b60016020819052600091825260409091208054918101546002820154600383015460048401546005909401546001600160a01b0395861695938416949390921692909160ff8082169161010090041687565b6040516100f19796959493929190610bd4565b61010d610210366004610b73565b6104a3565b610238610223366004610b51565b60036020526000908152604090205460ff1681565b60405190151581526020016100f1565b610238610256366004610b51565b60026020526000908152604090205460ff1681565b61010d610279366004610c3a565b6106fe565b600061028982610962565b92915050565b6000546001600160a01b031633146102c25760405162461bcd60e51b81526004016102b990610c5d565b60405180910390fd5b6001600160a01b038216600081815260026020908152604091829020805460ff191685151590811790915591519182527fef81a9943b96c8df4ef243401c9bf5159146166211356898b52d382086168d9291015b60405180910390a25050565b6000546001600160a01b0316331461034c5760405162461bcd60e51b81526004016102b990610c5d565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a350565b6000546001600160a01b031633146103c15760405162461bcd60e51b81526004016102b990610c5d565b6001600160a01b038216600081815260036020908152604091829020805460ff191685151590811790915591519182527f8cc72bec7e2cf5979aefd933f40a28eb590098d522a5c458e497e71c5e6fa90f9101610316565b60008061042583610962565b9050610434868686868561097e565b9695505050505050565b6000546001600160a01b031633146104685760405162461bcd60e51b81526004016102b990610c5d565b60048190556040518181527fa2e09ae7caa0e84bcfe806d931934b92bf11ce67ffcaa3033af9a1e0319969519060200160405180910390a150565b6001600160a01b03821660009081526002602052604090205460ff166104e75760405163010d7e6160e11b81526001600160a01b03831660048201526024016102b9565b60006104f282610962565b90506000610503868686868661097e565b90506001600082815260016020526040902060050154610100900460ff16600281111561053257610532610bbe565b036105535760405163d5e880e960e01b8152600481018290526024016102b9565b60006040518060e00160405280886001600160a01b03168152602001876001600160a01b03168152602001866001600160a01b03168152602001858152602001848152602001600015158152602001600160028111156105b5576105b5610bbe565b9052600083815260016020818152604092839020845181546001600160a01b03199081166001600160a01b03928316178355928601519382018054841694821694909417909355928401516002808501805490931691909316179055606083015160038301556080830151600483015560a083015160058301805460ff198116921515928317825560c0860151959650869593919261ffff1990911661ff0019909116179061010090849081111561066f5761066f610bbe565b021790555061068c9150506001600160a01b0386168730866109d1565b6106a16001600160a01b0386163330876109d1565b604080516001600160a01b038781168252602082018790529181018590528188169189169084907fb10e0c42d0d8cd4a999f95c50d18109fb205fdf5e55a8ed89121cab7f9f65f699060600160405180910390a450505050505050565b3360009081526003602052604090205460ff1661072e576040516314e9dd3960e31b815260040160405180910390fd5b6000828152600160208181526040808420815160e08101835281546001600160a01b03908116825294820154851693810193909352600280820154909416918301919091526003810154606083015260048101546080830152600581015460ff808216151560a08501529293919260c085019261010090920416908111156107b8576107b8610bbe565b60028111156107c9576107c9610bbe565b905250905060028160c0015160028111156107e6576107e6610bbe565b036108075760405163b677167760e01b8152600481018490526024016102b9565b81156108415780516060820151608083015161083c929161082791610c99565b60408401516001600160a01b03169190610a5b565b61085d565b61085d8160200151826060015183608001516108279190610c99565b600260c0820181815283151560a08401908152600086815260016020818152604092839020875181546001600160a01b039182166001600160a01b0319918216178355928901519382018054948216948416949094179093559287015183870180549190931691161790556060850151600382015560808501516004820155905160058201805491151560ff198316811782559351869593949093919261ff001990911661ffff19909116179061010090849081111561091f5761091f610bbe565b02179055505060405183151581528491507fdbed7580b9c2829ee6b384e3833f10b16f9885601c98a01c40fd705b543e9c669060200160405180910390a2505050565b60006064600454836109749190610cb1565b6102899190610cd0565b604080516001600160a01b0396871660208083019190915295871681830152939095166060840152608083019190915260a0808301919091528351808303909101815260c0909101909252815191012090565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d1160016000511416171691505080610a545760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b60448201526064016102b9565b5050505050565b600060405163a9059cbb60e01b8152836004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080610ad35760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b60448201526064016102b9565b50505050565b600060208284031215610aeb57600080fd5b5035919050565b80356001600160a01b0381168114610b0957600080fd5b919050565b80358015158114610b0957600080fd5b60008060408385031215610b3157600080fd5b610b3a83610af2565b9150610b4860208401610b0e565b90509250929050565b600060208284031215610b6357600080fd5b610b6c82610af2565b9392505050565b60008060008060808587031215610b8957600080fd5b610b9285610af2565b9350610ba060208601610af2565b9250610bae60408601610af2565b9396929550929360600135925050565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b038881168252878116602083015286166040820152606081018590526080810184905282151560a082015260e0810160038310610c2857634e487b7160e01b600052602160045260246000fd5b8260c083015298975050505050505050565b60008060408385031215610c4d57600080fd5b82359150610b4860208401610b0e565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115610cac57610cac610c83565b500190565b6000816000190483118215151615610ccb57610ccb610c83565b500290565b600082610ced57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220a086d5378c38188b517141b491168433bcacdd1ef66aa0a3a08acd1fabd82c2a64736f6c634300080f00330000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12d885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12da2646970667358221220f286a2316b35e77e4d5812d19630f5355ec71c3342d65680c314589e26d2851e64736f6c634300080f0033" . parse () . expect ("invalid bytecode")
        });
    pub struct TradeFixture<M>(ethers::contract::Contract<M>);
    impl<M> Clone for TradeFixture<M> {
        fn clone(&self) -> Self {
            TradeFixture(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for TradeFixture<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for TradeFixture<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(TradeFixture))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> TradeFixture<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), TRADEFIXTURE_ABI.clone(), client).into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                TRADEFIXTURE_ABI.clone(),
                TRADEFIXTURE_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `IS_TEST` (0xfa7626d4) function"]
        pub fn is_test(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([250, 118, 38, 212], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `bound` (0x5a6c1eed) function"]
        pub fn bound(
            &self,
            x: ethers::core::types::U256,
            min: ethers::core::types::U256,
            max: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([90, 108, 30, 237], (x, min, max))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deal` (0x6bce989b) function"]
        pub fn deal_with_token(
            &self,
            token: ethers::core::types::Address,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([107, 206, 152, 155], (token, to, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deal` (0x97754ae9) function"]
        pub fn deal_with_token_and_adjust(
            &self,
            token: ethers::core::types::Address,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
            adjust: bool,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([151, 117, 74, 233], (token, to, give, adjust))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deal` (0xc88a5e6d) function"]
        pub fn deal(
            &self,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([200, 138, 94, 109], (to, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deployCode` (0x29ce9dde) function"]
        pub fn deploy_code_with_args(
            &self,
            what: String,
            args: ethers::core::types::Bytes,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([41, 206, 157, 222], (what, args))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deployCode` (0x9a8325a0) function"]
        pub fn deploy_code(
            &self,
            what: String,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([154, 131, 37, 160], what)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `failed` (0xba414fa6) function"]
        pub fn failed(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([186, 65, 79, 166], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0x233240ee) function"]
        pub fn hoax_0(
            &self,
            who: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([35, 50, 64, 238], who)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0x29a9e300) function"]
        pub fn hoax_1(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([41, 169, 227, 0], (who, origin))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0xaf9bbe5f) function"]
        pub fn hoax_3(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([175, 155, 190, 95], (who, origin, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0xe9a79a7b) function"]
        pub fn hoax_2(
            &self,
            who: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([233, 167, 154, 123], (who, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `rewind` (0x2d6c17a3) function"]
        pub fn rewind(
            &self,
            time: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([45, 108, 23, 163], time)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setUp` (0x0a9254e4) function"]
        pub fn set_up(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([10, 146, 84, 228], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `skip` (0xb9c071b4) function"]
        pub fn skip(
            &self,
            time: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([185, 192, 113, 180], time)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0x108554f2) function"]
        pub fn start_hoax_1(
            &self,
            who: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([16, 133, 84, 242], (who, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0x3bf82db1) function"]
        pub fn start_hoax_3(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([59, 248, 45, 177], (who, origin, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0x6f597075) function"]
        pub fn start_hoax_0(
            &self,
            who: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([111, 89, 112, 117], who)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0xd06d8229) function"]
        pub fn start_hoax_2(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([208, 109, 130, 41], (who, origin))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `tip` (0xd82555f1) function"]
        pub fn tip(
            &self,
            token: ethers::core::types::Address,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([216, 37, 85, 241], (token, to, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `vm` (0x3a768463) function"]
        pub fn vm(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([58, 118, 132, 99], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `MaxFeePctChanged` event"]
        pub fn max_fee_pct_changed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, MaxFeePctChangedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `SafeBlockThresholdChanged` event"]
        pub fn safe_block_threshold_changed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, SafeBlockThresholdChangedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TokenWhitelisted` event"]
        pub fn token_whitelisted_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TokenWhitelistedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeDisputed` event"]
        pub fn trade_disputed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeDisputedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeFilled` event"]
        pub fn trade_filled_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeFilledFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeRequested` event"]
        pub fn trade_requested_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeRequestedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeSettled` event"]
        pub fn trade_settled_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeSettledFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `UpdatedFeeForTrade` event"]
        pub fn updated_fee_for_trade_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, UpdatedFeeForTradeFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `WARNING_Deprecated` event"]
        pub fn warning_deprecated_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, WarningDeprecatedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log` event"]
        pub fn log_filter(&self) -> ethers::contract::builders::Event<M, LogFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_address` event"]
        pub fn log_address_filter(&self) -> ethers::contract::builders::Event<M, LogAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes` event"]
        pub fn log_bytes_filter(&self) -> ethers::contract::builders::Event<M, LogBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes32` event"]
        pub fn log_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_int` event"]
        pub fn log_int_filter(&self) -> ethers::contract::builders::Event<M, LogIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_address` event"]
        pub fn log_named_address_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes` event"]
        pub fn log_named_bytes_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes32` event"]
        pub fn log_named_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_int` event"]
        pub fn log_named_decimal_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_uint` event"]
        pub fn log_named_decimal_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_int` event"]
        pub fn log_named_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_string` event"]
        pub fn log_named_string_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_uint` event"]
        pub fn log_named_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_string` event"]
        pub fn log_string_filter(&self) -> ethers::contract::builders::Event<M, LogStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_uint` event"]
        pub fn log_uint_filter(&self) -> ethers::contract::builders::Event<M, LogUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `logs` event"]
        pub fn logs_filter(&self) -> ethers::contract::builders::Event<M, LogsFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, TradeFixtureEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for TradeFixture<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "MaxFeePctChanged", abi = "MaxFeePctChanged(uint256)")]
    pub struct MaxFeePctChangedFilter {
        pub new_max_fee_pct: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "SafeBlockThresholdChanged",
        abi = "SafeBlockThresholdChanged(uint256)"
    )]
    pub struct SafeBlockThresholdChangedFilter {
        pub new_safe_block_threshold: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "TokenWhitelisted", abi = "TokenWhitelisted(address,bool)")]
    pub struct TokenWhitelistedFilter {
        #[ethevent(indexed)]
        pub token: ethers::core::types::Address,
        pub whitelisted: bool,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeDisputed",
        abi = "TradeDisputed(address,uint256,bytes32,uint256,uint256)"
    )]
    pub struct TradeDisputedFilter {
        #[ethevent(indexed)]
        pub relayer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
        #[ethevent(indexed)]
        pub dispute_id: [u8; 32],
        pub filled_amount: ethers::core::types::U256,
        pub fee_pct: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeFilled",
        abi = "TradeFilled(address,uint256,uint256,uint256)"
    )]
    pub struct TradeFilledFilter {
        #[ethevent(indexed)]
        pub relayer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
        pub fee_pct: ethers::core::types::U256,
        pub amount_out: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeRequested",
        abi = "TradeRequested(address,address,uint256,uint256,address,uint256)"
    )]
    pub struct TradeRequestedFilter {
        #[ethevent(indexed)]
        pub token_in: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub token_out: ethers::core::types::Address,
        pub amount_in: ethers::core::types::U256,
        pub fee_pct: ethers::core::types::U256,
        pub to: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeSettled",
        abi = "TradeSettled(address,uint256,uint256,uint256)"
    )]
    pub struct TradeSettledFilter {
        #[ethevent(indexed)]
        pub relayer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
        #[ethevent(indexed)]
        pub filled_amount: ethers::core::types::U256,
        pub fee_pct: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "UpdatedFeeForTrade",
        abi = "UpdatedFeeForTrade(address,uint256,uint256)"
    )]
    pub struct UpdatedFeeForTradeFilter {
        #[ethevent(indexed)]
        pub trader: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
        pub new_fee_pct: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "WARNING_Deprecated", abi = "WARNING_Deprecated(string)")]
    pub struct WarningDeprecatedFilter {
        pub msg: String,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log", abi = "log(string)")]
    pub struct LogFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_address", abi = "log_address(address)")]
    pub struct LogAddressFilter(pub ethers::core::types::Address);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes", abi = "log_bytes(bytes)")]
    pub struct LogBytesFilter(pub ethers::core::types::Bytes);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes32", abi = "log_bytes32(bytes32)")]
    pub struct LogBytes32Filter(pub [u8; 32]);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_int", abi = "log_int(int256)")]
    pub struct LogIntFilter(pub I256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_address", abi = "log_named_address(string,address)")]
    pub struct LogNamedAddressFilter {
        pub key: String,
        pub val: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes", abi = "log_named_bytes(string,bytes)")]
    pub struct LogNamedBytesFilter {
        pub key: String,
        pub val: ethers::core::types::Bytes,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes32", abi = "log_named_bytes32(string,bytes32)")]
    pub struct LogNamedBytes32Filter {
        pub key: String,
        pub val: [u8; 32],
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_int",
        abi = "log_named_decimal_int(string,int256,uint256)"
    )]
    pub struct LogNamedDecimalIntFilter {
        pub key: String,
        pub val: I256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_uint",
        abi = "log_named_decimal_uint(string,uint256,uint256)"
    )]
    pub struct LogNamedDecimalUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_int", abi = "log_named_int(string,int256)")]
    pub struct LogNamedIntFilter {
        pub key: String,
        pub val: I256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_string", abi = "log_named_string(string,string)")]
    pub struct LogNamedStringFilter {
        pub key: String,
        pub val: String,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_uint", abi = "log_named_uint(string,uint256)")]
    pub struct LogNamedUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_string", abi = "log_string(string)")]
    pub struct LogStringFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_uint", abi = "log_uint(uint256)")]
    pub struct LogUintFilter(pub ethers::core::types::U256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "logs", abi = "logs(bytes)")]
    pub struct LogsFilter(pub ethers::core::types::Bytes);
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum TradeFixtureEvents {
        MaxFeePctChangedFilter(MaxFeePctChangedFilter),
        SafeBlockThresholdChangedFilter(SafeBlockThresholdChangedFilter),
        TokenWhitelistedFilter(TokenWhitelistedFilter),
        TradeDisputedFilter(TradeDisputedFilter),
        TradeFilledFilter(TradeFilledFilter),
        TradeRequestedFilter(TradeRequestedFilter),
        TradeSettledFilter(TradeSettledFilter),
        UpdatedFeeForTradeFilter(UpdatedFeeForTradeFilter),
        WarningDeprecatedFilter(WarningDeprecatedFilter),
        LogFilter(LogFilter),
        LogAddressFilter(LogAddressFilter),
        LogBytesFilter(LogBytesFilter),
        LogBytes32Filter(LogBytes32Filter),
        LogIntFilter(LogIntFilter),
        LogNamedAddressFilter(LogNamedAddressFilter),
        LogNamedBytesFilter(LogNamedBytesFilter),
        LogNamedBytes32Filter(LogNamedBytes32Filter),
        LogNamedDecimalIntFilter(LogNamedDecimalIntFilter),
        LogNamedDecimalUintFilter(LogNamedDecimalUintFilter),
        LogNamedIntFilter(LogNamedIntFilter),
        LogNamedStringFilter(LogNamedStringFilter),
        LogNamedUintFilter(LogNamedUintFilter),
        LogStringFilter(LogStringFilter),
        LogUintFilter(LogUintFilter),
        LogsFilter(LogsFilter),
    }
    impl ethers::contract::EthLogDecode for TradeFixtureEvents {
        fn decode_log(log: &ethers::core::abi::RawLog) -> Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = MaxFeePctChangedFilter::decode_log(log) {
                return Ok(TradeFixtureEvents::MaxFeePctChangedFilter(decoded));
            }
            if let Ok(decoded) = SafeBlockThresholdChangedFilter::decode_log(log) {
                return Ok(TradeFixtureEvents::SafeBlockThresholdChangedFilter(decoded));
            }
            if let Ok(decoded) = TokenWhitelistedFilter::decode_log(log) {
                return Ok(TradeFixtureEvents::TokenWhitelistedFilter(decoded));
            }
            if let Ok(decoded) = TradeDisputedFilter::decode_log(log) {
                return Ok(TradeFixtureEvents::TradeDisputedFilter(decoded));
            }
            if let Ok(decoded) = TradeFilledFilter::decode_log(log) {
                return Ok(TradeFixtureEvents::TradeFilledFilter(decoded));
            }
            if let Ok(decoded) = TradeRequestedFilter::decode_log(log) {
                return Ok(TradeFixtureEvents::TradeRequestedFilter(decoded));
            }
            if let Ok(decoded) = TradeSettledFilter::decode_log(log) {
                return Ok(TradeFixtureEvents::TradeSettledFilter(decoded));
            }
            if let Ok(decoded) = UpdatedFeeForTradeFilter::decode_log(log) {
                return Ok(TradeFixtureEvents::UpdatedFeeForTradeFilter(decoded));
            }
            if let Ok(decoded) = WarningDeprecatedFilter::decode_log(log) {
                return Ok(TradeFixtureEvents::WarningDeprecatedFilter(decoded));
            }
            if let Ok(decoded) = LogFilter::decode_log(log) {
                return Ok(TradeFixtureEvents::LogFilter(decoded));
            }
            if let Ok(decoded) = LogAddressFilter::decode_log(log) {
                return Ok(TradeFixtureEvents::LogAddressFilter(decoded));
            }
            if let Ok(decoded) = LogBytesFilter::decode_log(log) {
                return Ok(TradeFixtureEvents::LogBytesFilter(decoded));
            }
            if let Ok(decoded) = LogBytes32Filter::decode_log(log) {
                return Ok(TradeFixtureEvents::LogBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogIntFilter::decode_log(log) {
                return Ok(TradeFixtureEvents::LogIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedAddressFilter::decode_log(log) {
                return Ok(TradeFixtureEvents::LogNamedAddressFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytesFilter::decode_log(log) {
                return Ok(TradeFixtureEvents::LogNamedBytesFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytes32Filter::decode_log(log) {
                return Ok(TradeFixtureEvents::LogNamedBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalIntFilter::decode_log(log) {
                return Ok(TradeFixtureEvents::LogNamedDecimalIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalUintFilter::decode_log(log) {
                return Ok(TradeFixtureEvents::LogNamedDecimalUintFilter(decoded));
            }
            if let Ok(decoded) = LogNamedIntFilter::decode_log(log) {
                return Ok(TradeFixtureEvents::LogNamedIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedStringFilter::decode_log(log) {
                return Ok(TradeFixtureEvents::LogNamedStringFilter(decoded));
            }
            if let Ok(decoded) = LogNamedUintFilter::decode_log(log) {
                return Ok(TradeFixtureEvents::LogNamedUintFilter(decoded));
            }
            if let Ok(decoded) = LogStringFilter::decode_log(log) {
                return Ok(TradeFixtureEvents::LogStringFilter(decoded));
            }
            if let Ok(decoded) = LogUintFilter::decode_log(log) {
                return Ok(TradeFixtureEvents::LogUintFilter(decoded));
            }
            if let Ok(decoded) = LogsFilter::decode_log(log) {
                return Ok(TradeFixtureEvents::LogsFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for TradeFixtureEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                TradeFixtureEvents::MaxFeePctChangedFilter(element) => element.fmt(f),
                TradeFixtureEvents::SafeBlockThresholdChangedFilter(element) => element.fmt(f),
                TradeFixtureEvents::TokenWhitelistedFilter(element) => element.fmt(f),
                TradeFixtureEvents::TradeDisputedFilter(element) => element.fmt(f),
                TradeFixtureEvents::TradeFilledFilter(element) => element.fmt(f),
                TradeFixtureEvents::TradeRequestedFilter(element) => element.fmt(f),
                TradeFixtureEvents::TradeSettledFilter(element) => element.fmt(f),
                TradeFixtureEvents::UpdatedFeeForTradeFilter(element) => element.fmt(f),
                TradeFixtureEvents::WarningDeprecatedFilter(element) => element.fmt(f),
                TradeFixtureEvents::LogFilter(element) => element.fmt(f),
                TradeFixtureEvents::LogAddressFilter(element) => element.fmt(f),
                TradeFixtureEvents::LogBytesFilter(element) => element.fmt(f),
                TradeFixtureEvents::LogBytes32Filter(element) => element.fmt(f),
                TradeFixtureEvents::LogIntFilter(element) => element.fmt(f),
                TradeFixtureEvents::LogNamedAddressFilter(element) => element.fmt(f),
                TradeFixtureEvents::LogNamedBytesFilter(element) => element.fmt(f),
                TradeFixtureEvents::LogNamedBytes32Filter(element) => element.fmt(f),
                TradeFixtureEvents::LogNamedDecimalIntFilter(element) => element.fmt(f),
                TradeFixtureEvents::LogNamedDecimalUintFilter(element) => element.fmt(f),
                TradeFixtureEvents::LogNamedIntFilter(element) => element.fmt(f),
                TradeFixtureEvents::LogNamedStringFilter(element) => element.fmt(f),
                TradeFixtureEvents::LogNamedUintFilter(element) => element.fmt(f),
                TradeFixtureEvents::LogStringFilter(element) => element.fmt(f),
                TradeFixtureEvents::LogUintFilter(element) => element.fmt(f),
                TradeFixtureEvents::LogsFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `IS_TEST` function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "IS_TEST", abi = "IS_TEST()")]
    pub struct IsTestCall;
    #[doc = "Container type for all input parameters for the `bound` function with signature `bound(uint256,uint256,uint256)` and selector `[90, 108, 30, 237]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "bound", abi = "bound(uint256,uint256,uint256)")]
    pub struct BoundCall {
        pub x: ethers::core::types::U256,
        pub min: ethers::core::types::U256,
        pub max: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `deal` function with signature `deal(address,address,uint256)` and selector `[107, 206, 152, 155]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deal", abi = "deal(address,address,uint256)")]
    pub struct DealWithTokenCall {
        pub token: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `deal` function with signature `deal(address,address,uint256,bool)` and selector `[151, 117, 74, 233]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deal", abi = "deal(address,address,uint256,bool)")]
    pub struct DealWithTokenAndAdjustCall {
        pub token: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
        pub adjust: bool,
    }
    #[doc = "Container type for all input parameters for the `deal` function with signature `deal(address,uint256)` and selector `[200, 138, 94, 109]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deal", abi = "deal(address,uint256)")]
    pub struct DealCall {
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `deployCode` function with signature `deployCode(string,bytes)` and selector `[41, 206, 157, 222]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deployCode", abi = "deployCode(string,bytes)")]
    pub struct DeployCodeWithArgsCall {
        pub what: String,
        pub args: ethers::core::types::Bytes,
    }
    #[doc = "Container type for all input parameters for the `deployCode` function with signature `deployCode(string)` and selector `[154, 131, 37, 160]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deployCode", abi = "deployCode(string)")]
    pub struct DeployCodeCall {
        pub what: String,
    }
    #[doc = "Container type for all input parameters for the `failed` function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "failed", abi = "failed()")]
    pub struct FailedCall;
    #[doc = "Container type for all input parameters for the `hoax` function with signature `hoax(address)` and selector `[35, 50, 64, 238]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address)")]
    pub struct Hoax0Call {
        pub who: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `hoax` function with signature `hoax(address,address)` and selector `[41, 169, 227, 0]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address,address)")]
    pub struct Hoax1Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `hoax` function with signature `hoax(address,address,uint256)` and selector `[175, 155, 190, 95]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address,address,uint256)")]
    pub struct Hoax3Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `hoax` function with signature `hoax(address,uint256)` and selector `[233, 167, 154, 123]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address,uint256)")]
    pub struct Hoax2Call {
        pub who: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `rewind` function with signature `rewind(uint256)` and selector `[45, 108, 23, 163]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "rewind", abi = "rewind(uint256)")]
    pub struct RewindCall {
        pub time: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `setUp` function with signature `setUp()` and selector `[10, 146, 84, 228]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "setUp", abi = "setUp()")]
    pub struct SetUpCall;
    #[doc = "Container type for all input parameters for the `skip` function with signature `skip(uint256)` and selector `[185, 192, 113, 180]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "skip", abi = "skip(uint256)")]
    pub struct SkipCall {
        pub time: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `startHoax` function with signature `startHoax(address,uint256)` and selector `[16, 133, 84, 242]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address,uint256)")]
    pub struct StartHoax1Call {
        pub who: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `startHoax` function with signature `startHoax(address,address,uint256)` and selector `[59, 248, 45, 177]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address,address,uint256)")]
    pub struct StartHoax3Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `startHoax` function with signature `startHoax(address)` and selector `[111, 89, 112, 117]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address)")]
    pub struct StartHoax0Call {
        pub who: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `startHoax` function with signature `startHoax(address,address)` and selector `[208, 109, 130, 41]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address,address)")]
    pub struct StartHoax2Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `tip` function with signature `tip(address,address,uint256)` and selector `[216, 37, 85, 241]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "tip", abi = "tip(address,address,uint256)")]
    pub struct TipCall {
        pub token: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `vm` function with signature `vm()` and selector `[58, 118, 132, 99]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "vm", abi = "vm()")]
    pub struct VmCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum TradeFixtureCalls {
        IsTest(IsTestCall),
        Bound(BoundCall),
        DealWithToken(DealWithTokenCall),
        DealWithTokenAndAdjust(DealWithTokenAndAdjustCall),
        Deal(DealCall),
        DeployCodeWithArgs(DeployCodeWithArgsCall),
        DeployCode(DeployCodeCall),
        Failed(FailedCall),
        Hoax0(Hoax0Call),
        Hoax1(Hoax1Call),
        Hoax3(Hoax3Call),
        Hoax2(Hoax2Call),
        Rewind(RewindCall),
        SetUp(SetUpCall),
        Skip(SkipCall),
        StartHoax1(StartHoax1Call),
        StartHoax3(StartHoax3Call),
        StartHoax0(StartHoax0Call),
        StartHoax2(StartHoax2Call),
        Tip(TipCall),
        Vm(VmCall),
    }
    impl ethers::core::abi::AbiDecode for TradeFixtureCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) = <IsTestCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeFixtureCalls::IsTest(decoded));
            }
            if let Ok(decoded) = <BoundCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeFixtureCalls::Bound(decoded));
            }
            if let Ok(decoded) =
                <DealWithTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeFixtureCalls::DealWithToken(decoded));
            }
            if let Ok(decoded) =
                <DealWithTokenAndAdjustCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeFixtureCalls::DealWithTokenAndAdjust(decoded));
            }
            if let Ok(decoded) = <DealCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(TradeFixtureCalls::Deal(decoded));
            }
            if let Ok(decoded) =
                <DeployCodeWithArgsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeFixtureCalls::DeployCodeWithArgs(decoded));
            }
            if let Ok(decoded) =
                <DeployCodeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeFixtureCalls::DeployCode(decoded));
            }
            if let Ok(decoded) = <FailedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeFixtureCalls::Failed(decoded));
            }
            if let Ok(decoded) = <Hoax0Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeFixtureCalls::Hoax0(decoded));
            }
            if let Ok(decoded) = <Hoax1Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeFixtureCalls::Hoax1(decoded));
            }
            if let Ok(decoded) = <Hoax3Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeFixtureCalls::Hoax3(decoded));
            }
            if let Ok(decoded) = <Hoax2Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeFixtureCalls::Hoax2(decoded));
            }
            if let Ok(decoded) = <RewindCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeFixtureCalls::Rewind(decoded));
            }
            if let Ok(decoded) = <SetUpCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeFixtureCalls::SetUp(decoded));
            }
            if let Ok(decoded) = <SkipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(TradeFixtureCalls::Skip(decoded));
            }
            if let Ok(decoded) =
                <StartHoax1Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeFixtureCalls::StartHoax1(decoded));
            }
            if let Ok(decoded) =
                <StartHoax3Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeFixtureCalls::StartHoax3(decoded));
            }
            if let Ok(decoded) =
                <StartHoax0Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeFixtureCalls::StartHoax0(decoded));
            }
            if let Ok(decoded) =
                <StartHoax2Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeFixtureCalls::StartHoax2(decoded));
            }
            if let Ok(decoded) = <TipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(TradeFixtureCalls::Tip(decoded));
            }
            if let Ok(decoded) = <VmCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(TradeFixtureCalls::Vm(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for TradeFixtureCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                TradeFixtureCalls::IsTest(element) => element.encode(),
                TradeFixtureCalls::Bound(element) => element.encode(),
                TradeFixtureCalls::DealWithToken(element) => element.encode(),
                TradeFixtureCalls::DealWithTokenAndAdjust(element) => element.encode(),
                TradeFixtureCalls::Deal(element) => element.encode(),
                TradeFixtureCalls::DeployCodeWithArgs(element) => element.encode(),
                TradeFixtureCalls::DeployCode(element) => element.encode(),
                TradeFixtureCalls::Failed(element) => element.encode(),
                TradeFixtureCalls::Hoax0(element) => element.encode(),
                TradeFixtureCalls::Hoax1(element) => element.encode(),
                TradeFixtureCalls::Hoax3(element) => element.encode(),
                TradeFixtureCalls::Hoax2(element) => element.encode(),
                TradeFixtureCalls::Rewind(element) => element.encode(),
                TradeFixtureCalls::SetUp(element) => element.encode(),
                TradeFixtureCalls::Skip(element) => element.encode(),
                TradeFixtureCalls::StartHoax1(element) => element.encode(),
                TradeFixtureCalls::StartHoax3(element) => element.encode(),
                TradeFixtureCalls::StartHoax0(element) => element.encode(),
                TradeFixtureCalls::StartHoax2(element) => element.encode(),
                TradeFixtureCalls::Tip(element) => element.encode(),
                TradeFixtureCalls::Vm(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for TradeFixtureCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                TradeFixtureCalls::IsTest(element) => element.fmt(f),
                TradeFixtureCalls::Bound(element) => element.fmt(f),
                TradeFixtureCalls::DealWithToken(element) => element.fmt(f),
                TradeFixtureCalls::DealWithTokenAndAdjust(element) => element.fmt(f),
                TradeFixtureCalls::Deal(element) => element.fmt(f),
                TradeFixtureCalls::DeployCodeWithArgs(element) => element.fmt(f),
                TradeFixtureCalls::DeployCode(element) => element.fmt(f),
                TradeFixtureCalls::Failed(element) => element.fmt(f),
                TradeFixtureCalls::Hoax0(element) => element.fmt(f),
                TradeFixtureCalls::Hoax1(element) => element.fmt(f),
                TradeFixtureCalls::Hoax3(element) => element.fmt(f),
                TradeFixtureCalls::Hoax2(element) => element.fmt(f),
                TradeFixtureCalls::Rewind(element) => element.fmt(f),
                TradeFixtureCalls::SetUp(element) => element.fmt(f),
                TradeFixtureCalls::Skip(element) => element.fmt(f),
                TradeFixtureCalls::StartHoax1(element) => element.fmt(f),
                TradeFixtureCalls::StartHoax3(element) => element.fmt(f),
                TradeFixtureCalls::StartHoax0(element) => element.fmt(f),
                TradeFixtureCalls::StartHoax2(element) => element.fmt(f),
                TradeFixtureCalls::Tip(element) => element.fmt(f),
                TradeFixtureCalls::Vm(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<IsTestCall> for TradeFixtureCalls {
        fn from(var: IsTestCall) -> Self {
            TradeFixtureCalls::IsTest(var)
        }
    }
    impl ::std::convert::From<BoundCall> for TradeFixtureCalls {
        fn from(var: BoundCall) -> Self {
            TradeFixtureCalls::Bound(var)
        }
    }
    impl ::std::convert::From<DealWithTokenCall> for TradeFixtureCalls {
        fn from(var: DealWithTokenCall) -> Self {
            TradeFixtureCalls::DealWithToken(var)
        }
    }
    impl ::std::convert::From<DealWithTokenAndAdjustCall> for TradeFixtureCalls {
        fn from(var: DealWithTokenAndAdjustCall) -> Self {
            TradeFixtureCalls::DealWithTokenAndAdjust(var)
        }
    }
    impl ::std::convert::From<DealCall> for TradeFixtureCalls {
        fn from(var: DealCall) -> Self {
            TradeFixtureCalls::Deal(var)
        }
    }
    impl ::std::convert::From<DeployCodeWithArgsCall> for TradeFixtureCalls {
        fn from(var: DeployCodeWithArgsCall) -> Self {
            TradeFixtureCalls::DeployCodeWithArgs(var)
        }
    }
    impl ::std::convert::From<DeployCodeCall> for TradeFixtureCalls {
        fn from(var: DeployCodeCall) -> Self {
            TradeFixtureCalls::DeployCode(var)
        }
    }
    impl ::std::convert::From<FailedCall> for TradeFixtureCalls {
        fn from(var: FailedCall) -> Self {
            TradeFixtureCalls::Failed(var)
        }
    }
    impl ::std::convert::From<Hoax0Call> for TradeFixtureCalls {
        fn from(var: Hoax0Call) -> Self {
            TradeFixtureCalls::Hoax0(var)
        }
    }
    impl ::std::convert::From<Hoax1Call> for TradeFixtureCalls {
        fn from(var: Hoax1Call) -> Self {
            TradeFixtureCalls::Hoax1(var)
        }
    }
    impl ::std::convert::From<Hoax3Call> for TradeFixtureCalls {
        fn from(var: Hoax3Call) -> Self {
            TradeFixtureCalls::Hoax3(var)
        }
    }
    impl ::std::convert::From<Hoax2Call> for TradeFixtureCalls {
        fn from(var: Hoax2Call) -> Self {
            TradeFixtureCalls::Hoax2(var)
        }
    }
    impl ::std::convert::From<RewindCall> for TradeFixtureCalls {
        fn from(var: RewindCall) -> Self {
            TradeFixtureCalls::Rewind(var)
        }
    }
    impl ::std::convert::From<SetUpCall> for TradeFixtureCalls {
        fn from(var: SetUpCall) -> Self {
            TradeFixtureCalls::SetUp(var)
        }
    }
    impl ::std::convert::From<SkipCall> for TradeFixtureCalls {
        fn from(var: SkipCall) -> Self {
            TradeFixtureCalls::Skip(var)
        }
    }
    impl ::std::convert::From<StartHoax1Call> for TradeFixtureCalls {
        fn from(var: StartHoax1Call) -> Self {
            TradeFixtureCalls::StartHoax1(var)
        }
    }
    impl ::std::convert::From<StartHoax3Call> for TradeFixtureCalls {
        fn from(var: StartHoax3Call) -> Self {
            TradeFixtureCalls::StartHoax3(var)
        }
    }
    impl ::std::convert::From<StartHoax0Call> for TradeFixtureCalls {
        fn from(var: StartHoax0Call) -> Self {
            TradeFixtureCalls::StartHoax0(var)
        }
    }
    impl ::std::convert::From<StartHoax2Call> for TradeFixtureCalls {
        fn from(var: StartHoax2Call) -> Self {
            TradeFixtureCalls::StartHoax2(var)
        }
    }
    impl ::std::convert::From<TipCall> for TradeFixtureCalls {
        fn from(var: TipCall) -> Self {
            TradeFixtureCalls::Tip(var)
        }
    }
    impl ::std::convert::From<VmCall> for TradeFixtureCalls {
        fn from(var: VmCall) -> Self {
            TradeFixtureCalls::Vm(var)
        }
    }
    #[doc = "Container type for all return fields from the `IS_TEST` function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct IsTestReturn(pub bool);
    #[doc = "Container type for all return fields from the `bound` function with signature `bound(uint256,uint256,uint256)` and selector `[90, 108, 30, 237]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct BoundReturn {
        pub result: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `deployCode` function with signature `deployCode(string,bytes)` and selector `[41, 206, 157, 222]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct DeployCodeWithArgsReturn {
        pub addr: ethers::core::types::Address,
    }
    #[doc = "Container type for all return fields from the `deployCode` function with signature `deployCode(string)` and selector `[154, 131, 37, 160]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct DeployCodeReturn {
        pub addr: ethers::core::types::Address,
    }
    #[doc = "Container type for all return fields from the `failed` function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct FailedReturn(pub bool);
    #[doc = "Container type for all return fields from the `vm` function with signature `vm()` and selector `[58, 118, 132, 99]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct VmReturn(pub ethers::core::types::Address);
}
