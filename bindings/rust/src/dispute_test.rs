pub use disputetest_mod::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod disputetest_mod {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "DisputeTest was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static DISPUTETEST_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxFeePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"MaxFeePctChanged\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSafeBlockThreshold\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"SafeBlockThresholdChanged\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TokenWhitelisted\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"disputeId\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"filledAmount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TradeDisputed\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"filledAtBlock\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TradeFilled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"TradeRequested\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"filledAmount\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TradeSettled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"newFeePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"UpdatedFeeForTrade\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"msg\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"WARNING_Deprecated\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"logs\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"bound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deal\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"adjust\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deal\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deal\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"what\",\"type\":\"string\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deployCode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"what\",\"type\":\"string\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deployCode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"rewind\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setUp\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"skip\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotDisputeIfNotFilled\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotDisputeIfPeriodIsOver\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testDispute\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"tip\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"vm\",\"outputs\":[{\"internalType\":\"contract Vm\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static DISPUTETEST_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x608060408190526000805460ff191660011790556001625e79b760e01b031990527f81376b9868b292a46a1c486d344e427a3088657fda629b5f4a647822d329cd6a608452737109709ecfa91a80626ff3989d68f67f5b1dd12d63ffa1864960a46020604051808303816000875af115801562000080573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000a6919062000607565b600880546001600160a01b0319166001600160a01b03929092169190911790556040516001625e79b760e01b031981527f28cac318a86c8a0a6a9156c2dba2c8c2363677ba0514ef616592d81557e679b66004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa18649906024016020604051808303816000875af11580156200013b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000161919062000607565b600980546001600160a01b0319166001600160a01b03929092169190911790556040516001625e79b760e01b031981527f9791f723bf26b668c8cac0664b66d058cdb2a424cfb08c05dd9da570be0eff6f6004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa18649906024016020604051808303816000875af1158015620001f6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200021c919062000607565b600a60006101000a8154816001600160a01b0302191690836001600160a01b03160217905550620002bb73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486040518060400160405280601a81526020017f546f6b656e466978747572652e736f6c3a4d6f636b546f6b656e0000000000008152506006604051602001620002a5919062000632565b60408051601f1981840301815291905262000430565b600b60006101000a8154816001600160a01b0302191690836001600160a01b031602179055506200038c73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26040518060400160405280601a81526020017f546f6b656e466978747572652e736f6c3a4d6f636b546f6b656e0000000000008152506012604051602001620002a591906060808252600d908201526c2bb930b83832b21022ba3432b960991b608082015260a060208201819052600490820152630ae8aa8960e31b60c082015260ff91909116604082015260e00190565b600c80546001600160a01b039283166001600160a01b031991821681179092556064600f55601080548216909217909155600b54601180548316918416919091179055662386f26fc10000601255670de0b6b3a7640000601355600a546014805483169184169182179055600954601680548416919094161790925560178054909116909117905563773594006018553480156200042957600080fd5b506200080f565b60006001600160a01b0384163b80156200044e5784915050620004cc565b60006200045c8585620004d3565b9050806001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156200049d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620004c7919081019062000752565b509150505b9392505050565b604051638d1cc92560e01b81526000908190737109709ecfa91a80626ff3989d68f67f5b1dd12d90638d1cc9259062000511908790600401620007a7565b6000604051808303816000875af115801562000531573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200055b919081019062000752565b836040516020016200056f929190620007dc565b60405160208183030381529060405290508051602082016000f091506001600160a01b038216620006005760405162461bcd60e51b815260206004820152603160248201527f54657374206465706c6f79436f646528737472696e672c6279746573293a204460448201527032b83637bcb6b2b73a103330b4b632b21760791b606482015260840160405180910390fd5b5092915050565b6000602082840312156200061a57600080fd5b81516001600160a01b0381168114620004cc57600080fd5b606081526000620006576060830160048152635553444360e01b602082015260400190565b82810360208401526200067b8160048152635553444360e01b602082015260400190565b91505060ff8316604083015292915050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620006c0578181015183820152602001620006a6565b83811115620006d0576000848401525b50505050565b60006001600160401b0380841115620006f357620006f36200068d565b604051601f8501601f19908116603f011681019082821181831017156200071e576200071e6200068d565b816040528093508581528686860111156200073857600080fd5b62000748866020830187620006a3565b5050509392505050565b6000602082840312156200076557600080fd5b81516001600160401b038111156200077c57600080fd5b8201601f810184136200078e57600080fd5b6200079f84825160208401620006d6565b949350505050565b6020815260008251806020840152620007c8816040850160208701620006a3565b601f01601f19169190910160400192915050565b60008351620007f0818460208801620006a3565b83519083019062000806818360208801620006a3565b01949350505050565b617e1c806200081f6000396000f3fe60806040523480156200001157600080fd5b5060043610620001755760003560e01c80636f59707511620000d3578063c75b96441162000086578063c75b96441462000323578063c88a5e6d146200032d578063d06d82291462000344578063d82555f1146200035b578063e9a79a7b1462000372578063fa7626d4146200038957600080fd5b80636f597075146200029557806397754ae914620002ac5780639a8325a014620002c3578063af9bbe5f14620002da578063b9c071b414620002f1578063ba414fa6146200030857600080fd5b80632b56612b116200012c5780632b56612b14620002095780632d6c17a314620002135780633a768463146200022a5780633bf82db114620002415780635a6c1eed14620002585780636bce989b146200027e57600080fd5b80630a9254e4146200017a578063108554f21462000186578063231c9c36146200019d578063233240ee14620001a757806329a9e30014620001be57806329ce9dde14620001d5575b600080fd5b6200018462000397565b005b620001846200019736600462004b59565b620004be565b6200018462000597565b62000184620001b836600462004b88565b6200068d565b62000184620001cf36600462004baf565b62000769565b620001ec620001e636600462004cc8565b6200081b565b6040516001600160a01b0390911681526020015b60405180910390f35b620001846200094b565b620001846200022436600462004d48565b62000a37565b620001ec60008051602062007c0283398151915281565b620001846200025236600462004d62565b62000a77565b6200026f6200026936600462004da8565b62000b59565b60405190815260200162000200565b620001846200028f36600462004d62565b62000c92565b62000184620002a636600462004b88565b62000ca6565b62000184620002bd36600462004de4565b62000d50565b620001ec620002d436600462004e3e565b62000f91565b62000184620002eb36600462004d62565b62001093565b620001846200030236600462004d48565b62001141565b6200031262001162565b604051901515815260200162000200565b6200018462001293565b620001846200033e36600462004b59565b62001dcd565b620001846200035536600462004baf565b62001e03565b620001846200036c36600462004d62565b62001eb5565b620001846200038336600462004b59565b62001f66565b600054620003129060ff1681565b620003a16200200c565b601054600854601354620003c3926001600160a01b0390811692169062000c92565b601054601154601354601254601454600854600095620003fc956001600160a01b03918216959082169490939092908216911662002761565b601581905560115460165460185492935062000428926001600160a01b03928316929091169062000c92565b60165460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007c028339815191529063ca669fa790602401600060405180830381600087803b1580156200047d57600080fd5b505af115801562000492573d6000803e3d6000fd5b5050601154601254601554601854620004bb95506001600160a01b0390931693509091620028d6565b50565b60405163c88a5e6d60e01b815260008051602062007c028339815191529063c88a5e6d90620004f4908590859060040162004e7f565b600060405180830381600087803b1580156200050f57600080fd5b505af115801562000524573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b038516600482015260008051602062007c0283398151915292506306447d5691506024015b600060405180830381600087803b1580156200057a57600080fd5b505af11580156200058f573d6000803e3d6000fd5b505050505050565b620005b2600f546001620005ac919062004eae565b62002947565b604051630618f58760e51b8152632c02744560e11b600482015260008051602062007c028339815191529063c31eb0e090602401600060405180830381600087803b1580156200060157600080fd5b505af115801562000616573d6000803e3d6000fd5b5050600e5460115460125460155460405163023bcf5160e21b81526001600160a01b0394851696506308ef3d44955062000657949093169260040162004ec9565b600060405180830381600087803b1580156200067257600080fd5b505af115801562000687573d6000803e3d6000fd5b50505050565b60405163c88a5e6d60e01b815260008051602062007c028339815191529063c88a5e6d90620006c7908490600160801b9060040162004e7f565b600060405180830381600087803b158015620006e257600080fd5b505af1158015620006f7573d6000803e3d6000fd5b505060405163ca669fa760e01b81526001600160a01b038416600482015260008051602062007c02833981519152925063ca669fa791506024015b600060405180830381600087803b1580156200074d57600080fd5b505af115801562000762573d6000803e3d6000fd5b5050505050565b60405163c88a5e6d60e01b815260008051602062007c028339815191529063c88a5e6d90620007a3908590600160801b9060040162004e7f565b600060405180830381600087803b158015620007be57600080fd5b505af1158015620007d3573d6000803e3d6000fd5b50506040516323f2866760e11b81526001600160a01b0380861660048301528416602482015260008051602062007c0283398151915292506347e50cce91506044016200055f565b604051638d1cc92560e01b8152600090819060008051602062007c0283398151915290638d1cc925906200085490879060040162004f47565b6000604051808303816000875af115801562000874573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200089e919081019062004f5c565b83604051602001620008b292919062004fdc565b60405160208183030381529060405290508051602082016000f091506001600160a01b038216620009445760405162461bcd60e51b815260206004820152603160248201527f54657374206465706c6f79436f646528737472696e672c6279746573293a204460448201527032b83637bcb6b2b73a103330b4b632b21760791b60648201526084015b60405180910390fd5b5092915050565b60006200095c60016000196200500f565b60408051602480820184905282518083039091018152604490910182526020810180516001600160e01b0316631acc120960e11b179052905163f28dceb360e01b815291925060008051602062007c028339815191529163f28dceb391620009c79160040162004f47565b600060405180830381600087803b158015620009e257600080fd5b505af1158015620009f7573d6000803e3d6000fd5b5050600e5460115460125460405163023bcf5160e21b81526001600160a01b0393841695506308ef3d449450620007329390921691869060040162004ec9565b60008051602062007c0283398151915263e5d6bf0262000a5883426200500f565b6040518263ffffffff1660e01b81526004016200073291815260200190565b60405163c88a5e6d60e01b815260008051602062007c028339815191529063c88a5e6d9062000aad908690859060040162004e7f565b600060405180830381600087803b15801562000ac857600080fd5b505af115801562000add573d6000803e3d6000fd5b50506040516308b6ac0f60e31b81526001600160a01b0380871660048301528516602482015260008051602062007c0283398151915292506345b5607891506044015b600060405180830381600087803b15801562000b3b57600080fd5b505af115801562000b50573d6000803e3d6000fd5b50505050505050565b60008183111562000bd35760405162461bcd60e51b815260206004820152603a60248201527f5465737420626f756e642875696e743235362c75696e743235362c75696e743260448201527f3536293a204d6178206973206c657373207468616e206d696e2e00000000000060648201526084016200093b565b600062000be184846200500f565b90508060000362000bf55783915062000c35565b600019810362000c085784915062000c35565b62000c138162005029565b9050600062000c23828762005045565b905062000c31818662004eae565b9250505b60408051818152600c818301526b109bdd5b990814995cdd5b1d60a21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1509392505050565b62000ca1838383600062000d50565b505050565b60405163c88a5e6d60e01b815260008051602062007c028339815191529063c88a5e6d9062000ce0908490600160801b9060040162004e7f565b600060405180830381600087803b15801562000cfb57600080fd5b505af115801562000d10573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b038416600482015260008051602062007c0283398151915292506306447d56915060240162000732565b604080516001600160a01b0385811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166370a0823160e01b179052915160009287169162000da69162005068565b6000604051808303816000865af19150503d806000811462000de5576040519150601f19603f3d011682016040523d82523d6000602084013e62000dea565b606091505b5091505060008180602001905181019062000e06919062005086565b905062000e788462000e718762000e486370a0823160e01b62000e2b60018d6200298c565b9060038201805463ffffffff191660e09290921c91909117905590565b90600282018054600181018255600091825260209091206001600160a01b039290921691015590565b90620029b1565b82156200058f5760408051600481526024810182526020810180516001600160e01b03166318160ddd60e01b17905290516000916001600160a01b0389169162000ec3919062005068565b6000604051808303816000865af19150503d806000811462000f02576040519150601f19603f3d011682016040523d82523d6000602084013e62000f07565b606091505b5091505060008180602001905181019062000f23919062005086565b90508286101562000f4e5762000f3a86846200500f565b62000f4690826200500f565b905062000f69565b62000f5a83876200500f565b62000f66908262004eae565b90505b62000f878162000e716318160ddd60e01b62000e2b60018d6200298c565b5050505050505050565b604051638d1cc92560e01b8152600090819060008051602062007c0283398151915290638d1cc9259062000fca90869060040162004f47565b6000604051808303816000875af115801562000fea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001014919081019062004f5c565b90508051602082016000f091506001600160a01b0382166200108d5760405162461bcd60e51b815260206004820152602b60248201527f54657374206465706c6f79436f646528737472696e67293a204465706c6f796d60448201526a32b73a103330b4b632b21760a91b60648201526084016200093b565b50919050565b60405163c88a5e6d60e01b815260008051602062007c028339815191529063c88a5e6d90620010c9908690859060040162004e7f565b600060405180830381600087803b158015620010e457600080fd5b505af1158015620010f9573d6000803e3d6000fd5b50506040516323f2866760e11b81526001600160a01b0380871660048301528516602482015260008051602062007c0283398151915292506347e50cce915060440162000b20565b60008051602062007c0283398151915263e5d6bf0262000a58834262004eae565b60008054610100900460ff1615620011835750600054610100900460ff1690565b600060008051602062007c028339815191523b156200128e5760405160009060008051602062007c02833981519152907f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc490620011f09083906519985a5b195960d21b9060200162004e7f565b60408051601f1981840301815290829052620012109291602001620050a0565b60408051601f19818403018152908290526200122c9162005068565b6000604051808303816000865af19150503d80600081146200126b576040519150601f19603f3d011682016040523d82523d6000602084013e62001270565b606091505b50915050808060200190518101906200128a9190620050d3565b9150505b919050565b601554600e54600091620012fe91620012f891600191620012ef9190620012d390632d4d9a6360e01b9062000e2b9086906001600160a01b03166200298c565b9060028201805460018101825560009182526020909120015590565b90600482015590565b620029c1565b9050620013288160185460405180606001604052806030815260200162007d3c60309139620029e9565b601554600e546000916200136e9162001368918491620012ef9190620012d390632d4d9a6360e01b9062000e2b906001906001600160a01b03166200298c565b62002a25565b60165460408051606081019091526028808252929350620013a59284926001600160a01b0316919062007c22602083013962002a47565b601554600e54600091620013e691620012f891600291620012ef9190620012d390632d4d9a6360e01b9062000e2b906001906001600160a01b03166200298c565b90506200140e81436040518060600160405280603b815260200162007c4a603b9139620029e9565b600d546018546040516303ef4cfb60e11b815260048101919091526000916001600160a01b0316906307de99f690602401602060405180830381865afa1580156200145d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001483919062005086565b601154601754919250620014a5916001600160a01b0391821691168362000c92565b601154600e546040516370a0823160e01b81526001600160a01b03918216600482015260009291909116906370a0823190602401602060405180830381865afa158015620014f7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200151d919062005086565b6011546017546040516370a0823160e01b81526001600160a01b0391821660048201529293506000929116906370a0823190602401602060405180830381865afa15801562001570573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001596919062005086565b601654601754601154601854604080516001600160a01b0395861660208201529385169084015292166060820152608081019190915260a0810185905290915060009060c00160408051808303601f1901815290829052805160209091012060175463ca669fa760e01b83526001600160a01b03166004830152915060008051602062007c028339815191529063ca669fa790602401600060405180830381600087803b1580156200164757600080fd5b505af11580156200165c573d6000803e3d6000fd5b5050601154600d5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b393506200169b92909116906000199060040162004e7f565b6020604051808303816000875af1158015620016bb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620016e19190620050d3565b5060175460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007c028339815191529063ca669fa790602401600060405180830381600087803b1580156200173757600080fd5b505af11580156200174c573d6000803e3d6000fd5b5050600e546040516381bad6f360e01b8152600160048201819052602482018190526044820181905260648201526001600160a01b03909116608482015260008051602062007c0283398151915292506381bad6f3915060a401600060405180830381600087803b158015620017c157600080fd5b505af1158015620017d6573d6000803e3d6000fd5b50506015546016546018546012546040518796509394506001600160a01b03909216927fc293ada1a20d5f6111738a64aec9c7262db402de1650b576e691e321964bb01e926200182d928252602082015260400190565b60405180910390a4600e5460115460125460155460405163023bcf5160e21b81526001600160a01b03948516946308ef3d44946200187394911692909160040162004ec9565b600060405180830381600087803b1580156200188e57600080fd5b505af1158015620018a3573d6000803e3d6000fd5b5050600d54604051639d86698560e01b81526004810185905260009350839250829182918291829182916001600160a01b031690639d8669859060240160e060405180830381865afa158015620018fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620019249190620050f3565b96509650965096509650965096506200196d87601660009054906101000a90046001600160a01b031660405180606001604052806027815260200162007d906027913962002a47565b60175460408051606081019091526028808252620019a29289926001600160a01b039091169162007ca5602083013962002a47565b60115460408051606081019091526030808252620019d79288926001600160a01b039091169162007db7602083013962002a47565b620019ff8460185460405180606001604052806028815260200162007ccd60289139620029e9565b62001a41838c6040518060400160405280602081526020017f426f6e642073686f756c6420626520657175616c20746f2074686520626f6e64815250620029e9565b62001a848260006040518060400160405280601f81526020017f416e737765722073686f756c6420626520657175616c20746f2066616c73650081525062002a95565b62001adb81600281111562001a9d5762001a9d6200518a565b60016040518060400160405280602081526020017f53746174652073686f756c6420626520657175616c20746f2050656e64696e67815250620029e9565b601154600e546040516370a0823160e01b81526001600160a01b03918216600482015262001b849291909116906370a0823190602401602060405180830381865afa15801562001b2f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001b55919062005086565b60185462001b64908d6200500f565b60405180606001604052806027815260200162007d1560279139620029e9565b6011546017546040516370a0823160e01b81526001600160a01b03918216600482015262001c2a9291909116906370a0823190602401602060405180830381865afa15801562001bd8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001bfe919062005086565b62001c0a8d8c6200500f565b60405180606001604052806024815260200162007d6c60249139620029e9565b601554600e5460009162001c6a91620012f891600191620012ef9190620012d390632d4d9a6360e01b9062000e2b9086906001600160a01b03166200298c565b905062001caf8160006040518060400160405280601d81526020017f46696c6c656420616d6f756e742073686f756c6420626520756e736574000000815250620029e9565b601554600e5460009162001cef9162001368918491620012ef9190620012d390632d4d9a6360e01b9062000e2b906001906001600160a01b03166200298c565b905062001d348160006040518060400160405280601981526020017f46696c6c65642062792073686f756c6420626520756e7365740000000000000081525062002a47565b601554600e5460009162001d7591620012f891600291620012ef9190620012d390632d4d9a6360e01b9062000e2b906001906001600160a01b03166200298c565b905062001dba8160006040518060400160405280601f81526020017f46696c6c656420617420626c6f636b2073686f756c6420626520756e73657400815250620029e9565b5050505050505050505050505050505050565b60405163c88a5e6d60e01b815260008051602062007c028339815191529063c88a5e6d906200055f908590859060040162004e7f565b60405163c88a5e6d60e01b815260008051602062007c028339815191529063c88a5e6d9062001e3d908590600160801b9060040162004e7f565b600060405180830381600087803b15801562001e5857600080fd5b505af115801562001e6d573d6000803e3d6000fd5b50506040516308b6ac0f60e31b81526001600160a01b0380861660048301528416602482015260008051602062007c0283398151915292506345b5607891506044016200055f565b7f42b963ace015abb7c727e77dec115c5f418f4f96d9ec897f85c202793274661a60405162001f3b906020808252603b908201527f54686520607469706020737464636865617420686173206265656e206465707260408201527f6563617465642e2055736520606465616c6020696e73746561642e0000000000606082015260800190565b60405180910390a162000ca18162000e718462000e486370a0823160e01b62000e2b60018a6200298c565b60405163c88a5e6d60e01b815260008051602062007c028339815191529063c88a5e6d9062001f9c908590859060040162004e7f565b600060405180830381600087803b15801562001fb757600080fd5b505af115801562001fcc573d6000803e3d6000fd5b505060405163ca669fa760e01b81526001600160a01b038516600482015260008051602062007c02833981519152925063ca669fa791506024016200055f565b6200201662002ad5565b600e54600b54604051630ffb1d8b60e01b81526001600160a01b03918216600482015260016024820152911690630ffb1d8b90604401600060405180830381600087803b1580156200206757600080fd5b505af11580156200207c573d6000803e3d6000fd5b5050600e54600c54604051630ffb1d8b60e01b81526001600160a01b0391821660048201526001602482015291169250630ffb1d8b9150604401600060405180830381600087803b158015620020d157600080fd5b505af1158015620020e6573d6000803e3d6000fd5b5050600b54604080516318caf8e360e31b81526001600160a01b0390921660048084019190915260248301919091526044820152635553444360e01b606482015260008051602062007c02833981519152925063c657c7189150608401600060405180830381600087803b1580156200215e57600080fd5b505af115801562002173573d6000803e3d6000fd5b5050600c54604080516318caf8e360e31b81526001600160a01b0390921660048084019190915260248301919091526044820152630ae8aa8960e31b606482015260008051602062007c02833981519152925063c657c7189150608401600060405180830381600087803b158015620021eb57600080fd5b505af115801562002200573d6000803e3d6000fd5b50506008546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062007c0283398151915292506306447d569150602401600060405180830381600087803b1580156200225957600080fd5b505af11580156200226e573d6000803e3d6000fd5b5050600b54600e5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b39350620022ad92909116906000199060040162004e7f565b6020604051808303816000875af1158015620022cd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620022f39190620050d3565b50600c54600e5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926200232e929116906000199060040162004e7f565b6020604051808303816000875af11580156200234e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620023749190620050d3565b50604080516390c5013b60e01b8152905160008051602062007c02833981519152916390c5013b91600480830192600092919082900301818387803b158015620023bd57600080fd5b505af1158015620023d2573d6000803e3d6000fd5b50506009546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062007c0283398151915292506306447d569150602401600060405180830381600087803b1580156200242b57600080fd5b505af115801562002440573d6000803e3d6000fd5b5050600b54600e5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b393506200247f92909116906000199060040162004e7f565b6020604051808303816000875af11580156200249f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620024c59190620050d3565b50600c54600e5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39262002500929116906000199060040162004e7f565b6020604051808303816000875af115801562002520573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620025469190620050d3565b50604080516390c5013b60e01b8152905160008051602062007c02833981519152916390c5013b91600480830192600092919082900301818387803b1580156200258f57600080fd5b505af1158015620025a4573d6000803e3d6000fd5b5050600a546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062007c0283398151915292506306447d569150602401600060405180830381600087803b158015620025fd57600080fd5b505af115801562002612573d6000803e3d6000fd5b5050600b54600e5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b393506200265192909116906000199060040162004e7f565b6020604051808303816000875af115801562002671573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620026979190620050d3565b50600c54600e5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392620026d2929116906000199060040162004e7f565b6020604051808303816000875af1158015620026f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620027189190620050d3565b50604080516390c5013b60e01b8152905160008051602062007c02833981519152916390c5013b91600480830192600092919082900301818387803b1580156200067257600080fd5b600080600e60009054906101000a90046001600160a01b03166001600160a01b031663cd805d5e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620027b8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620027de919062005086565b60405163ca669fa760e01b81526001600160a01b038516600482015290915060008051602062007c028339815191529063ca669fa790602401600060405180830381600087803b1580156200283257600080fd5b505af115801562002847573d6000803e3d6000fd5b5050600e54604051639170c05b60e01b81526001600160a01b038c811660048301528b81166024830152604482018b9052606482018a905288811660848301529091169250639170c05b915060a401600060405180830381600087803b158015620028b157600080fd5b505af1158015620028c6573d6000803e3d6000fd5b50929a9950505050505050505050565b600e5460405162a755af60e61b81526001600160a01b038681166004830152602482018690526044820185905260648201849052909116906329d56bc090608401600060405180830381600087803b1580156200293257600080fd5b505af115801562000f87573d6000803e3d6000fd5b600062002955824362004eae565b6040516301f7b4f360e41b81526004810182905290915060008051602062007c0283398151915290631f7b4f30906024016200055f565b6005820180546001600160a01b0319166001600160a01b039290921691909117905590565b620029bd828262002ba4565b5050565b6000620029ce8262002f9f565b806020019051810190620029e3919062005086565b92915050565b81831462000ca15760008051602062007c858339815191528160405162002a119190620051a0565b60405180910390a162000ca1838362003067565b600062002a328262002f9f565b806020019051810190620029e39190620051d1565b816001600160a01b0316836001600160a01b03161462000ca15760008051602062007c858339815191528160405162002a819190620051a0565b60405180910390a162000ca183836200315e565b8115158315151462000ca15760008051602062007c858339815191528160405162002ac19190620051a0565b60405180910390a162000ca1838362003258565b62002adf620033ad565b600f54600d546040516001600160a01b039091169062002aff9062004aec565b9182526001600160a01b03166020820152604001604051809103906000f08015801562002b30573d6000803e3d6000fd5b50600e80546001600160a01b0319166001600160a01b03929092169182179055604080516318caf8e360e31b81526004808201939093526024810191909152604481019190915263426f6f6b60e01b606482015260008051602062007c028339815191529063c657c7189060840162000657565b600582015460038301546004840154600285018054604080516020808402820181019092528281526001600160a01b039096169560e09590951b946000939092909183018282801562002c1757602002820191906000526020600020905b81548152602001906001019080831162002c02575b5050505050905060008362002c2c836200393f565b60405160200162002c3f929190620050a0565b60408051601f198184030181528282526001600160a01b038816600090815260018b0160209081528382206001600160e01b03198a16835281529281209194509092909162002c93918691889101620051f1565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff1662002cce5762002ccc87620039ec565b505b6001600160a01b0385166000908152602088815260408083206001600160e01b031988168452825280832090519091839162002d0f918791899101620051f1565b6040516020818303038152906040528051906020012081526020019081526020016000205460001b9050600080876001600160a01b03168460405162002d56919062005068565b600060405180830381855afa9150503d806000811462002d93576040519150601f19603f3d011682016040523d82523d6000602084013e62002d98565b606091505b50915062002db590508162002daf8860206200522d565b62004774565b604051630667f9d760e41b81529092506000915060008051602062007c028339815191529063667f9d709062002df2908b90879060040162004e7f565b6020604051808303816000875af115801562002e12573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002e38919062005086565b905080821462002eee5760405162461bcd60e51b815260206004820152606e60248201527f73746453746f726167652066696e642853746453746f72616765293a2050616360448201527f6b656420736c6f742e205468697320776f756c642063617573652064616e676560648201527f726f7573206f76657277726974696e6720616e642063757272656e746c79206960848201526d39b73a1039bab83837b93a32b21760911b60a482015260c4016200093b565b6040516370ca10bb60e01b815260008051602062007c02833981519152906370ca10bb9062002f26908b9087908e9060040162004ec9565b600060405180830381600087803b15801562002f4157600080fd5b505af115801562002f56573d6000803e3d6000fd5b50505060058b0180546001600160a01b03191690555060038a01805463ffffffff1916905562002f8b60028b01600062004afa565b896004016000905550505050505050505050565b60058101546060906001600160a01b0316600062002fbd84620039ec565b604051630667f9d760e41b815290915060008051602062007c028339815191529063667f9d709062002ff6908590859060040162004e7f565b6020604051808303816000875af115801562003016573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200303c919062005086565b6040516020016200304f91815260200190565b60405160208183030381529060405292505050919050565b808214620029bd577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051620030da9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8816040516200311391906200524f565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8826040516200314c919062005288565b60405180910390a1620029bd620047fe565b806001600160a01b0316826001600160a01b031614620029bd577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051620031e69060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b616464604082015264726573735d60d81b606082015260800190565b60405180910390a17f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f816040516200321f9190620052b3565b60405180910390a17f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f826040516200314c9190620052f8565b80151582151514620029bd577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051620032cf9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b626f6f6040820152616c5d60f01b606082015260800190565b60405180910390a160008051602062007c858339815191528162003311576040518060400160405280600581526020016466616c736560d81b8152506200332f565b604051806040016040528060048152602001637472756560e01b8152505b6040516200333e919062005323565b60405180910390a160008051602062007c858339815191528262003380576040518060400160405280600581526020016466616c736560d81b8152506200339e565b604051806040016040528060048152602001637472756560e01b8152505b6040516200314c919062005362565b620033b762004902565b604051620033c59062004b1a565b604051809103906000f080158015620033e2573d6000803e3d6000fd5b50600d80546001600160a01b0319166001600160a01b03929092169182179055604080516318caf8e360e31b815260048101929092526024820152601060448201526f416c6c4b6e6f77696e674f7261636c6560801b606482015260008051602062007c028339815191529063c657c71890608401600060405180830381600087803b1580156200347257600080fd5b505af115801562003487573d6000803e3d6000fd5b50506008546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062007c0283398151915292506306447d569150602401600060405180830381600087803b158015620034e057600080fd5b505af1158015620034f5573d6000803e3d6000fd5b5050600b54600d5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b393506200353492909116906000199060040162004e7f565b6020604051808303816000875af115801562003554573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200357a9190620050d3565b50600c54600d5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392620035b5929116906000199060040162004e7f565b6020604051808303816000875af1158015620035d5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620035fb9190620050d3565b50604080516390c5013b60e01b8152905160008051602062007c02833981519152916390c5013b91600480830192600092919082900301818387803b1580156200364457600080fd5b505af115801562003659573d6000803e3d6000fd5b50506009546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062007c0283398151915292506306447d569150602401600060405180830381600087803b158015620036b257600080fd5b505af1158015620036c7573d6000803e3d6000fd5b5050600b54600d5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b393506200370692909116906000199060040162004e7f565b6020604051808303816000875af115801562003726573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200374c9190620050d3565b50600c54600d5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39262003787929116906000199060040162004e7f565b6020604051808303816000875af1158015620037a7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620037cd9190620050d3565b50604080516390c5013b60e01b8152905160008051602062007c02833981519152916390c5013b91600480830192600092919082900301818387803b1580156200381657600080fd5b505af11580156200382b573d6000803e3d6000fd5b5050600d54600b54604051630ffb1d8b60e01b81526001600160a01b0391821660048201526001602482015291169250630ffb1d8b9150604401600060405180830381600087803b1580156200388057600080fd5b505af115801562003895573d6000803e3d6000fd5b5050600d54600c54604051630ffb1d8b60e01b81526001600160a01b0391821660048201526001602482015291169250630ffb1d8b9150604401600060405180830381600087803b158015620038ea57600080fd5b505af1158015620038ff573d6000803e3d6000fd5b5050600d54600a5460405163194f29df60e11b81526001600160a01b039182166004820152600160248201529116925063329e53be915060440162000657565b60606000825160206200395391906200522d565b67ffffffffffffffff8111156200396e576200396e62004bed565b6040519080825280601f01601f19166020018201604052801562003999576020820181803683370190505b50905060005b835181101562000944576000848281518110620039c057620039c06200538d565b602002602001015190508082602002602001840152508080620039e39062005029565b9150506200399f565b600581015460038201546004830154600284018054604080516020808402820181019092528281526000966001600160a01b03169560e01b94938793919290919083018282801562003a5e57602002820191906000526020600020905b81548152602001906001019080831162003a49575b5050506001600160a01b038716600090815260018a01602090815260408083206001600160e01b03198a168452825280832090519596509491935062003aaa92508591879101620051f1565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff161562003b49576001600160a01b0384166000908152602087815260408083206001600160e01b0319871684528252808320905190929162003b19918591879101620051f1565b60405160208183030381529060405280519060200120815260200190815260200160002054945050505050919050565b60008362003b57836200393f565b60405160200162003b6a929190620050a0565b604051602081830303815290604052905060008051602062007cf583398151915260001c6001600160a01b031663266cf1096040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562003bc957600080fd5b505af115801562003bde573d6000803e3d6000fd5b50505050600080866001600160a01b03168360405162003bff919062005068565b600060405180830381855afa9150503d806000811462003c3c576040519150601f19603f3d011682016040523d82523d6000602084013e62003c41565b606091505b50915062003c5890508162002daf8760206200522d565b6040516365bc948160e01b81526001600160a01b03891660048201529092506000915060008051602062007c02833981519152906365bc9481906024016000604051808303816000875af115801562003cb5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262003cdf91908101906200542c565b50905080516001036200403957600060008051602062007cf583398151915260001c6001600160a01b031663667f9d70898460008151811062003d265762003d266200538d565b60200260200101516040518363ffffffff1660e01b815260040162003d4d92919062004e7f565b6020604051808303816000875af115801562003d6d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003d93919062005086565b90508062003df7577f080fc4a96620c4462e705b23f346413fe3796bb63c6f8d8591baec0e231577a5888360008151811062003dd35762003dd36200538d565b602002602001015160001c60405162003dee92919062004e7f565b60405180910390a15b80831462003eaa5760405162461bcd60e51b815260206004820152606d60248201527f73746453746f726167652066696e642853746453746f72616765293a2050616360448201527f6b656420736c6f742e205468697320776f756c642063617573652064616e676560648201527f726f7573206f76657277726974696e6720616e642063757272656e746c79206960848201526c1cdb9d081cdd5c1c1bdc9d1959609a1b60a482015260c4016200093b565b7f9c9555b1e3102e3cf48f427d79cb678f5d9bd1ed0ad574389461e255f95170ed8888878960405160200162003ee2929190620051f1565b604051602081830303815290604052805190602001208560008151811062003f0e5762003f0e6200538d565b602002602001015160001c60405162003f2b94939291906200548d565b60405180910390a18160008151811062003f495762003f496200538d565b6020908102919091018101516001600160a01b038a1660009081528c835260408082206001600160e01b03198c168352845280822090519293909262003f94918a918c9101620051f1565b60408051601f1981840301815291815281516020928301208352828201939093529082016000908120939093556001600160a01b038b16835260018d810182528284206001600160e01b03198c1685528252828420925190939162003ffe918a918c9101620051f1565b60408051808303601f19018152918152815160209283012083529082019290925201600020805460ff191691151591909117905550620045f7565b600181511115620045865760005b81518110156200457f57600060008051602062007cf583398151915260001c6001600160a01b031663667f9d708a8585815181106200408a576200408a6200538d565b60200260200101516040518363ffffffff1660e01b8152600401620040b192919062004e7f565b6020604051808303816000875af1158015620040d1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620040f7919062005086565b9050806200415a577f080fc4a96620c4462e705b23f346413fe3796bb63c6f8d8591baec0e231577a5898484815181106200413657620041366200538d565b602002602001015160001c6040516200415192919062004e7f565b60405180910390a15b60008051602062007cf583398151915260001c6001600160a01b03166370ca10bb8a8585815181106200419157620041916200538d565b602002602001015161133760f01b6040518463ffffffff1660e01b8152600401620041bf9392919062004ec9565b600060405180830381600087803b158015620041da57600080fd5b505af1158015620041ef573d6000803e3d6000fd5b50505050600060608a6001600160a01b03168760405162004211919062005068565b600060405180830381855afa9150503d80600081146200424e576040519150601f19603f3d011682016040523d82523d6000602084013e62004253565b606091505b5090925090506200426b8162002daf8b60206200522d565b95508180156200427f575061133760f01b86145b15620044d2577f9c9555b1e3102e3cf48f427d79cb678f5d9bd1ed0ad574389461e255f95170ed8b8b8a8c604051602001620042bd929190620051f1565b60405160208183030381529060405280519060200120888881518110620042e857620042e86200538d565b602002602001015160001c6040516200430594939291906200548d565b60405180910390a18484815181106200432257620043226200538d565b6020908102919091018101516001600160a01b038d1660009081528f835260408082206001600160e01b03198f16835284528082209051929390926200436d918d918f9101620051f1565b6040516020818303038152906040528051906020012081526020019081526020016000208190555060018d60010160008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008c6001600160e01b0319166001600160e01b031916815260200190815260200160002060008a8c604051602001620043fa929190620051f1565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548160ff02191690831515021790555060008051602062007cf583398151915260001c6001600160a01b03166370ca10bb8c8787815181106200446c576200446c6200538d565b6020026020010151866040518463ffffffff1660e01b8152600401620044959392919062004ec9565b600060405180830381600087803b158015620044b057600080fd5b505af1158015620044c5573d6000803e3d6000fd5b505050505050506200457f565b60008051602062007cf583398151915260001c6001600160a01b03166370ca10bb8c8787815181106200450957620045096200538d565b6020026020010151866040518463ffffffff1660e01b8152600401620045329392919062004ec9565b600060405180830381600087803b1580156200454d57600080fd5b505af115801562004562573d6000803e3d6000fd5b505050505050508080620045769062005029565b91505062004047565b50620045f7565b6040805162461bcd60e51b81526020600482015260248101919091527f73746453746f726167652066696e642853746453746f72616765293a204e6f2060448201527f73746f726167652075736520646574656374656420666f72207461726765742e60648201526084016200093b565b6001600160a01b038716600090815260018a01602090815260408083206001600160e01b03198a168452825280832090519092916200463b9188918a9101620051f1565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff16620046ca5760405162461bcd60e51b815260206004820152602f60248201527f73746453746f726167652066696e642853746453746f72616765293a20536c6f60448201526e3a143994903737ba103337bab7321760891b60648201526084016200093b565b6005890180546001600160a01b031916905560038901805463ffffffff19169055620046fb60028a01600062004afa565b600060048a018190556001600160a01b038816815260208a815260408083206001600160e01b03198a16845282528083209051909291620047419188918a9101620051f1565b60405160208183030381529060405280519060200120815260200190815260200160002054975050505050505050919050565b600080600060208551116200478b5784516200478e565b60205b905060005b81811015620047f457620047a98160086200522d565b86620047b6838862004eae565b81518110620047c957620047c96200538d565b01602001516001600160f81b031916901c929092179180620047eb8162005029565b91505062004793565b5090949350505050565b60008051602062007c028339815191523b15620048f15760405160009060008051602062007c02833981519152907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc4906200486c9083906519985a5b195960d21b9060019060200162004ec9565b60408051601f19818403018152908290526200488c9291602001620050a0565b60408051601f1981840301815290829052620048a89162005068565b6000604051808303816000865af19150503d8060008114620048e7576040519150601f19603f3d011682016040523d82523d6000602084013e620048ec565b606091505b505050505b6000805461ff001916610100179055565b600854604080516318caf8e360e31b81526001600160a01b03909216600483015260248201526005604482015264416c69636560d81b606482015260008051602062007c028339815191529063c657c71890608401600060405180830381600087803b1580156200497257600080fd5b505af115801562004987573d6000803e3d6000fd5b5050600954604080516318caf8e360e31b81526001600160a01b039092166004830152602482015260036044820152622137b160e91b606482015260008051602062007c02833981519152925063c657c7189150608401600060405180830381600087803b158015620049f957600080fd5b505af115801562004a0e573d6000803e3d6000fd5b5050600a54604080516318caf8e360e31b81526001600160a01b03909216600483015260248201526007604482015266436861726c696560c81b606482015260008051602062007c02833981519152925063c657c7189150608401600060405180830381600087803b15801562004a8457600080fd5b505af115801562004a99573d6000803e3d6000fd5b5050604080516318caf8e360e31b815230600482015260248101919091526003604482015262596f7560e81b606482015260008051602062007c02833981519152925063c657c718915060840162000657565b61195d80620054be83390190565b5080546000825590600052602060002090810190620004bb919062004b28565b610de78062006e1b83390190565b5b8082111562004b3f576000815560010162004b29565b5090565b6001600160a01b0381168114620004bb57600080fd5b6000806040838503121562004b6d57600080fd5b823562004b7a8162004b43565b946020939093013593505050565b60006020828403121562004b9b57600080fd5b813562004ba88162004b43565b9392505050565b6000806040838503121562004bc357600080fd5b823562004bd08162004b43565b9150602083013562004be28162004b43565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171562004c2f5762004c2f62004bed565b604052919050565b600067ffffffffffffffff82111562004c545762004c5462004bed565b50601f01601f191660200190565b600062004c7962004c738462004c37565b62004c03565b905082815283838301111562004c8e57600080fd5b828260208301376000602084830101529392505050565b600082601f83011262004cb757600080fd5b62004ba88383356020850162004c62565b6000806040838503121562004cdc57600080fd5b823567ffffffffffffffff8082111562004cf557600080fd5b62004d038683870162004ca5565b9350602085013591508082111562004d1a57600080fd5b508301601f8101851362004d2d57600080fd5b62004d3e8582356020840162004c62565b9150509250929050565b60006020828403121562004d5b57600080fd5b5035919050565b60008060006060848603121562004d7857600080fd5b833562004d858162004b43565b9250602084013562004d978162004b43565b929592945050506040919091013590565b60008060006060848603121562004dbe57600080fd5b505081359360208301359350604090920135919050565b8015158114620004bb57600080fd5b6000806000806080858703121562004dfb57600080fd5b843562004e088162004b43565b9350602085013562004e1a8162004b43565b925060408501359150606085013562004e338162004dd5565b939692955090935050565b60006020828403121562004e5157600080fd5b813567ffffffffffffffff81111562004e6957600080fd5b62004e778482850162004ca5565b949350505050565b6001600160a01b03929092168252602082015260400190565b634e487b7160e01b600052601160045260246000fd5b6000821982111562004ec45762004ec462004e98565b500190565b6001600160a01b039390931683526020830191909152604082015260600190565b60005b8381101562004f0757818101518382015260200162004eed565b83811115620006875750506000910152565b6000815180845262004f3381602086016020860162004eea565b601f01601f19169290920160200192915050565b60208152600062004ba8602083018462004f19565b60006020828403121562004f6f57600080fd5b815167ffffffffffffffff81111562004f8757600080fd5b8201601f8101841362004f9957600080fd5b805162004faa62004c738262004c37565b81815285602083850101111562004fc057600080fd5b62004fd382602083016020860162004eea565b95945050505050565b6000835162004ff081846020880162004eea565b8351908301906200500681836020880162004eea565b01949350505050565b60008282101562005024576200502462004e98565b500390565b6000600182016200503e576200503e62004e98565b5060010190565b6000826200506357634e487b7160e01b600052601260045260246000fd5b500690565b600082516200507c81846020870162004eea565b9190910192915050565b6000602082840312156200509957600080fd5b5051919050565b6001600160e01b0319831681528151600090620050c581600485016020870162004eea565b919091016004019392505050565b600060208284031215620050e657600080fd5b815162004ba88162004dd5565b600080600080600080600060e0888a0312156200510f57600080fd5b87516200511c8162004b43565b60208901519097506200512f8162004b43565b6040890151909650620051428162004b43565b80955050606088015193506080880151925060a0880151620051648162004dd5565b60c0890151909250600381106200517a57600080fd5b8091505092959891949750929550565b634e487b7160e01b600052602160045260246000fd5b60408152600560408201526422b93937b960d91b606082015260806020820152600062004ba8608083018462004f19565b600060208284031215620051e457600080fd5b815162004ba88162004b43565b825160009082906020808701845b838110156200521d57815185529382019390820190600101620051ff565b5050948252509092019392505050565b60008160001904831182151516156200524a576200524a62004e98565b500290565b6040815260006200527a60408301600a8152690808115e1c1958dd195960b21b602082015260400190565b905082602083015292915050565b6040815260006200527a60408301600a815269080808081058dd1d585b60b21b602082015260400190565b604081526000620052de60408301600a8152690808115e1c1958dd195960b21b602082015260400190565b6001600160a01b0393909316602092909201919091525090565b604081526000620052de60408301600a815269080808081058dd1d585b60b21b602082015260400190565b6040815260006200534e60408301600a8152690808115e1c1958dd195960b21b602082015260400190565b828103602084015262004e77818562004f19565b6040815260006200534e60408301600a815269080808081058dd1d585b60b21b602082015260400190565b634e487b7160e01b600052603260045260246000fd5b600082601f830112620053b557600080fd5b8151602067ffffffffffffffff821115620053d457620053d462004bed565b8160051b620053e582820162004c03565b92835284810182019282810190878511156200540057600080fd5b83870192505b84831015620054215782518252918301919083019062005406565b979650505050505050565b600080604083850312156200544057600080fd5b825167ffffffffffffffff808211156200545957600080fd5b6200546786838701620053a3565b935060208501519150808211156200547e57600080fd5b5062004d3e85828601620053a3565b6001600160a01b039490941684526001600160e01b0319929092166020840152604083015260608201526080019056fe60a060405260018055600060025534801561001957600080fd5b5060405161195d38038061195d83398101604081905261003891610106565b600080546001600160a01b031916339081178255604051909182917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76908290a3506001600160a01b03811660805260038290556040518281527fcf29a5174acb8c175d760a7381ffc52c6ae644e3a4ba3fa7e01344f959cd76159060200160405180910390a16703782dace9d9000060048190556040519081527f841095ec206e4a3d8124f54a431661bd653b296066d7d695baaa9178e9d21bb49060200160405180910390a15050610143565b6000806040838503121561011957600080fd5b825160208401519092506001600160a01b038116811461013857600080fd5b809150509250929050565b6080516117e361017a6000396000818161021601528181610425015281816104ef01528181610548015261060201526117e36000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80635881266d116100a2578063bd20a85911610071578063bd20a85914610276578063cd805d5e14610289578063daf9c21014610292578063e02c0279146102c5578063fc711c3a146102d857600080fd5b80635881266d146101fe5780637dc0d1d0146102115780638da5cb5b146102505780639170c05b1461026357600080fd5b806313af4035116100de57806313af4035146101675780632613f3071461017a57806329d56bc01461018d5780632d4d9a63146101a057600080fd5b806308ef3d44146101105780630ff0c00e146101255780630ffb1d8b1461014157806310f40e6a14610154575b600080fd5b61012361011e36600461140f565b6102e1565b005b61012e60035481565b6040519081526020015b60405180910390f35b61012361014f366004611450565b6105b1565b6101236101623660046114c9565b6106f7565b61012361017536600461154b565b610757565b61012361018836600461156d565b6107cc565b61012361019b366004611586565b610832565b6101d96101ae36600461156d565b6006602052600090815260409020805460018201546002909201546001600160a01b03909116919083565b604080516001600160a01b039094168452602084019290925290820152606001610138565b61012361020c3660046115bf565b6108b5565b6102387f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610138565b600054610238906001600160a01b031681565b610123610271366004611627565b61095d565b61012361028436600461156d565b610b0a565b61012e60025481565b6102b56102a036600461154b565b60056020526000908152604090205460ff1681565b6040519015158152602001610138565b6101236102d336600461167e565b610b91565b61012e60045481565b6001546001146103255760405162461bcd60e51b815260206004820152600a6024820152695245454e5452414e435960b01b60448201526064015b60405180910390fd5b600260015561033381610cf5565b61035357604051631acc120960e11b81526004810182905260240161031c565b600081815260066020908152604091829020825160608101845281546001600160a01b0316815260018201549281019290925260020154918101829052600354909161039f90436116f3565b106103bd57604051632c02744560e11b815260040160405180910390fd5b602081810151825160008581526006909352604080842080546001600160a01b031916815560018101859055600201849055516384bfabcf60e01b81526001600160a01b038083166004830152336024830152888116604483015260648201849052929391927f000000000000000000000000000000000000000000000000000000000000000016906384bfabcf90608401602060405180830381865afa15801561046c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610490919061170a565b90508085836001600160a01b03167fc293ada1a20d5f6111738a64aec9c7262db402de1650b576e691e321964bb01e868a6040516104d8929190918252602082015260400190565b60405180910390a46105146001600160a01b0388167f000000000000000000000000000000000000000000000000000000000000000085610d36565b604051632bd6267f60e21b81526001600160a01b0383811660048301523360248301528881166044830152606482018590527f0000000000000000000000000000000000000000000000000000000000000000169063af5899fc90608401600060405180830381600087803b15801561058c57600080fd5b505af11580156105a0573d6000803e3d6000fd5b505060018055505050505050505050565b6000546001600160a01b031633146105db5760405162461bcd60e51b815260040161031c90611723565b80801561066f5750604051630daf9c2160e41b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063daf9c21090602401602060405180830381865afa158015610649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066d9190611749565b155b15610698576040516313c42eef60e21b81526001600160a01b038316600482015260240161031c565b6001600160a01b038216600081815260056020908152604091829020805460ff191685151590811790915591519182527fef81a9943b96c8df4ef243401c9bf5159146166211356898b52d382086168d92910160405180910390a25050565b6107048487858585610db3565b61070f878787610f1a565b60408051848152602081018790524391889133917f970202b118cfe4d540f3c2eac57995322281324b625e43838fb87e30e0753b9e910160405180910390a450505050505050565b6000546001600160a01b031633146107815760405162461bcd60e51b815260040161031c90611723565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a350565b6000546001600160a01b031633146107f65760405162461bcd60e51b815260040161031c90611723565b60038190556040518181527fcf29a5174acb8c175d760a7381ffc52c6ae644e3a4ba3fa7e01344f959cd7615906020015b60405180910390a150565b6000828152600660205260409020600201541561086557604051638b6bbbad60e01b81526004810183905260240161031c565b610870848383610f1a565b60408051848152602081018390524391849133917f970202b118cfe4d540f3c2eac57995322281324b625e43838fb87e30e0753b9e910160405180910390a450505050565b6004548411156108db576040516305bf279d60e41b81526004810185905260240161031c565b6108e483610cf5565b1561090557604051638b6bbbad60e01b81526004810184905260240161031c565b6109128584868585610db3565b82856001600160a01b03167f6ab91dbc42f726b630639350395426be048c50255f12e82d28e2dffac41745938660405161094e91815260200190565b60405180910390a35050505050565b6001600160a01b03851660009081526005602052604090205460ff166109a15760405163f602627d60e01b81526001600160a01b038616600482015260240161031c565b6001600160a01b03841660009081526005602052604090205460ff166109e55760405163f602627d60e01b81526001600160a01b038516600482015260240161031c565b836001600160a01b0316856001600160a01b031603610a1757604051631d2792fb60e31b815260040160405180910390fd5b600454821115610a3d576040516305bf279d60e41b81526004810183905260240161031c565b82600003610a5e5760405163abc5ee6f60e01b815260040160405180910390fd5b6001600160a01b038116610a8557604051631feef77d60e01b815260040160405180910390fd5b610a9a6001600160a01b038616333086610f80565b60025460408051858152602081018590526001600160a01b03848116828401529151878316928916917f7361c265d28ece9d5df249995186533440e0b7a1310ae54d496fa1783056e3da919081900360600190a460028054906000610afe83611766565b91905055505050505050565b6000546001600160a01b03163314610b345760405162461bcd60e51b815260040161031c90611723565b670de0b6b3a76400008110610b5c57604051636a143fdd60e11b815260040160405180910390fd5b60048190556040518181527f841095ec206e4a3d8124f54a431661bd653b296066d7d695baaa9178e9d21bb490602001610827565b610b9a81610cf5565b610bba57604051631acc120960e11b81526004810182905260240161031c565b600081815260066020908152604091829020825160608101845281546001600160a01b03168152600182015492810192909252600201549181018290526003549091610c0690436116f3565b1015610c4a576000816040015143610c1e91906116f3565b600354610c2b91906116f3565b9050806040516325797e0360e11b815260040161031c91815260200190565b6020808201518251600085815260069093526040832080546001600160a01b0319168155600181018490556002019290925590610c916001600160a01b038916868461100a565b610ca56001600160a01b038a16828961100a565b8184826001600160a01b03167f3281f74a3f7405b6bd35e9687b3fcaaf242c466ac789d117f22b62b140af8dcc89604051610ce291815260200190565b60405180910390a4505050505050505050565b600090815260066020908152604091829020825160608101845281546001600160a01b03168152600182015492810192909252600201549101819052151590565b600060405163095ea7b360e01b8152836004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080610dad5760405162461bcd60e51b815260206004820152600e60248201526d1054141493d59157d1905253115160921b604482015260640161031c565b50505050565b600454831115610dd9576040516305bf279d60e41b81526004810184905260240161031c565b610de284610cf5565b15610e0357604051638b6bbbad60e01b81526004810185905260240161031c565b604080517f0efb9dda140a951df4393d44ca40349032d31811466afd20eacd4b4136c3f4986020808301919091528183018790526060808301879052835180840390910181526080830184528051908201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000060a084015260bc8084018290528451808503909101815260dc90930190935281519101206000610edc8286868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061108292505050565b9050876001600160a01b0316816001600160a01b031614610f10576040516324a0dbd760e21b815260040160405180910390fd5b5050505050505050565b60408051606081018252338082526020808301858152438486019081526000888152600690935294909120835181546001600160a01b0319166001600160a01b039182161782559151600182015593516002909401939093559091610dad919086169030855b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d11600160005114161716915050806110035760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b604482015260640161031c565b5050505050565b600060405163a9059cbb60e01b8152836004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080610dad5760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b604482015260640161031c565b600080600061109185856110a6565b9150915061109e81611114565b509392505050565b60008082516041036110dc5760208301516040840151606085015160001a6110d0878285856112cd565b9450945050505061110d565b825160400361110557602083015160408401516110fa8683836113ba565b93509350505061110d565b506000905060025b9250929050565b60008160048111156111285761112861177f565b036111305750565b60018160048111156111445761114461177f565b036111915760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161031c565b60028160048111156111a5576111a561177f565b036111f25760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161031c565b60038160048111156112065761120661177f565b0361125e5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161031c565b60048160048111156112725761127261177f565b036112ca5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161031c565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561130457506000905060036113b1565b8460ff16601b1415801561131c57508460ff16601c14155b1561132d57506000905060046113b1565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611381573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166113aa576000600192509250506113b1565b9150600090505b94509492505050565b6000806001600160ff1b038316816113d760ff86901c601b611795565b90506113e5878288856112cd565b935093505050935093915050565b80356001600160a01b038116811461140a57600080fd5b919050565b60008060006060848603121561142457600080fd5b61142d846113f3565b95602085013595506040909401359392505050565b80151581146112ca57600080fd5b6000806040838503121561146357600080fd5b61146c836113f3565b9150602083013561147c81611442565b809150509250929050565b60008083601f84011261149957600080fd5b50813567ffffffffffffffff8111156114b157600080fd5b60208301915083602082850101111561110d57600080fd5b600080600080600080600060c0888a0312156114e457600080fd5b6114ed886113f3565b96506020880135955060408801359450611509606089016113f3565b93506080880135925060a088013567ffffffffffffffff81111561152c57600080fd5b6115388a828b01611487565b989b979a50959850939692959293505050565b60006020828403121561155d57600080fd5b611566826113f3565b9392505050565b60006020828403121561157f57600080fd5b5035919050565b6000806000806080858703121561159c57600080fd5b6115a5856113f3565b966020860135965060408601359560600135945092505050565b6000806000806000608086880312156115d757600080fd5b6115e0866113f3565b94506020860135935060408601359250606086013567ffffffffffffffff81111561160a57600080fd5b61161688828901611487565b969995985093965092949392505050565b600080600080600060a0868803121561163f57600080fd5b611648866113f3565b9450611656602087016113f3565b93506040860135925060608601359150611672608087016113f3565b90509295509295909350565b60008060008060008060c0878903121561169757600080fd5b6116a0876113f3565b95506116ae602088016113f3565b945060408701359350606087013592506116ca608088016113f3565b915060a087013590509295509295509295565b634e487b7160e01b600052601160045260246000fd5b600082821015611705576117056116dd565b500390565b60006020828403121561171c57600080fd5b5051919050565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b60006020828403121561175b57600080fd5b815161156681611442565b600060018201611778576117786116dd565b5060010190565b634e487b7160e01b600052602160045260246000fd5b600082198211156117a8576117a86116dd565b50019056fea2646970667358221220b41ca7110c27843c888fd86833e8f4658e46a22feba9517f56d8855f80a64b5264736f6c634300080f0033608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76908290a350601960049081553360009081526003602052604090819020805460ff19166001179055905490517fa2e09ae7caa0e84bcfe806d931934b92bf11ce67ffcaa3033af9a1e031996951916100a89190815260200190565b60405180910390a1610d28806100bf6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638945bd281161008c578063af5899fc11610066578063af5899fc14610202578063c70a900f14610215578063daf9c21014610248578063fc361c381461026b57600080fd5b80638945bd28146101515780638da5cb5b146101645780639d8669851461018f57600080fd5b806307de99f6146100d45780630ffb1d8b146100fa57806313af40351461010f578063329e53be14610122578063391fe4e21461013557806384bfabcf1461013e575b600080fd5b6100e76100e2366004610ad9565b61027e565b6040519081526020015b60405180910390f35b61010d610108366004610b1e565b61028f565b005b61010d61011d366004610b51565b610322565b61010d610130366004610b1e565b610397565b6100e760045481565b6100e761014c366004610b73565b610419565b61010d61015f366004610ad9565b61043e565b600054610177906001600160a01b031681565b6040516001600160a01b0390911681526020016100f1565b6101ef61019d366004610ad9565b60016020819052600091825260409091208054918101546002820154600383015460048401546005909401546001600160a01b0395861695938416949390921692909160ff8082169161010090041687565b6040516100f19796959493929190610bd4565b61010d610210366004610b73565b6104a3565b610238610223366004610b51565b60036020526000908152604090205460ff1681565b60405190151581526020016100f1565b610238610256366004610b51565b60026020526000908152604090205460ff1681565b61010d610279366004610c3a565b6106fe565b600061028982610962565b92915050565b6000546001600160a01b031633146102c25760405162461bcd60e51b81526004016102b990610c5d565b60405180910390fd5b6001600160a01b038216600081815260026020908152604091829020805460ff191685151590811790915591519182527fef81a9943b96c8df4ef243401c9bf5159146166211356898b52d382086168d9291015b60405180910390a25050565b6000546001600160a01b0316331461034c5760405162461bcd60e51b81526004016102b990610c5d565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a350565b6000546001600160a01b031633146103c15760405162461bcd60e51b81526004016102b990610c5d565b6001600160a01b038216600081815260036020908152604091829020805460ff191685151590811790915591519182527f8cc72bec7e2cf5979aefd933f40a28eb590098d522a5c458e497e71c5e6fa90f9101610316565b60008061042583610962565b9050610434868686868561097e565b9695505050505050565b6000546001600160a01b031633146104685760405162461bcd60e51b81526004016102b990610c5d565b60048190556040518181527fa2e09ae7caa0e84bcfe806d931934b92bf11ce67ffcaa3033af9a1e0319969519060200160405180910390a150565b6001600160a01b03821660009081526002602052604090205460ff166104e75760405163010d7e6160e11b81526001600160a01b03831660048201526024016102b9565b60006104f282610962565b90506000610503868686868661097e565b90506001600082815260016020526040902060050154610100900460ff16600281111561053257610532610bbe565b036105535760405163d5e880e960e01b8152600481018290526024016102b9565b60006040518060e00160405280886001600160a01b03168152602001876001600160a01b03168152602001866001600160a01b03168152602001858152602001848152602001600015158152602001600160028111156105b5576105b5610bbe565b9052600083815260016020818152604092839020845181546001600160a01b03199081166001600160a01b03928316178355928601519382018054841694821694909417909355928401516002808501805490931691909316179055606083015160038301556080830151600483015560a083015160058301805460ff198116921515928317825560c0860151959650869593919261ffff1990911661ff0019909116179061010090849081111561066f5761066f610bbe565b021790555061068c9150506001600160a01b0386168730866109d1565b6106a16001600160a01b0386163330876109d1565b604080516001600160a01b038781168252602082018790529181018590528188169189169084907fb10e0c42d0d8cd4a999f95c50d18109fb205fdf5e55a8ed89121cab7f9f65f699060600160405180910390a450505050505050565b3360009081526003602052604090205460ff1661072e576040516314e9dd3960e31b815260040160405180910390fd5b6000828152600160208181526040808420815160e08101835281546001600160a01b03908116825294820154851693810193909352600280820154909416918301919091526003810154606083015260048101546080830152600581015460ff808216151560a08501529293919260c085019261010090920416908111156107b8576107b8610bbe565b60028111156107c9576107c9610bbe565b905250905060028160c0015160028111156107e6576107e6610bbe565b036108075760405163b677167760e01b8152600481018490526024016102b9565b81156108415780516060820151608083015161083c929161082791610c99565b60408401516001600160a01b03169190610a5b565b61085d565b61085d8160200151826060015183608001516108279190610c99565b600260c0820181815283151560a08401908152600086815260016020818152604092839020875181546001600160a01b039182166001600160a01b0319918216178355928901519382018054948216948416949094179093559287015183870180549190931691161790556060850151600382015560808501516004820155905160058201805491151560ff198316811782559351869593949093919261ff001990911661ffff19909116179061010090849081111561091f5761091f610bbe565b02179055505060405183151581528491507fdbed7580b9c2829ee6b384e3833f10b16f9885601c98a01c40fd705b543e9c669060200160405180910390a2505050565b60006064600454836109749190610cb1565b6102899190610cd0565b604080516001600160a01b0396871660208083019190915295871681830152939095166060840152608083019190915260a0808301919091528351808303909101815260c0909101909252815191012090565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d1160016000511416171691505080610a545760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b60448201526064016102b9565b5050505050565b600060405163a9059cbb60e01b8152836004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080610ad35760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b60448201526064016102b9565b50505050565b600060208284031215610aeb57600080fd5b5035919050565b80356001600160a01b0381168114610b0957600080fd5b919050565b80358015158114610b0957600080fd5b60008060408385031215610b3157600080fd5b610b3a83610af2565b9150610b4860208401610b0e565b90509250929050565b600060208284031215610b6357600080fd5b610b6c82610af2565b9392505050565b60008060008060808587031215610b8957600080fd5b610b9285610af2565b9350610ba060208601610af2565b9250610bae60408601610af2565b9396929550929360600135925050565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b038881168252878116602083015286166040820152606081018590526080810184905282151560a082015260e0810160038310610c2857634e487b7160e01b600052602160045260246000fd5b8260c083015298975050505050505050565b60008060408385031215610c4d57600080fd5b82359150610b4860208401610b0e565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115610cac57610cac610c83565b500190565b6000816000190483118215151615610ccb57610ccb610c83565b500290565b600082610ced57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220a086d5378c38188b517141b491168433bcacdd1ef66aa0a3a08acd1fabd82c2a64736f6c634300080f00330000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12d46696c6c65642062792073686f756c6420626520657175616c20746f207468652072656c6179657246696c6c656420617420626c6f636b2073686f756c6420626520657175616c20746f207468652063757272656e7420626c6f636b206e756d626572280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf358344697370757465722073686f756c6420626520657175616c20746f207468652064697370757465725374616b652073686f756c6420626520657175616c20746f2074686520616d6f756e742073656e74885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d426f6f6b2073686f756c6420686176652073706f6e736f726564207468652070726f706f73616c46696c6c656420616d6f756e742073686f756c6420626520657175616c20746f2074686520616d6f756e742073656e7444697370757465722073686f756c64206861766520706f737465642074686520626f6e6450726f706f7365722073686f756c6420626520657175616c20746f207468652072656c61796572426f6e6420746f6b656e2073686f756c6420626520657175616c20746f20746865207465737420746f6b656e206f7574a2646970667358221220c98fa114f6fd5fcfdf69bbeee1f234c26781625d110d81facd6bd65a4983702264736f6c634300080f0033" . parse () . expect ("invalid bytecode")
        });
    pub struct DisputeTest<M>(ethers::contract::Contract<M>);
    impl<M> Clone for DisputeTest<M> {
        fn clone(&self) -> Self {
            DisputeTest(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for DisputeTest<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for DisputeTest<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(DisputeTest))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> DisputeTest<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), DISPUTETEST_ABI.clone(), client).into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                DISPUTETEST_ABI.clone(),
                DISPUTETEST_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `IS_TEST` (0xfa7626d4) function"]
        pub fn is_test(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([250, 118, 38, 212], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `bound` (0x5a6c1eed) function"]
        pub fn bound(
            &self,
            x: ethers::core::types::U256,
            min: ethers::core::types::U256,
            max: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([90, 108, 30, 237], (x, min, max))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deal` (0x6bce989b) function"]
        pub fn deal_with_token(
            &self,
            token: ethers::core::types::Address,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([107, 206, 152, 155], (token, to, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deal` (0x97754ae9) function"]
        pub fn deal_with_token_and_adjust(
            &self,
            token: ethers::core::types::Address,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
            adjust: bool,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([151, 117, 74, 233], (token, to, give, adjust))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deal` (0xc88a5e6d) function"]
        pub fn deal(
            &self,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([200, 138, 94, 109], (to, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deployCode` (0x29ce9dde) function"]
        pub fn deploy_code_with_args(
            &self,
            what: String,
            args: ethers::core::types::Bytes,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([41, 206, 157, 222], (what, args))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deployCode` (0x9a8325a0) function"]
        pub fn deploy_code(
            &self,
            what: String,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([154, 131, 37, 160], what)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `failed` (0xba414fa6) function"]
        pub fn failed(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([186, 65, 79, 166], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0x233240ee) function"]
        pub fn hoax_0(
            &self,
            who: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([35, 50, 64, 238], who)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0x29a9e300) function"]
        pub fn hoax_2(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([41, 169, 227, 0], (who, origin))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0xaf9bbe5f) function"]
        pub fn hoax_3(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([175, 155, 190, 95], (who, origin, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0xe9a79a7b) function"]
        pub fn hoax_4(
            &self,
            who: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([233, 167, 154, 123], (who, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `rewind` (0x2d6c17a3) function"]
        pub fn rewind(
            &self,
            time: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([45, 108, 23, 163], time)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setUp` (0x0a9254e4) function"]
        pub fn set_up(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([10, 146, 84, 228], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `skip` (0xb9c071b4) function"]
        pub fn skip(
            &self,
            time: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([185, 192, 113, 180], time)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0x108554f2) function"]
        pub fn start_hoax_1(
            &self,
            who: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([16, 133, 84, 242], (who, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0x3bf82db1) function"]
        pub fn start_hoax_2(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([59, 248, 45, 177], (who, origin, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0x6f597075) function"]
        pub fn start_hoax_0(
            &self,
            who: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([111, 89, 112, 117], who)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0xd06d8229) function"]
        pub fn start_hoax_4(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([208, 109, 130, 41], (who, origin))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotDisputeIfNotFilled` (0x2b56612b) function"]
        pub fn test_cannot_dispute_if_not_filled(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([43, 86, 97, 43], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotDisputeIfPeriodIsOver` (0x231c9c36) function"]
        pub fn test_cannot_dispute_if_period_is_over(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([35, 28, 156, 54], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testDispute` (0xc75b9644) function"]
        pub fn test_dispute(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([199, 91, 150, 68], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `tip` (0xd82555f1) function"]
        pub fn tip(
            &self,
            token: ethers::core::types::Address,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([216, 37, 85, 241], (token, to, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `vm` (0x3a768463) function"]
        pub fn vm(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([58, 118, 132, 99], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `MaxFeePctChanged` event"]
        pub fn max_fee_pct_changed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, MaxFeePctChangedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `SafeBlockThresholdChanged` event"]
        pub fn safe_block_threshold_changed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, SafeBlockThresholdChangedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TokenWhitelisted` event"]
        pub fn token_whitelisted_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TokenWhitelistedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeDisputed` event"]
        pub fn trade_disputed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeDisputedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeFilled` event"]
        pub fn trade_filled_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeFilledFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeRequested` event"]
        pub fn trade_requested_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeRequestedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeSettled` event"]
        pub fn trade_settled_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeSettledFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `UpdatedFeeForTrade` event"]
        pub fn updated_fee_for_trade_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, UpdatedFeeForTradeFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `WARNING_Deprecated` event"]
        pub fn warning_deprecated_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, WarningDeprecatedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log` event"]
        pub fn log_filter(&self) -> ethers::contract::builders::Event<M, LogFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_address` event"]
        pub fn log_address_filter(&self) -> ethers::contract::builders::Event<M, LogAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes` event"]
        pub fn log_bytes_filter(&self) -> ethers::contract::builders::Event<M, LogBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes32` event"]
        pub fn log_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_int` event"]
        pub fn log_int_filter(&self) -> ethers::contract::builders::Event<M, LogIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_address` event"]
        pub fn log_named_address_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes` event"]
        pub fn log_named_bytes_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes32` event"]
        pub fn log_named_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_int` event"]
        pub fn log_named_decimal_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_uint` event"]
        pub fn log_named_decimal_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_int` event"]
        pub fn log_named_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_string` event"]
        pub fn log_named_string_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_uint` event"]
        pub fn log_named_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_string` event"]
        pub fn log_string_filter(&self) -> ethers::contract::builders::Event<M, LogStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_uint` event"]
        pub fn log_uint_filter(&self) -> ethers::contract::builders::Event<M, LogUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `logs` event"]
        pub fn logs_filter(&self) -> ethers::contract::builders::Event<M, LogsFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, DisputeTestEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for DisputeTest<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "MaxFeePctChanged", abi = "MaxFeePctChanged(uint256)")]
    pub struct MaxFeePctChangedFilter {
        pub new_max_fee_pct: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "SafeBlockThresholdChanged",
        abi = "SafeBlockThresholdChanged(uint256)"
    )]
    pub struct SafeBlockThresholdChangedFilter {
        pub new_safe_block_threshold: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "TokenWhitelisted", abi = "TokenWhitelisted(address,bool)")]
    pub struct TokenWhitelistedFilter {
        #[ethevent(indexed)]
        pub token: ethers::core::types::Address,
        pub whitelisted: bool,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeDisputed",
        abi = "TradeDisputed(address,uint256,bytes32,uint256,uint256)"
    )]
    pub struct TradeDisputedFilter {
        #[ethevent(indexed)]
        pub relayer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
        #[ethevent(indexed)]
        pub dispute_id: [u8; 32],
        pub filled_amount: ethers::core::types::U256,
        pub fee_pct: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeFilled",
        abi = "TradeFilled(address,uint256,uint256,uint256,uint256)"
    )]
    pub struct TradeFilledFilter {
        #[ethevent(indexed)]
        pub relayer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
        #[ethevent(indexed)]
        pub filled_at_block: ethers::core::types::U256,
        pub fee_pct: ethers::core::types::U256,
        pub amount_out: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeRequested",
        abi = "TradeRequested(address,address,uint256,uint256,address,uint256)"
    )]
    pub struct TradeRequestedFilter {
        #[ethevent(indexed)]
        pub token_in: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub token_out: ethers::core::types::Address,
        pub amount_in: ethers::core::types::U256,
        pub fee_pct: ethers::core::types::U256,
        pub to: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeSettled",
        abi = "TradeSettled(address,uint256,uint256,uint256)"
    )]
    pub struct TradeSettledFilter {
        #[ethevent(indexed)]
        pub relayer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
        #[ethevent(indexed)]
        pub filled_amount: ethers::core::types::U256,
        pub fee_pct: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "UpdatedFeeForTrade",
        abi = "UpdatedFeeForTrade(address,uint256,uint256)"
    )]
    pub struct UpdatedFeeForTradeFilter {
        #[ethevent(indexed)]
        pub trader: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
        pub new_fee_pct: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "WARNING_Deprecated", abi = "WARNING_Deprecated(string)")]
    pub struct WarningDeprecatedFilter {
        pub msg: String,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log", abi = "log(string)")]
    pub struct LogFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_address", abi = "log_address(address)")]
    pub struct LogAddressFilter(pub ethers::core::types::Address);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes", abi = "log_bytes(bytes)")]
    pub struct LogBytesFilter(pub ethers::core::types::Bytes);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes32", abi = "log_bytes32(bytes32)")]
    pub struct LogBytes32Filter(pub [u8; 32]);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_int", abi = "log_int(int256)")]
    pub struct LogIntFilter(pub I256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_address", abi = "log_named_address(string,address)")]
    pub struct LogNamedAddressFilter {
        pub key: String,
        pub val: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes", abi = "log_named_bytes(string,bytes)")]
    pub struct LogNamedBytesFilter {
        pub key: String,
        pub val: ethers::core::types::Bytes,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes32", abi = "log_named_bytes32(string,bytes32)")]
    pub struct LogNamedBytes32Filter {
        pub key: String,
        pub val: [u8; 32],
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_int",
        abi = "log_named_decimal_int(string,int256,uint256)"
    )]
    pub struct LogNamedDecimalIntFilter {
        pub key: String,
        pub val: I256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_uint",
        abi = "log_named_decimal_uint(string,uint256,uint256)"
    )]
    pub struct LogNamedDecimalUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_int", abi = "log_named_int(string,int256)")]
    pub struct LogNamedIntFilter {
        pub key: String,
        pub val: I256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_string", abi = "log_named_string(string,string)")]
    pub struct LogNamedStringFilter {
        pub key: String,
        pub val: String,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_uint", abi = "log_named_uint(string,uint256)")]
    pub struct LogNamedUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_string", abi = "log_string(string)")]
    pub struct LogStringFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_uint", abi = "log_uint(uint256)")]
    pub struct LogUintFilter(pub ethers::core::types::U256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "logs", abi = "logs(bytes)")]
    pub struct LogsFilter(pub ethers::core::types::Bytes);
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum DisputeTestEvents {
        MaxFeePctChangedFilter(MaxFeePctChangedFilter),
        SafeBlockThresholdChangedFilter(SafeBlockThresholdChangedFilter),
        TokenWhitelistedFilter(TokenWhitelistedFilter),
        TradeDisputedFilter(TradeDisputedFilter),
        TradeFilledFilter(TradeFilledFilter),
        TradeRequestedFilter(TradeRequestedFilter),
        TradeSettledFilter(TradeSettledFilter),
        UpdatedFeeForTradeFilter(UpdatedFeeForTradeFilter),
        WarningDeprecatedFilter(WarningDeprecatedFilter),
        LogFilter(LogFilter),
        LogAddressFilter(LogAddressFilter),
        LogBytesFilter(LogBytesFilter),
        LogBytes32Filter(LogBytes32Filter),
        LogIntFilter(LogIntFilter),
        LogNamedAddressFilter(LogNamedAddressFilter),
        LogNamedBytesFilter(LogNamedBytesFilter),
        LogNamedBytes32Filter(LogNamedBytes32Filter),
        LogNamedDecimalIntFilter(LogNamedDecimalIntFilter),
        LogNamedDecimalUintFilter(LogNamedDecimalUintFilter),
        LogNamedIntFilter(LogNamedIntFilter),
        LogNamedStringFilter(LogNamedStringFilter),
        LogNamedUintFilter(LogNamedUintFilter),
        LogStringFilter(LogStringFilter),
        LogUintFilter(LogUintFilter),
        LogsFilter(LogsFilter),
    }
    impl ethers::contract::EthLogDecode for DisputeTestEvents {
        fn decode_log(log: &ethers::core::abi::RawLog) -> Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = MaxFeePctChangedFilter::decode_log(log) {
                return Ok(DisputeTestEvents::MaxFeePctChangedFilter(decoded));
            }
            if let Ok(decoded) = SafeBlockThresholdChangedFilter::decode_log(log) {
                return Ok(DisputeTestEvents::SafeBlockThresholdChangedFilter(decoded));
            }
            if let Ok(decoded) = TokenWhitelistedFilter::decode_log(log) {
                return Ok(DisputeTestEvents::TokenWhitelistedFilter(decoded));
            }
            if let Ok(decoded) = TradeDisputedFilter::decode_log(log) {
                return Ok(DisputeTestEvents::TradeDisputedFilter(decoded));
            }
            if let Ok(decoded) = TradeFilledFilter::decode_log(log) {
                return Ok(DisputeTestEvents::TradeFilledFilter(decoded));
            }
            if let Ok(decoded) = TradeRequestedFilter::decode_log(log) {
                return Ok(DisputeTestEvents::TradeRequestedFilter(decoded));
            }
            if let Ok(decoded) = TradeSettledFilter::decode_log(log) {
                return Ok(DisputeTestEvents::TradeSettledFilter(decoded));
            }
            if let Ok(decoded) = UpdatedFeeForTradeFilter::decode_log(log) {
                return Ok(DisputeTestEvents::UpdatedFeeForTradeFilter(decoded));
            }
            if let Ok(decoded) = WarningDeprecatedFilter::decode_log(log) {
                return Ok(DisputeTestEvents::WarningDeprecatedFilter(decoded));
            }
            if let Ok(decoded) = LogFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogFilter(decoded));
            }
            if let Ok(decoded) = LogAddressFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogAddressFilter(decoded));
            }
            if let Ok(decoded) = LogBytesFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogBytesFilter(decoded));
            }
            if let Ok(decoded) = LogBytes32Filter::decode_log(log) {
                return Ok(DisputeTestEvents::LogBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogIntFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedAddressFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogNamedAddressFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytesFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogNamedBytesFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytes32Filter::decode_log(log) {
                return Ok(DisputeTestEvents::LogNamedBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalIntFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogNamedDecimalIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalUintFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogNamedDecimalUintFilter(decoded));
            }
            if let Ok(decoded) = LogNamedIntFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogNamedIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedStringFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogNamedStringFilter(decoded));
            }
            if let Ok(decoded) = LogNamedUintFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogNamedUintFilter(decoded));
            }
            if let Ok(decoded) = LogStringFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogStringFilter(decoded));
            }
            if let Ok(decoded) = LogUintFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogUintFilter(decoded));
            }
            if let Ok(decoded) = LogsFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogsFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for DisputeTestEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                DisputeTestEvents::MaxFeePctChangedFilter(element) => element.fmt(f),
                DisputeTestEvents::SafeBlockThresholdChangedFilter(element) => element.fmt(f),
                DisputeTestEvents::TokenWhitelistedFilter(element) => element.fmt(f),
                DisputeTestEvents::TradeDisputedFilter(element) => element.fmt(f),
                DisputeTestEvents::TradeFilledFilter(element) => element.fmt(f),
                DisputeTestEvents::TradeRequestedFilter(element) => element.fmt(f),
                DisputeTestEvents::TradeSettledFilter(element) => element.fmt(f),
                DisputeTestEvents::UpdatedFeeForTradeFilter(element) => element.fmt(f),
                DisputeTestEvents::WarningDeprecatedFilter(element) => element.fmt(f),
                DisputeTestEvents::LogFilter(element) => element.fmt(f),
                DisputeTestEvents::LogAddressFilter(element) => element.fmt(f),
                DisputeTestEvents::LogBytesFilter(element) => element.fmt(f),
                DisputeTestEvents::LogBytes32Filter(element) => element.fmt(f),
                DisputeTestEvents::LogIntFilter(element) => element.fmt(f),
                DisputeTestEvents::LogNamedAddressFilter(element) => element.fmt(f),
                DisputeTestEvents::LogNamedBytesFilter(element) => element.fmt(f),
                DisputeTestEvents::LogNamedBytes32Filter(element) => element.fmt(f),
                DisputeTestEvents::LogNamedDecimalIntFilter(element) => element.fmt(f),
                DisputeTestEvents::LogNamedDecimalUintFilter(element) => element.fmt(f),
                DisputeTestEvents::LogNamedIntFilter(element) => element.fmt(f),
                DisputeTestEvents::LogNamedStringFilter(element) => element.fmt(f),
                DisputeTestEvents::LogNamedUintFilter(element) => element.fmt(f),
                DisputeTestEvents::LogStringFilter(element) => element.fmt(f),
                DisputeTestEvents::LogUintFilter(element) => element.fmt(f),
                DisputeTestEvents::LogsFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `IS_TEST`function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "IS_TEST", abi = "IS_TEST()")]
    pub struct IsTestCall;
    #[doc = "Container type for all input parameters for the `bound`function with signature `bound(uint256,uint256,uint256)` and selector `[90, 108, 30, 237]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "bound", abi = "bound(uint256,uint256,uint256)")]
    pub struct BoundCall {
        pub x: ethers::core::types::U256,
        pub min: ethers::core::types::U256,
        pub max: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `deal`function with signature `deal(address,address,uint256)` and selector `[107, 206, 152, 155]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deal", abi = "deal(address,address,uint256)")]
    pub struct DealWithTokenCall {
        pub token: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `deal`function with signature `deal(address,address,uint256,bool)` and selector `[151, 117, 74, 233]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deal", abi = "deal(address,address,uint256,bool)")]
    pub struct DealWithTokenAndAdjustCall {
        pub token: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
        pub adjust: bool,
    }
    #[doc = "Container type for all input parameters for the `deal`function with signature `deal(address,uint256)` and selector `[200, 138, 94, 109]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deal", abi = "deal(address,uint256)")]
    pub struct DealCall {
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `deployCode`function with signature `deployCode(string,bytes)` and selector `[41, 206, 157, 222]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deployCode", abi = "deployCode(string,bytes)")]
    pub struct DeployCodeWithArgsCall {
        pub what: String,
        pub args: ethers::core::types::Bytes,
    }
    #[doc = "Container type for all input parameters for the `deployCode`function with signature `deployCode(string)` and selector `[154, 131, 37, 160]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deployCode", abi = "deployCode(string)")]
    pub struct DeployCodeCall {
        pub what: String,
    }
    #[doc = "Container type for all input parameters for the `failed`function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "failed", abi = "failed()")]
    pub struct FailedCall;
    #[doc = "Container type for all input parameters for the `hoax`function with signature `hoax(address)` and selector `[35, 50, 64, 238]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address)")]
    pub struct Hoax0Call {
        pub who: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `hoax`function with signature `hoax(address,address)` and selector `[41, 169, 227, 0]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address,address)")]
    pub struct Hoax2Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `hoax`function with signature `hoax(address,address,uint256)` and selector `[175, 155, 190, 95]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address,address,uint256)")]
    pub struct Hoax3Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `hoax`function with signature `hoax(address,uint256)` and selector `[233, 167, 154, 123]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address,uint256)")]
    pub struct Hoax4Call {
        pub who: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `rewind`function with signature `rewind(uint256)` and selector `[45, 108, 23, 163]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "rewind", abi = "rewind(uint256)")]
    pub struct RewindCall {
        pub time: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `setUp`function with signature `setUp()` and selector `[10, 146, 84, 228]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "setUp", abi = "setUp()")]
    pub struct SetUpCall;
    #[doc = "Container type for all input parameters for the `skip`function with signature `skip(uint256)` and selector `[185, 192, 113, 180]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "skip", abi = "skip(uint256)")]
    pub struct SkipCall {
        pub time: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `startHoax`function with signature `startHoax(address,uint256)` and selector `[16, 133, 84, 242]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address,uint256)")]
    pub struct StartHoax1Call {
        pub who: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `startHoax`function with signature `startHoax(address,address,uint256)` and selector `[59, 248, 45, 177]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address,address,uint256)")]
    pub struct StartHoax2Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `startHoax`function with signature `startHoax(address)` and selector `[111, 89, 112, 117]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address)")]
    pub struct StartHoax0Call {
        pub who: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `startHoax`function with signature `startHoax(address,address)` and selector `[208, 109, 130, 41]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address,address)")]
    pub struct StartHoax4Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `testCannotDisputeIfNotFilled`function with signature `testCannotDisputeIfNotFilled()` and selector `[43, 86, 97, 43]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotDisputeIfNotFilled",
        abi = "testCannotDisputeIfNotFilled()"
    )]
    pub struct TestCannotDisputeIfNotFilledCall;
    #[doc = "Container type for all input parameters for the `testCannotDisputeIfPeriodIsOver`function with signature `testCannotDisputeIfPeriodIsOver()` and selector `[35, 28, 156, 54]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotDisputeIfPeriodIsOver",
        abi = "testCannotDisputeIfPeriodIsOver()"
    )]
    pub struct TestCannotDisputeIfPeriodIsOverCall;
    #[doc = "Container type for all input parameters for the `testDispute`function with signature `testDispute()` and selector `[199, 91, 150, 68]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testDispute", abi = "testDispute()")]
    pub struct TestDisputeCall;
    #[doc = "Container type for all input parameters for the `tip`function with signature `tip(address,address,uint256)` and selector `[216, 37, 85, 241]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "tip", abi = "tip(address,address,uint256)")]
    pub struct TipCall {
        pub token: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `vm`function with signature `vm()` and selector `[58, 118, 132, 99]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "vm", abi = "vm()")]
    pub struct VmCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum DisputeTestCalls {
        IsTest(IsTestCall),
        Bound(BoundCall),
        DealWithToken(DealWithTokenCall),
        DealWithTokenAndAdjust(DealWithTokenAndAdjustCall),
        Deal(DealCall),
        DeployCodeWithArgs(DeployCodeWithArgsCall),
        DeployCode(DeployCodeCall),
        Failed(FailedCall),
        Hoax0(Hoax0Call),
        Hoax2(Hoax2Call),
        Hoax3(Hoax3Call),
        Hoax4(Hoax4Call),
        Rewind(RewindCall),
        SetUp(SetUpCall),
        Skip(SkipCall),
        StartHoax1(StartHoax1Call),
        StartHoax2(StartHoax2Call),
        StartHoax0(StartHoax0Call),
        StartHoax4(StartHoax4Call),
        TestCannotDisputeIfNotFilled(TestCannotDisputeIfNotFilledCall),
        TestCannotDisputeIfPeriodIsOver(TestCannotDisputeIfPeriodIsOverCall),
        TestDispute(TestDisputeCall),
        Tip(TipCall),
        Vm(VmCall),
    }
    impl ethers::core::abi::AbiDecode for DisputeTestCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) = <IsTestCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::IsTest(decoded));
            }
            if let Ok(decoded) = <BoundCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::Bound(decoded));
            }
            if let Ok(decoded) =
                <DealWithTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::DealWithToken(decoded));
            }
            if let Ok(decoded) =
                <DealWithTokenAndAdjustCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::DealWithTokenAndAdjust(decoded));
            }
            if let Ok(decoded) = <DealCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(DisputeTestCalls::Deal(decoded));
            }
            if let Ok(decoded) =
                <DeployCodeWithArgsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::DeployCodeWithArgs(decoded));
            }
            if let Ok(decoded) =
                <DeployCodeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::DeployCode(decoded));
            }
            if let Ok(decoded) = <FailedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::Failed(decoded));
            }
            if let Ok(decoded) = <Hoax0Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::Hoax0(decoded));
            }
            if let Ok(decoded) = <Hoax2Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::Hoax2(decoded));
            }
            if let Ok(decoded) = <Hoax3Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::Hoax3(decoded));
            }
            if let Ok(decoded) = <Hoax4Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::Hoax4(decoded));
            }
            if let Ok(decoded) = <RewindCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::Rewind(decoded));
            }
            if let Ok(decoded) = <SetUpCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::SetUp(decoded));
            }
            if let Ok(decoded) = <SkipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(DisputeTestCalls::Skip(decoded));
            }
            if let Ok(decoded) =
                <StartHoax1Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::StartHoax1(decoded));
            }
            if let Ok(decoded) =
                <StartHoax2Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::StartHoax2(decoded));
            }
            if let Ok(decoded) =
                <StartHoax0Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::StartHoax0(decoded));
            }
            if let Ok(decoded) =
                <StartHoax4Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::StartHoax4(decoded));
            }
            if let Ok(decoded) =
                <TestCannotDisputeIfNotFilledCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(DisputeTestCalls::TestCannotDisputeIfNotFilled(decoded));
            }
            if let Ok(decoded) =
                <TestCannotDisputeIfPeriodIsOverCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(DisputeTestCalls::TestCannotDisputeIfPeriodIsOver(decoded));
            }
            if let Ok(decoded) =
                <TestDisputeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::TestDispute(decoded));
            }
            if let Ok(decoded) = <TipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(DisputeTestCalls::Tip(decoded));
            }
            if let Ok(decoded) = <VmCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(DisputeTestCalls::Vm(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for DisputeTestCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                DisputeTestCalls::IsTest(element) => element.encode(),
                DisputeTestCalls::Bound(element) => element.encode(),
                DisputeTestCalls::DealWithToken(element) => element.encode(),
                DisputeTestCalls::DealWithTokenAndAdjust(element) => element.encode(),
                DisputeTestCalls::Deal(element) => element.encode(),
                DisputeTestCalls::DeployCodeWithArgs(element) => element.encode(),
                DisputeTestCalls::DeployCode(element) => element.encode(),
                DisputeTestCalls::Failed(element) => element.encode(),
                DisputeTestCalls::Hoax0(element) => element.encode(),
                DisputeTestCalls::Hoax2(element) => element.encode(),
                DisputeTestCalls::Hoax3(element) => element.encode(),
                DisputeTestCalls::Hoax4(element) => element.encode(),
                DisputeTestCalls::Rewind(element) => element.encode(),
                DisputeTestCalls::SetUp(element) => element.encode(),
                DisputeTestCalls::Skip(element) => element.encode(),
                DisputeTestCalls::StartHoax1(element) => element.encode(),
                DisputeTestCalls::StartHoax2(element) => element.encode(),
                DisputeTestCalls::StartHoax0(element) => element.encode(),
                DisputeTestCalls::StartHoax4(element) => element.encode(),
                DisputeTestCalls::TestCannotDisputeIfNotFilled(element) => element.encode(),
                DisputeTestCalls::TestCannotDisputeIfPeriodIsOver(element) => element.encode(),
                DisputeTestCalls::TestDispute(element) => element.encode(),
                DisputeTestCalls::Tip(element) => element.encode(),
                DisputeTestCalls::Vm(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for DisputeTestCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                DisputeTestCalls::IsTest(element) => element.fmt(f),
                DisputeTestCalls::Bound(element) => element.fmt(f),
                DisputeTestCalls::DealWithToken(element) => element.fmt(f),
                DisputeTestCalls::DealWithTokenAndAdjust(element) => element.fmt(f),
                DisputeTestCalls::Deal(element) => element.fmt(f),
                DisputeTestCalls::DeployCodeWithArgs(element) => element.fmt(f),
                DisputeTestCalls::DeployCode(element) => element.fmt(f),
                DisputeTestCalls::Failed(element) => element.fmt(f),
                DisputeTestCalls::Hoax0(element) => element.fmt(f),
                DisputeTestCalls::Hoax2(element) => element.fmt(f),
                DisputeTestCalls::Hoax3(element) => element.fmt(f),
                DisputeTestCalls::Hoax4(element) => element.fmt(f),
                DisputeTestCalls::Rewind(element) => element.fmt(f),
                DisputeTestCalls::SetUp(element) => element.fmt(f),
                DisputeTestCalls::Skip(element) => element.fmt(f),
                DisputeTestCalls::StartHoax1(element) => element.fmt(f),
                DisputeTestCalls::StartHoax2(element) => element.fmt(f),
                DisputeTestCalls::StartHoax0(element) => element.fmt(f),
                DisputeTestCalls::StartHoax4(element) => element.fmt(f),
                DisputeTestCalls::TestCannotDisputeIfNotFilled(element) => element.fmt(f),
                DisputeTestCalls::TestCannotDisputeIfPeriodIsOver(element) => element.fmt(f),
                DisputeTestCalls::TestDispute(element) => element.fmt(f),
                DisputeTestCalls::Tip(element) => element.fmt(f),
                DisputeTestCalls::Vm(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<IsTestCall> for DisputeTestCalls {
        fn from(var: IsTestCall) -> Self {
            DisputeTestCalls::IsTest(var)
        }
    }
    impl ::std::convert::From<BoundCall> for DisputeTestCalls {
        fn from(var: BoundCall) -> Self {
            DisputeTestCalls::Bound(var)
        }
    }
    impl ::std::convert::From<DealWithTokenCall> for DisputeTestCalls {
        fn from(var: DealWithTokenCall) -> Self {
            DisputeTestCalls::DealWithToken(var)
        }
    }
    impl ::std::convert::From<DealWithTokenAndAdjustCall> for DisputeTestCalls {
        fn from(var: DealWithTokenAndAdjustCall) -> Self {
            DisputeTestCalls::DealWithTokenAndAdjust(var)
        }
    }
    impl ::std::convert::From<DealCall> for DisputeTestCalls {
        fn from(var: DealCall) -> Self {
            DisputeTestCalls::Deal(var)
        }
    }
    impl ::std::convert::From<DeployCodeWithArgsCall> for DisputeTestCalls {
        fn from(var: DeployCodeWithArgsCall) -> Self {
            DisputeTestCalls::DeployCodeWithArgs(var)
        }
    }
    impl ::std::convert::From<DeployCodeCall> for DisputeTestCalls {
        fn from(var: DeployCodeCall) -> Self {
            DisputeTestCalls::DeployCode(var)
        }
    }
    impl ::std::convert::From<FailedCall> for DisputeTestCalls {
        fn from(var: FailedCall) -> Self {
            DisputeTestCalls::Failed(var)
        }
    }
    impl ::std::convert::From<Hoax0Call> for DisputeTestCalls {
        fn from(var: Hoax0Call) -> Self {
            DisputeTestCalls::Hoax0(var)
        }
    }
    impl ::std::convert::From<Hoax2Call> for DisputeTestCalls {
        fn from(var: Hoax2Call) -> Self {
            DisputeTestCalls::Hoax2(var)
        }
    }
    impl ::std::convert::From<Hoax3Call> for DisputeTestCalls {
        fn from(var: Hoax3Call) -> Self {
            DisputeTestCalls::Hoax3(var)
        }
    }
    impl ::std::convert::From<Hoax4Call> for DisputeTestCalls {
        fn from(var: Hoax4Call) -> Self {
            DisputeTestCalls::Hoax4(var)
        }
    }
    impl ::std::convert::From<RewindCall> for DisputeTestCalls {
        fn from(var: RewindCall) -> Self {
            DisputeTestCalls::Rewind(var)
        }
    }
    impl ::std::convert::From<SetUpCall> for DisputeTestCalls {
        fn from(var: SetUpCall) -> Self {
            DisputeTestCalls::SetUp(var)
        }
    }
    impl ::std::convert::From<SkipCall> for DisputeTestCalls {
        fn from(var: SkipCall) -> Self {
            DisputeTestCalls::Skip(var)
        }
    }
    impl ::std::convert::From<StartHoax1Call> for DisputeTestCalls {
        fn from(var: StartHoax1Call) -> Self {
            DisputeTestCalls::StartHoax1(var)
        }
    }
    impl ::std::convert::From<StartHoax2Call> for DisputeTestCalls {
        fn from(var: StartHoax2Call) -> Self {
            DisputeTestCalls::StartHoax2(var)
        }
    }
    impl ::std::convert::From<StartHoax0Call> for DisputeTestCalls {
        fn from(var: StartHoax0Call) -> Self {
            DisputeTestCalls::StartHoax0(var)
        }
    }
    impl ::std::convert::From<StartHoax4Call> for DisputeTestCalls {
        fn from(var: StartHoax4Call) -> Self {
            DisputeTestCalls::StartHoax4(var)
        }
    }
    impl ::std::convert::From<TestCannotDisputeIfNotFilledCall> for DisputeTestCalls {
        fn from(var: TestCannotDisputeIfNotFilledCall) -> Self {
            DisputeTestCalls::TestCannotDisputeIfNotFilled(var)
        }
    }
    impl ::std::convert::From<TestCannotDisputeIfPeriodIsOverCall> for DisputeTestCalls {
        fn from(var: TestCannotDisputeIfPeriodIsOverCall) -> Self {
            DisputeTestCalls::TestCannotDisputeIfPeriodIsOver(var)
        }
    }
    impl ::std::convert::From<TestDisputeCall> for DisputeTestCalls {
        fn from(var: TestDisputeCall) -> Self {
            DisputeTestCalls::TestDispute(var)
        }
    }
    impl ::std::convert::From<TipCall> for DisputeTestCalls {
        fn from(var: TipCall) -> Self {
            DisputeTestCalls::Tip(var)
        }
    }
    impl ::std::convert::From<VmCall> for DisputeTestCalls {
        fn from(var: VmCall) -> Self {
            DisputeTestCalls::Vm(var)
        }
    }
}
